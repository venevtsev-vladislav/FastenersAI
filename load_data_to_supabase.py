#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ Supabase
"""

import asyncio
import json
import pandas as pd
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import SOURCE_FILES
from database.supabase_client import init_supabase, create_tables

async def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Supabase"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
        await init_supabase()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("üìã –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã...")
        await create_tables()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª–∏–∞—Å—ã
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–ª–∏–∞—Å—ã...")
        await load_aliases()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ SKU
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ SKU...")
        await load_normalized_skus()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥...")
        await load_main_catalog()
        
        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

async def load_aliases():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–ª–∏–∞—Å—ã –≤ –ë–î"""
    try:
        with open(SOURCE_FILES['aliases'], 'r', encoding='utf-8') as f:
            aliases = [json.loads(line.strip()) for line in f]
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(aliases)} –∞–ª–∏–∞—Å–æ–≤")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
        from database.supabase_client import _supabase_client
        
        if not _supabase_client:
            print("   ‚ö†Ô∏è  Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        try:
            _supabase_client.table('aliases').delete().neq('id', 0).execute()
            print("   üóëÔ∏è  –¢–∞–±–ª–∏—Ü–∞ aliases –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        insert_data = []
        for alias in aliases:
            insert_data.append({
                'alias': alias.get('alias', ''),
                'maps_to': alias.get('maps_to', {}),
                'source_url': alias.get('source_url', ''),
                'confidence': alias.get('confidence', 0.0),
                'notes': alias.get('notes', '')
            })
        
        try:
            response = _supabase_client.table('aliases').insert(insert_data).execute()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(aliases)} –∞–ª–∏–∞—Å–æ–≤ –≤ Supabase")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–ª–∏–∞—Å–æ–≤: {e}")
            import traceback
            traceback.print_exc()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        types_count = {}
        for alias in aliases:
            alias_type = alias['maps_to'].get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            types_count[alias_type] = types_count.get(alias_type, 0) + 1
        
        print("   üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
        for alias_type, count in sorted(types_count.items()):
            print(f"      {alias_type}: {count}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–ª–∏–∞—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()

async def load_normalized_skus():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ SKU –≤ –ë–î"""
    try:
        with open(SOURCE_FILES['normalized_skus'], 'r', encoding='utf-8') as f:
            skus = [json.loads(line.strip()) for line in f]
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(skus)} SKU")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
        from database.supabase_client import _supabase_client
        
        if not _supabase_client:
            print("   ‚ö†Ô∏è  Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        try:
            _supabase_client.table('parts_catalog').delete().neq('id', 0).execute()
            print("   üóëÔ∏è  –¢–∞–±–ª–∏—Ü–∞ parts_catalog –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
        batch_size = 100
        total_loaded = 0
        
        for i in range(0, len(skus), batch_size):
            batch = skus[i:i + batch_size]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_data = []
            for sku in batch:
                insert_data.append({
                    'sku': sku.get('sku', ''),
                    'name': sku.get('name', ''),
                    'type': sku.get('type', ''),
                    'pack_size': sku.get('pack_size', 0),
                    'unit': sku.get('unit', '—à—Ç')
                })
            
            try:
                response = _supabase_client.table('parts_catalog').insert(insert_data).execute()
                total_loaded += len(batch)
                print(f"   üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded}/{len(skus)} SKU")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞—Ç—á–∞ {i//batch_size + 1}: {e}")
        
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded} SKU –≤ Supabase")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        types_count = {}
        pack_sizes = {}
        
        for sku in skus:
            sku_type = sku.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            pack_size = sku.get('pack_size', 0)
            
            types_count[sku_type] = types_count.get(sku_type, 0) + 1
            pack_sizes[pack_size] = pack_sizes.get(pack_size, 0) + 1
        
        print("   üìà –¢–æ–ø-5 —Ç–∏–ø–æ–≤ –¥–µ—Ç–∞–ª–µ–π:")
        sorted_types = sorted(types_count.items(), key=lambda x: x[1], reverse=True)
        for i, (sku_type, count) in enumerate(sorted_types[:5]):
            print(f"      {i+1}. {sku_type}: {count}")
            
        print("   üì¶ –¢–æ–ø-5 —Ä–∞–∑–º–µ—Ä–æ–≤ —É–ø–∞–∫–æ–≤–æ–∫:")
        sorted_pack_sizes = sorted(pack_sizes.items(), key=lambda x: x[1], reverse=True)
        for i, (size, count) in enumerate(sorted_pack_sizes[:5]):
            print(f"      {i+1}. {size}: {count}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ SKU: {e}")
        import traceback
        traceback.print_exc()

async def load_main_catalog():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ë–î"""
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(SOURCE_FILES['excel_catalog'])
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:")
        print(f"      –ö–æ–ª–æ–Ω–∫–∏: {df.columns.tolist()}")
        print(f"      –†–∞–∑–º–µ—Ä: {df.shape}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print("   üìù –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        for i in range(3, min(8, len(df))):
            row = df.iloc[i]
            if pd.notna(row['Unnamed: 1']) and pd.notna(row['Unnamed: 2']):
                print(f"      –°—Ç—Ä–æ–∫–∞ {i}: {row['Unnamed: 1'][:50]}...")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤ Supabase
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")

if __name__ == "__main__":
    print("üîß –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    missing_files = []
    for file_type, file_path in SOURCE_FILES.items():
        if not os.path.exists(file_path):
            missing_files.append(f"{file_type}: {file_path}")
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for missing in missing_files:
            print(f"   {missing}")
        print("\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ Source/")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    asyncio.run(load_data())

