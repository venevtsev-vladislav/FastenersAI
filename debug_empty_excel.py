#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—É—Å—Ç–æ–≥–æ Excel —Ñ–∞–π–ª–∞
"""

import asyncio
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pipeline.message_processor import MessagePipeline

async def debug_empty_excel():
    """–û—Ç–ª–∞–¥–∫–∞ –ø—É—Å—Ç–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–£–°–¢–û–ì–û EXCEL –§–ê–ô–õ–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_query = "–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú10"
    
    try:
        from unittest.mock import Mock
        mock_message = Mock()
        mock_message.text = test_query
        mock_message.from_user.id = 12345
        mock_message.chat.id = 12345
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        pipeline = MessagePipeline(bot=None)
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{test_query}'")
        
        # –≠–¢–ê–ü 1: –ü–∞—Ä—Å–∏–Ω–≥
        print("\nüîç –≠–¢–ê–ü 1: –ü–ê–†–°–ò–ù–ì")
        normalized_result = await pipeline._parse_and_normalize(mock_message)
        
        if normalized_result:
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω")
            print(f"  - User intent: {json.dumps(normalized_result.get('user_intent', {}), ensure_ascii=False, indent=2)}")
        else:
            print(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
        
        # –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫
        print("\nüîç –≠–¢–ê–ü 2: –ü–û–ò–°–ö")
        search_results = await pipeline._search_database(normalized_result)
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        if search_results:
            print(f"  - –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
            first_result = search_results[0]
            for key, value in first_result.items():
                if key in ['sku', 'name', 'smart_probability', 'probability_percent', 'relevance_score']:
                    print(f"    {key}: {value}")
        else:
            print(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –≠–¢–ê–ü 3: –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        print("\nüîç –≠–¢–ê–ü 3: –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø")
        ranked_results = await pipeline._rank_results(search_results, normalized_result)
        
        print(f"‚úÖ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(ranked_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        if ranked_results:
            print(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
            for i, result in enumerate(ranked_results, 1):
                sku = result.get('sku', 'N/A')
                probability = result.get('smart_probability', 0)
                name = result.get('name', 'N/A')
                print(f"    {i}. {sku} - {probability}% - {name}")
        else:
            print(f"‚ùå –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
            print(f"  - –ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, result in enumerate(search_results, 1):
                sku = result.get('sku', 'N/A')
                probability = result.get('smart_probability', 0)
                name = result.get('name', 'N/A')
                print(f"    {i}. {sku} - {probability}% - {name}")
        
        # –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
        print("\nüîç –≠–¢–ê–ü 4: –ì–ï–ù–ï–†–ê–¶–ò–Ø EXCEL")
        if ranked_results:
            excel_file = await pipeline._generate_excel(ranked_results, normalized_result)
            print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            from openpyxl import load_workbook
            wb = load_workbook(excel_file)
            ws = wb.active
            
            print(f"  - –°—Ç—Ä–æ–∫ –≤ Excel: {ws.max_row}")
            print(f"  - –ö–æ–ª–æ–Ω–æ–∫ –≤ Excel: {ws.max_column}")
            
            if ws.max_row > 1:
                print(f"‚úÖ Excel —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
            else:
                print(f"‚ùå Excel –ø—É—Å—Ç–æ–π (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏)")
        else:
            print(f"‚ùå Excel –Ω–µ —Å–æ–∑–¥–∞–Ω - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        return len(ranked_results) > 0
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –í –û–¢–õ–ê–î–ö–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ –ø—É—Å—Ç–æ–≥–æ Excel...")
    
    result = asyncio.run(debug_empty_excel())
    
    if result:
        print("\nüéâ –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ù–ê–ô–î–ï–ù–ê!")
    else:
        print("\n‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê - –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–´!")
    
    sys.exit(0 if result else 1)
