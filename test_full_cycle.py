#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
"""

import asyncio
import logging
from database.supabase_client import search_parts, init_supabase
from services.excel_generator import ExcelGenerator

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_full_cycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–∏—Å–∫ -> Excel –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Supabase...")
    await init_supabase()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_query = "–≤–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 640 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π"
    test_user_intent = {
        "type": "–≤–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π",
        "diameter": "6",
        "length": "40",
        "material": None,
        "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
        "quantity": "200 —à—Ç",
        "confidence": 0.9
    }
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Supabase...")
    
    # –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π
    search_results = await search_parts(test_query, test_user_intent)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for i, result in enumerate(search_results[:5]):
        print(f"\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1} ---")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('name', 'N/A')}")
        print(f"SKU: {result.get('sku', 'N/A')}")
        print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result.get('probability_percent', 'N/A')}%")
        print(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('relevance_score', 'N/A')}")
        print(f"–ü—Ä–∏—á–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {result.get('match_reason', 'N/A')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel...")
    
    excel_generator = ExcelGenerator()
    excel_file = await excel_generator.generate_excel(search_results, test_query)
    
    print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel (—á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫)
    try:
        from openpyxl import load_workbook
        wb = load_workbook(excel_file)
        ws = wb.active
        
        print(f"\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞:")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {[ws.cell(row=1, column=i).value for i in range(1, 13)]}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        for row in range(2, min(5, ws.max_row + 1)):
            print(f"\n–°—Ç—Ä–æ–∫–∞ {row-1}:")
            print(f"  –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {ws.cell(row=row, column=7).value}")
            print(f"  –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {ws.cell(row=row, column=11).value}")
            print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {ws.cell(row=row, column=12).value}")
        
        wb.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel: {e}")

if __name__ == "__main__":
    asyncio.run(test_full_cycle())
