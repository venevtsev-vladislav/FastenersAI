#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π –ø–æ–∏—Å–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
from database.supabase_client import search_parts

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_search_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    test_queries = [
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
        {
            "query": "–ë–æ–ª—Ç—ã DIN603 –ú6—Ö40, —Ü–∏–Ω–∫ (—Ç—ã—Å.—à—Ç)",
            "description": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å —Å —Ç–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
        },
        # –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –∞–ª–∏–∞—Å—ã)
        {
            "query": "–±–æ–ª—Ç —Å –≥—Ä–∏–±–∫–æ–º –ú6 –Ω–∞ 40, —Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "description": "–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏"
        },
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        {
            "query": "–±–æ–ª—Ç –ú8—Ö20",
            "description": "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"
        }
    ]
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞\n")
    
    for i, test_case in enumerate(test_queries, 1):
        print(f"üìù –¢–µ—Å—Ç {i}: {test_case['description']}")
        print(f"üîç –ó–∞–ø—Ä–æ—Å: {test_case['query']}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º user_intent –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_intent = {
                "type": "–±–æ–ª—Ç",
                "diameter": "M6",
                "length": "40 –º–º",
                "coating": "—Ü–∏–Ω–∫",
                "quantity": "1000 —à—Ç",
                "confidence": 0.9
            }
            
            results = await search_parts(test_case['query'], user_intent)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(results)}")
            
            if results:
                print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
                for j, result in enumerate(results[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"   {j}. {result.get('name', 'N/A')} (SKU: {result.get('sku', 'N/A')})")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_score', 'N/A')}%")
                    print(f"      –£–ø–∞–∫–æ–≤–∫–∞: {result.get('packages_needed', 'N/A')} —É–ø.")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        
        print("-" * 50)
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 50)
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∏")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –∞–ª–∏–∞—Å–∞–º –≤ Edge Function")
    print("‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é Edge Function –≤ Supabase")
    print("2. –î–æ–±–∞–≤—å—Ç–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É aliases")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    asyncio.run(test_search_queries())
