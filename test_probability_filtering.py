#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
"""

import asyncio
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pipeline.message_processor import MessagePipeline

async def test_probability_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""
    
    print("üîç –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –í–ï–†–û–Ø–¢–ù–û–°–¢–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
    test_search_results = [
        {
            "sku": "10-0010040",
            "name": "–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú10",
            "smart_probability": 85,  # –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏
            "diameter": "M10",
            "material": "–ª–∞—Ç—É–Ω—å"
        },
        {
            "sku": "6-0049020", 
            "name": "–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú10—Ö30, —Ü–∏–Ω–∫",
            "smart_probability": 70,  # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏
            "diameter": "M10",
            "coating": "—Ü–∏–Ω–∫"
        },
        {
            "sku": "12-0013800",
            "name": "–í–∏–Ω—Ç DIN 7985 –ú4—Ö40, —Ü–∏–Ω–∫",
            "smart_probability": 45,  # –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞
            "diameter": "M4",
            "coating": "—Ü–∏–Ω–∫"
        },
        {
            "sku": "8-0021500",
            "name": "–ì–∞–π–∫–∞ –ú8, —Ü–∏–Ω–∫",
            "smart_probability": 30,  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞
            "diameter": "M8"
        },
        {
            "sku": "15-0032000",
            "name": "–®–∞–π–±–∞ –ú10, —Ü–∏–Ω–∫",
            "smart_probability": 65,  # –ì—Ä–∞–Ω–∏—á–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏
            "diameter": "M10"
        }
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º pipeline
        pipeline = MessagePipeline(bot=None)
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for i, result in enumerate(test_search_results, 1):
            print(f"  {i}. {result['sku']} - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {result['smart_probability']}%")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        print(f"\nüîç –¢–ï–°–¢–ò–†–£–ï–ú –§–ò–õ–¨–¢–†–ê–¶–ò–Æ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å >= 60%):")
        filtered_results = pipeline._filter_results_by_probability(test_search_results)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for i, result in enumerate(filtered_results, 1):
            print(f"  {i}. {result['sku']} - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {result['smart_probability']}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        excluded_skus = [r['sku'] for r in test_search_results if r not in filtered_results]
        included_skus = [r['sku'] for r in filtered_results]
        
        print(f"\nüìã –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print(f"  - –í–∫–ª—é—á–µ–Ω—ã: {included_skus}")
        print(f"  - –ò—Å–∫–ª—é—á–µ–Ω—ã: {excluded_skus}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        expected_included = ["10-0010040", "6-0049020", "15-0032000"]  # >= 60%
        expected_excluded = ["12-0013800", "8-0021500"]  # < 60%
        
        success = True
        for sku in expected_included:
            if sku not in included_skus:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {sku} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω, –Ω–æ –∏—Å–∫–ª—é—á–µ–Ω")
                success = False
        
        for sku in expected_excluded:
            if sku not in excluded_skus:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {sku} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω, –Ω–æ –≤–∫–ª—é—á–µ–Ω")
                success = False
        
        if success:
            print(f"‚úÖ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
        else:
            print(f"‚ùå –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!")
        
        return success
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_full_pipeline_with_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π pipeline —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    
    print("\n" + "="*60)
    print("üîç –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û PIPELINE –° –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô")
    print("="*60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_query = "–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú10\n–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú10—Ö30, —Ü–∏–Ω–∫"
    
    try:
        from unittest.mock import Mock
        mock_message = Mock()
        mock_message.text = test_query
        mock_message.from_user.id = 12345
        mock_message.chat.id = 12345
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        pipeline = MessagePipeline(bot=None)
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{test_query}'")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π pipeline
        result = await pipeline.process_message(mock_message, None)
        
        if result and result.get('excel_file'):
            print(f"‚úÖ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"  - Excel —Ñ–∞–π–ª: {result.get('excel_file')}")
            print(f"  - –°—Ç–∞—Ç—É—Å: {result.get('status', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel
            from openpyxl import load_workbook
            wb = load_workbook(result['excel_file'])
            ws = wb.active
            
            print(f"  - –°—Ç—Ä–æ–∫ –≤ Excel: {ws.max_row}")
            print(f"  - –ö–æ–ª–æ–Ω–æ–∫ –≤ Excel: {ws.max_column}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
            print(f"\nüìä –î–ê–ù–ù–´–ï –í EXCEL (—Ç–æ–ª—å–∫–æ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é >= 60%):")
            for row in range(2, ws.max_row + 1):
                sku = ws.cell(row=row, column=11).value  # SKU
                probability = ws.cell(row=row, column=13).value  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                name = ws.cell(row=row, column=12).value  # –ù–∞–∑–≤–∞–Ω–∏–µ
                print(f"  {row-1}. {sku} - {probability}% - {name}")
            
            return True
        else:
            print(f"‚ùå Pipeline –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
            return False
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï PIPELINE: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async def run_tests():
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filter_test = await test_probability_filtering()
        
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ pipeline
        pipeline_test = await test_full_pipeline_with_filtering()
        
        return filter_test and pipeline_test
    
    result = asyncio.run(run_tests())
    
    if result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–• –§–ò–õ–¨–¢–†–ê–¶–ò–ò!")
    
    sys.exit(0 if result else 1)
