#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ Supabase –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç Supabase –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π JSON
"""

import asyncio
import json
import sys
import os
import aiohttp
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.supabase_client import SupabaseClient

# –î–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_REQUEST_DATA = {
    "items": [
        {
            "type": "–∞–Ω–∫–µ—Ä",
            "diameter": "M8",
            "length": "10—Ö100 –º–º",
            "material": None,
            "coating": None,
            "quantity": "30—à—Ç",
            "confidence": 0.95
        },
        {
            "type": "–∞–Ω–∫–µ—Ä",
            "diameter": "M12",
            "length": "16—Ö130 –º–º",
            "material": None,
            "coating": None,
            "quantity": "10—à—Ç",
            "confidence": 0.95
        },
        {
            "type": "–∞–Ω–∫–µ—Ä –∫–æ—Å—Ç—ã–ª—å",
            "diameter": "8",
            "length": "40",
            "material": None,
            "coating": None,
            "quantity": "100—à—Ç",
            "confidence": 0.9
        },
        {
            "type": "–¥—é–±–µ–ª—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –ú–û–õ–õ–ò",
            "diameter": "5",
            "length": "52",
            "material": None,
            "coating": None,
            "quantity": "50—à—Ç",
            "confidence": 0.95
        },
        {
            "type": "–¥—é–±–µ–ª—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –ú–û–õ–õ–ò",
            "diameter": "6",
            "length": "52",
            "material": None,
            "coating": None,
            "quantity": "50—à—Ç",
            "confidence": 0.95
        },
        {
            "type": "–¥—é–±–µ–ª—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –ú–û–õ–õ–ò",
            "diameter": "6",
            "length": "80",
            "material": None,
            "coating": None,
            "quantity": "50—à—Ç",
            "confidence": 0.95
        },
        {
            "type": "—à–∞–π–±–∞ –¥–ª—è –ø–æ–ª–∏–∫–∞—Ä–±–æ–Ω–∞—Ç–∞",
            "diameter": "7",
            "length": "25",
            "material": "–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è",
            "coating": None,
            "quantity": "1800—à—Ç",
            "confidence": 0.9
        },
        {
            "type": "—à–∞–π–±–∞ –∫—Ä–æ–≤–µ–ª—å–Ω–∞—è",
            "diameter": "4,8",
            "length": "14",
            "material": None,
            "coating": "EPDM –ß–µ—Ä–Ω—ã–π 2.5–º–º",
            "quantity": "12000—à—Ç",
            "confidence": 0.95
        },
        {
            "type": "—à–∞–π–±–∞ –∫—Ä–æ–≤–µ–ª—å–Ω–∞—è",
            "diameter": "6,3",
            "length": "19",
            "material": None,
            "coating": "EPDM –ß–µ—Ä–Ω—ã–π 2.5–º–º",
            "quantity": "7000—à—Ç",
            "confidence": 0.95
        },
        {
            "type": "—à—É—Ä—É–ø —Å –ø–æ–ª—É–∫–æ–ª—å—Ü–æ–º",
            "diameter": "4",
            "length": "65",
            "material": None,
            "coating": None,
            "quantity": "300—à—Ç",
            "confidence": 0.9
        }
    ]
}

async def test_single_item(item: Dict[str, Any], item_index: int) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    
    print(f"\n{'='*60}")
    print(f"üß™ –¢–ï–°–¢ {item_index + 1}: {item['type']}")
    print(f"{'='*60}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ length (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10—Ö100 –º–º" -> diameter="10", length="100")
    diameter = item['diameter']
    length = item['length']
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–º–µ—Ç—Ä (—É–±–∏—Ä–∞–µ–º M –µ—Å–ª–∏ –µ—Å—Ç—å)
    if diameter and diameter.startswith('M'):
        diameter = diameter[1:]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É (–∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ "10—Ö100 –º–º")
    if length and '—Ö' in length:
        length_parts = length.split('—Ö')
        if len(length_parts) >= 2:
            # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –∫–∞–∫ –¥–ª–∏–Ω—É
            length = length_parts[1].replace(' –º–º', '').strip()
    
    print(f"üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –¢–∏–ø: {item['type']}")
    print(f"   –î–∏–∞–º–µ—Ç—Ä: {item['diameter']} -> {diameter}")
    print(f"   –î–ª–∏–Ω–∞: {item['length']} -> {length}")
    print(f"   –ú–∞—Ç–µ—Ä–∏–∞–ª: {item['material']}")
    print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {item['coating']}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item['confidence']}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    search_query = f"{item['type']}"
    if diameter:
        search_query += f" M{diameter}"
    if length:
        search_query += f"x{length}"
    if item['coating']:
        search_query += f" {item['coating']}"
    if item['material']:
        search_query += f" {item['material']}"
    
    print(f"\nüîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {search_query}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase –∏–∑ config
        from config import SUPABASE_URL, SUPABASE_KEY
        supabase_url = SUPABASE_URL
        supabase_key = SUPABASE_KEY
        
        # –í—ã–∑—ã–≤–∞–µ–º Edge Function
        edge_function_url = f"{supabase_url}/functions/v1/fastener-search"
        headers = {
            'Authorization': f'Bearer {supabase_key}',
            'Content-Type': 'application/json'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è Edge Function
        payload = {
            "search_query": search_query,
            "user_intent": {
                "type": item['type'],
                "diameter": diameter,
                "length": length,
                "coating": item['coating'],
                "material": item['material'],
                "is_simple_parsed": False
            }
        }
        
        print(f"üåê –í—ã–∑—ã–≤–∞–µ–º Edge Function: {edge_function_url}")
        print(f"üì§ Payload: {json.dumps(payload, ensure_ascii=False, indent=2)}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(edge_function_url, json=payload, headers=headers) as response:
                if response.status == 200:
                    search_results = await response.json()
                    print(f"‚úÖ Edge Function –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response.status}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ Edge Function: {response.status}")
                    error_text = await response.text()
                    print(f"üí• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    return {
                        "item_index": item_index,
                        "success": False,
                        "error": f"HTTP {response.status}: {error_text}",
                        "results": []
                    }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if isinstance(search_results, dict) and 'results' in search_results:
            results_list = search_results['results']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results_list)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if results_list:
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
                for i, result in enumerate(results_list[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
                    if isinstance(result, dict):
                        sku = result.get('sku', 'N/A')
                        name = result.get('name', 'N/A')
                        probability = result.get('probability_percent', 0)
                        match_reason = result.get('match_reason', 'N/A')
                        
                        print(f"  {i}. SKU: {sku}")
                        print(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
                        print(f"     –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}%")
                        print(f"     –ü—Ä–∏—á–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {match_reason}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        if i == 1 and 'explanation' in result:
                            print(f"     –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
                            for line in result['explanation'].split('\n'):
                                if line.strip():
                                    print(f"       {line}")
                        print()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                best_result = results_list[0] if results_list else None
                if best_result:
                    best_probability = best_result.get('probability_percent', 0)
                    print(f"üéØ –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
                    print(f"   SKU: {best_result.get('sku', 'N/A')}")
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {best_result.get('name', 'N/A')}")
                    print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {best_probability}%")
                    
                    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                    if best_probability >= 80:
                        quality = "–û–¢–õ–ò–ß–ù–û"
                        emoji = "üü¢"
                    elif best_probability >= 60:
                        quality = "–•–û–†–û–®–û"
                        emoji = "üü°"
                    elif best_probability >= 40:
                        quality = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
                        emoji = "üü†"
                    else:
                        quality = "–ü–õ–û–•–û"
                        emoji = "üî¥"
                    
                    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {emoji} {quality}")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return {
                "item_index": item_index,
                "success": True,
                "search_query": search_query,
                "results_count": len(results_list),
                "results": results_list,
                "best_result": results_list[0] if results_list else None
            }
        else:
            print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            return {
                "item_index": item_index,
                "success": False,
                "error": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞",
                "results": []
            }
            
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return {
            "item_index": item_index,
            "success": False,
            "error": str(e),
            "results": []
        }

async def test_user_request():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê –í SUPABASE –î–õ–Ø –ó–ê–ü–†–û–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 80)
    print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(USER_REQUEST_DATA['items'])} –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("=" * 80)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_results = []
    successful_searches = 0
    total_items = len(USER_REQUEST_DATA['items'])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    for i, item in enumerate(USER_REQUEST_DATA['items']):
        result = await test_single_item(item, i)
        test_results.append(result)
        
        if result['success'] and result['results_count'] > 0:
            successful_searches += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {successful_searches}/{total_items}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {total_items - successful_searches}/{total_items}")
    
    success_rate = successful_searches / total_items
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1%}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    excellent_matches = 0
    good_matches = 0
    satisfactory_matches = 0
    poor_matches = 0
    
    for result in test_results:
        if result['success'] and result['best_result']:
            probability = result['best_result'].get('probability_percent', 0)
            if probability >= 80:
                excellent_matches += 1
            elif probability >= 60:
                good_matches += 1
            elif probability >= 40:
                satisfactory_matches += 1
            else:
                poor_matches += 1
    
    print(f"\nüéØ –ö–ê–ß–ï–°–¢–í–û –°–û–í–ü–ê–î–ï–ù–ò–ô:")
    print(f"   üü¢ –û—Ç–ª–∏—á–Ω–æ (‚â•80%): {excellent_matches}")
    print(f"   üü° –•–æ—Ä–æ—à–æ (60-79%): {good_matches}")
    print(f"   üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (40-59%): {satisfactory_matches}")
    print(f"   üî¥ –ü–ª–æ—Ö–æ (<40%): {poor_matches}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
    print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–õ–£–ß–ê–ò:")
    for result in test_results:
        if not result['success']:
            item = USER_REQUEST_DATA['items'][result['item_index']]
            print(f"   ‚ùå {item['type']} - {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        elif result['results_count'] == 0:
            item = USER_REQUEST_DATA['items'][result['item_index']]
            print(f"   ‚ö†Ô∏è  {item['type']} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        elif result['best_result'] and result['best_result'].get('probability_percent', 0) < 40:
            item = USER_REQUEST_DATA['items'][result['item_index']]
            probability = result['best_result'].get('probability_percent', 0)
            print(f"   ‚ö†Ô∏è  {item['type']} - –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ({probability}%)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    results_file = "test_results_user_request.json"
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump({
            "test_summary": {
                "total_items": total_items,
                "successful_searches": successful_searches,
                "success_rate": success_rate,
                "excellent_matches": excellent_matches,
                "good_matches": good_matches,
                "satisfactory_matches": satisfactory_matches,
                "poor_matches": poor_matches
            },
            "detailed_results": test_results
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
    
    return success_rate >= 0.7  # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –ø—Ä–∏ 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    result = asyncio.run(test_user_request())
    
    if result:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("Supabase –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    sys.exit(0 if result else 1)
