#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ message_handler_v2
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ pipeline
"""

import asyncio
import sys
import os
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from handlers.message_handler_v2 import MessageHandlerV2
from railway_logging import setup_railway_logging

async def test_gpt_assistant_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    print("üîç –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò GPT –ê–°–°–ò–°–¢–ï–ù–¢–ê –í MESSAGE_HANDLER_V2")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_railway_logging()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
    mock_supabase_client = Mock()
    mock_supabase_client.create_request = AsyncMock(return_value="test-request-id")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = MessageHandlerV2()
    handler.supabase_client = mock_supabase_client
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    test_text = "–ê–Ω–∫–µ—Ä —Å –∫–æ–ª—å—Ü–æ–º –º8 10—Ö100 (30—à—Ç)\n–ê–Ω–∫–µ—Ä —Å –∫–æ–ª—å—Ü–æ–º –º12 16—Ö130 (10—à—Ç)"
    
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {test_text}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\nüîÑ –¢–ï–°–¢–ò–†–£–ï–ú –ö–û–ù–í–ï–†–¢–ê–¶–ò–Æ GPT –†–ï–ó–£–õ–¨–¢–ê–¢–ê")
    print("-" * 40)
    
    # –ú–æ–∫ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    mock_gpt_result = {
        "items": [
            {
                "type": "–∞–Ω–∫–µ—Ä",
                "diameter": "M8",
                "length": "10—Ö100 –º–º",
                "quantity": "30—à—Ç",
                "confidence": 0.95
            },
            {
                "type": "–∞–Ω–∫–µ—Ä",
                "diameter": "M12",
                "length": "16—Ö130 –º–º",
                "quantity": "10—à—Ç",
                "confidence": 0.95
            }
        ]
    }
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    results = handler._convert_gpt_result_to_processing_results(mock_gpt_result, "test-request-id")
    
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    for i, result in enumerate(results, 1):
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {result.raw_text} | —Å—Ç–∞—Ç—É—Å: {result.status} | –º–µ—Ç–æ–¥: {result.chosen_method}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ GPT –≤—ã–∑–æ–≤–∞)
    print("\nü§ñ –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–õ–ù–´–ô –ü–†–û–¶–ï–°–° (–ë–ï–ó –†–ï–ê–õ–¨–ù–û–ì–û GPT)")
    print("-" * 40)
    
    # –ú–æ–∫–∞–µ–º GPT —Å–µ—Ä–≤–∏—Å
    handler.openai_service.analyze_with_assistant = AsyncMock(return_value=mock_gpt_result)
    
    # –ú–æ–∫–∞–µ–º Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    handler.excel_generator.generate_excel = AsyncMock(return_value="/tmp/test.xlsx")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    mock_message = Mock()
    mock_message.text = test_text
    mock_message.reply_text = AsyncMock()
    mock_message.reply_document = AsyncMock()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await handler._handle_text_message(mock_message, "12345", "67890")
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—ã–ª –≤—ã–∑–≤–∞–Ω
        handler.openai_service.analyze_with_assistant.assert_called_once_with(test_text)
        print("‚úÖ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—ã–ª –≤—ã–∑–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Excel –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
        handler.excel_generator.generate_excel.assert_called_once()
        print("‚úÖ Excel —Ñ–∞–π–ª –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return
    
    print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("–¢–µ–ø–µ—Ä—å message_handler_v2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é!")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(test_gpt_assistant_integration())
