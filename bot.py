#!/usr/bin/env python3
"""
FastenersAI Bot - –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å webhook –¥–ª—è Railway
"""

import os
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram import Update
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers.command_handler import handle_start, handle_help
from handlers.message_handler_lightweight import handle_message, handle_rating_callback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏ webhook URL
PORT = int(os.getenv('PORT', 8000))
WEBHOOK_BASE = os.getenv('WEBHOOK_BASE', 'https://fastenersai-production.up.railway.app')
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    await update.message.reply_text(
        "‚úÖ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n"
        "üü¢ –û–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
        "üåê –†–µ–∂–∏–º: Webhook\n"
        "üîß –í–µ—Ä—Å–∏—è: Lightweight (–±–µ–∑ NumPy/Pandas)\n"
        "üì° –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway"
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ FastenersAI Bot (Lightweight –≤–µ—Ä—Å–∏—è)")
        logger.info(f"–ü–æ—Ä—Ç: {PORT}")
        logger.info(f"Webhook URL: {WEBHOOK_URL}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        global application
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        application.add_handler(CommandHandler("start", handle_start))
        application.add_handler(CommandHandler("help", handle_help))
        application.add_handler(CommandHandler("status", status))
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.PHOTO, handle_message))
        application.add_handler(MessageHandler(filters.VOICE, handle_message))
        application.add_handler(MessageHandler(filters.Document.ALL, handle_message))
        application.add_handler(CallbackQueryHandler(handle_rating_callback))
        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        async def log_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update.update_id}, —Ç–∏–ø: {update.effective_message.content_type if update.effective_message else 'unknown'}")
        
        application.add_handler(MessageHandler(filters.ALL, log_update), group=1)
        
        # –ó–∞–ø—É—Å–∫ webhook
        logger.info("–ó–∞–ø—É—Å–∫ webhook...")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=WEBHOOK_PATH,
            webhook_url=WEBHOOK_URL
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
