#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
"""

import logging
import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã –Ω–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ numpy
if 'numpy' in current_dir:
    # –ï—Å–ª–∏ –º—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ numpy, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é
    current_dir = os.path.dirname(current_dir)
    sys.path.insert(0, current_dir)

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import TELEGRAM_TOKEN
# from database.supabase_client import init_supabase  # –£–±—Ä–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Edge Function
from utils.logger import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è Railway
try:
    from handlers.message_handler import handle_message, handle_rating_callback
    from handlers.command_handler import handle_start, handle_help
    FULL_FUNCTIONALITY = True
    logger.info("–ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    async def handle_message(update, context):
        await update.message.reply_text("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ Railway")
    
    async def handle_rating_callback(update, context):
        await update.callback_query.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    
    async def handle_start(update, context):
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø FastenersAI Bot (Railway –≤–µ—Ä—Å–∏—è)")
    
    async def handle_help(update, context):
        await update.message.reply_text("–ü–æ–º–æ—â—å: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    
    FULL_FUNCTIONALITY = False
    logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Railway")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è Railway (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 8000)
        port = int(os.getenv('PORT', 8000))
        logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if FULL_FUNCTIONALITY:
            logger.info("üöÄ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", handle_start))
        application.add_handler(CommandHandler("help", handle_help))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –∫–Ω–æ–ø–æ–∫ (–æ—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞)
        application.add_handler(CallbackQueryHandler(handle_rating_callback, pattern="^rating_"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å, –¥–æ–∫—É–º–µ–Ω—Ç—ã)
        application.add_handler(MessageHandler(filters.PHOTO | filters.VOICE | filters.Document.ALL, handle_message))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —É–±—Ä–∞–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Edge Function
        logger.info("Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Edge Function")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
