#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.supabase_client_legacy import get_supabase_client_legacy
from railway_logging import setup_railway_logging

async def analyze_supabase_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –í SUPABASE")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_railway_logging()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        supabase_client = await get_supabase_client_legacy()
        
        if not supabase_client or not supabase_client.client:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É user_requests
        print("\nüìä –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ user_requests")
        print("-" * 40)
        
        try:
            response = supabase_client.client.table('user_requests').select('*').order('created_at', desc=True).limit(10).execute()
            
            if response.data:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∑–∞–ø–∏—Å–µ–π –≤ user_requests")
                
                for i, record in enumerate(response.data, 1):
                    print(f"\nüìù –ó–∞–ø–∏—Å—å {i}:")
                    print(f"  ID: {record.get('id')}")
                    print(f"  User ID: {record.get('user_id')}")
                    print(f"  Chat ID: {record.get('chat_id')}")
                    print(f"  –¢–∏–ø: {record.get('request_type')}")
                    print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {record.get('original_content', '')[:100]}...")
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {record.get('processed_text', '')[:100]}...")
                    
                    # –ü–∞—Ä—Å–∏–º user_intent
                    user_intent = record.get('user_intent')
                    if user_intent:
                        try:
                            if isinstance(user_intent, str):
                                user_intent = json.loads(user_intent)
                            print(f"  User Intent: {json.dumps(user_intent, ensure_ascii=False, indent=2)}")
                        except:
                            print(f"  User Intent: {user_intent}")
                    
                    print(f"  –°–æ–∑–¥–∞–Ω–æ: {record.get('created_at')}")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ user_requests")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ user_requests: {e}")
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É parts_catalog
        print("\nüìä –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ parts_catalog")
        print("-" * 40)
        
        try:
            response = supabase_client.client.table('parts_catalog').select('*').limit(10).execute()
            
            if response.data:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∑–∞–ø–∏—Å–µ–π –≤ parts_catalog")
                
                for i, record in enumerate(response.data, 1):
                    print(f"\nüîß –î–µ—Ç–∞–ª—å {i}:")
                    print(f"  ID: {record.get('id')}")
                    print(f"  SKU: {record.get('sku')}")
                    print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {record.get('name')}")
                    print(f"  –¢–∏–ø: {record.get('type')}")
                    print(f"  –£–ø–∞–∫–æ–≤–∫–∞: {record.get('pack_size')}")
                    print(f"  –ï–¥–∏–Ω–∏—Ü–∞: {record.get('unit')}")
                    print(f"  –°–æ–∑–¥–∞–Ω–æ: {record.get('created_at')}")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ parts_catalog")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ parts_catalog: {e}")
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É aliases
        print("\nüìä –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ aliases")
        print("-" * 40)
        
        try:
            response = supabase_client.client.table('aliases').select('*').limit(10).execute()
            
            if response.data:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∑–∞–ø–∏—Å–µ–π –≤ aliases")
                
                for i, record in enumerate(response.data, 1):
                    print(f"\nüè∑Ô∏è –ê–ª–∏–∞—Å {i}:")
                    print(f"  ID: {record.get('id')}")
                    print(f"  –ê–ª–∏–∞—Å: {record.get('alias')}")
                    print(f"  Maps to: {record.get('maps_to')}")
                    print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {record.get('confidence')}")
                    print(f"  –°–æ–∑–¥–∞–Ω–æ: {record.get('created_at')}")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ aliases")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ aliases: {e}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –¢–ê–ë–õ–ò–¶")
        print("-" * 40)
        
        new_tables = ['requests', 'request_lines', 'candidates', 'items', 'sku_aliases']
        
        for table_name in new_tables:
            try:
                response = supabase_client.client.table(table_name).select('count').execute()
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        
        # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –ó–ê–ü–†–û–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
        print("-" * 40)
        
        try:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = supabase_client.client.table('user_requests').select('*').eq('user_id', '225663491').order('created_at', desc=True).limit(5).execute()
            
            if response.data:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∑–∞–ø–∏—Å–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 225663491")
                
                for i, record in enumerate(response.data, 1):
                    print(f"\nüë§ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}:")
                    print(f"  ID: {record.get('id')}")
                    print(f"  –¢–∏–ø: {record.get('request_type')}")
                    print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {record.get('original_content', '')}")
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {record.get('processed_text', '')}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ user_intent
                    user_intent = record.get('user_intent')
                    if user_intent:
                        try:
                            if isinstance(user_intent, str):
                                user_intent = json.loads(user_intent)
                            
                            print(f"  User Intent JSON:")
                            print(f"    {json.dumps(user_intent, ensure_ascii=False, indent=4)}")
                            
                            # –ï—Å–ª–∏ —ç—Ç–æ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            if 'items' in user_intent:
                                print(f"  üéØ GPT –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(user_intent['items'])} –ø–æ–∑–∏—Ü–∏–π")
                                for j, item in enumerate(user_intent['items'], 1):
                                    print(f"    –ü–æ–∑–∏—Ü–∏—è {j}: {item.get('type')} {item.get('diameter')} {item.get('length')} {item.get('quantity')}")
                            
                        except Exception as json_error:
                            print(f"  User Intent (raw): {user_intent}")
                    
                    print(f"  –°–æ–∑–¥–∞–Ω–æ: {record.get('created_at')}")
            else:
                print("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 225663491")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(analyze_supabase_data())
