#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ GPT –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
"""

import asyncio
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pipeline.message_processor import MessagePipeline
from services.message_processor import MessageProcessor

async def test_gpt_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ GPT –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    
    print("üîç –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê GPT –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –ó–ê–ü–†–û–°–ê")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_query = """–ê–Ω–∫–µ—Ä –¥–≤—É—Ö—Ä–∞—Å–ø–æ—Ä–Ω—ã–π 8—Ö100—Ö12 —Å –∫—Ä—é–∫–æ–º
–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú10
–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú12—Ö38–º–º —Å –Ω–∞—Å–µ—á–∫–∞–º–∏
–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç 10—Ö120
–ê–Ω–∫–µ—Ä –∫–ª–∏–Ω–æ–≤–æ–π –æ—Ü–∏–Ω–∫. –ú16/70—Ö180 Bullit
–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç 12—Ö130
–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç —Å –≥–∞–π–∫–æ–π –ú12—Ö129
–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú10—Ö30, —Ü–∏–Ω–∫
–í–∏–Ω—Ç DIN 7985 –ú4—Ö40, —Ü–∏–Ω–∫
–ì–≤–æ–∑–¥—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π 4,0—Ö120"""
    
    user_id = 12345
    
    try:
        # –°–æ–∑–¥–∞–µ–º mock Message –æ–±—ä–µ–∫—Ç
        from unittest.mock import Mock
        mock_message = Mock()
        mock_message.text = test_query
        mock_message.from_user.id = user_id
        mock_message.chat.id = user_id
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
        print(f"'{test_query}'")
        print(f"üë§ User ID: {user_id}")
        
        # –≠–¢–ê–ü 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º MessageProcessor –Ω–∞–ø—Ä—è–º—É—é
        print("\n" + "="*70)
        print("üîç –≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–£–ï–ú MESSAGEPROCESSOR –ù–ê–ü–†–Ø–ú–£–Æ")
        print("="*70)
        
        message_processor = MessageProcessor()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        parsed_result = await message_processor.process_message(mock_message)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ MessageProcessor:")
        print(f"  - –¢–∏–ø: {type(parsed_result)}")
        if parsed_result:
            print(f"  - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {json.dumps(parsed_result, ensure_ascii=False, indent=2)}")
        else:
            print("  - –†–µ–∑—É–ª—å—Ç–∞—Ç: None")
        
        # –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º Pipeline
        print("\n" + "="*70)
        print("üîç –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–£–ï–ú PIPELINE")
        print("="*70)
        
        pipeline = MessagePipeline(bot=None)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ pipeline
        pipeline_result = await pipeline._parse_and_normalize(mock_message)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Pipeline:")
        print(f"  - –¢–∏–ø: {type(pipeline_result)}")
        if pipeline_result:
            print(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {pipeline_result.get('processed_text', 'N/A')}")
            print(f"  - User intent: {json.dumps(pipeline_result.get('user_intent', {}), ensure_ascii=False, indent=2)}")
            print(f"  - Confidence: {pipeline_result.get('confidence', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º items
            user_intent = pipeline_result.get('user_intent', {})
            if user_intent.get('is_multiple_order') and user_intent.get('items'):
                print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(user_intent['items'])}")
                print(f"  - –ü–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏:")
                for i, item in enumerate(user_intent['items'][:3], 1):
                    print(f"    {i}. {item}")
        else:
            print("  - –†–µ–∑—É–ª—å—Ç–∞—Ç: None")
        
        # –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print("\n" + "="*70)
        print("üîç –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–ò–°–ö")
        print("="*70)
        
        if pipeline_result:
            search_results = await pipeline._search_database(pipeline_result)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:")
            print(f"  - –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_results)}")
            
            if search_results:
                print(f"  - –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
                first_result = search_results[0]
                for key, value in first_result.items():
                    print(f"    {key}: {value}")
            else:
                print("  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        return True
        
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_single_item_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    
    print("\n" + "="*70)
    print("üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: –ü–ê–†–°–ò–ù–ì –û–î–ù–û–ô –ü–û–ó–ò–¶–ò–ò")
    print("="*70)
    
    # –¢–µ—Å—Ç –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    single_query = "–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú10"
    
    try:
        from unittest.mock import Mock
        mock_message = Mock()
        mock_message.text = single_query
        mock_message.from_user.id = 12345
        mock_message.chat.id = 12345
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{single_query}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º MessageProcessor
        message_processor = MessageProcessor()
        parsed_result = await message_processor.process_message(mock_message)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"  - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {json.dumps(parsed_result, ensure_ascii=False, indent=2)}")
        
        return True
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPT...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async def run_tests():
        # –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        multiple_test = await test_gpt_parsing()
        
        # –¢–µ—Å—Ç –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        single_test = await test_single_item_parsing()
        
        return multiple_test and single_test
    
    result = asyncio.run(run_tests())
    
    if result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–ê–†–°–ò–ù–ì–ê –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–• –ü–ê–†–°–ò–ù–ì–ê!")
    
    sys.exit(0 if result else 1)
