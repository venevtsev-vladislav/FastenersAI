#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
    
    try:
        # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        print("1. –ü—Ä–æ–≤–µ—Ä—è—é –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
        from config import TELEGRAM_TOKEN, OPENAI_API_KEY, SUPABASE_URL, SUPABASE_KEY
        print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        print("2. –¢–µ—Å—Ç–∏—Ä—É—é Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä...")
        from services.excel_generator import ExcelGenerator
        
        generator = ExcelGenerator()
        print("   ‚úÖ Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ Excel —Ñ–∞–π–ª–∞
        print("3. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª...")
        test_data = [
            {
                'sku': 'TEST-001',
                'name': '–¢–µ—Å—Ç–æ–≤–∞—è –¥–µ—Ç–∞–ª—å',
                'type': '–¢–µ—Å—Ç',
                'pack_size': 100,
                'unit': '—à—Ç'
            }
        ]
        
        excel_file = await generator.generate_excel(test_data, "—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        print(f"   ‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(excel_file):
            print(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(excel_file)} –±–∞–π—Ç")
        else:
            print("   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        print("4. –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
        required_files = [
            'bot.py',
            'config.py',
            'handlers/command_handler.py',
            'handlers/message_handler.py',
            'services/message_processor.py',
            'services/openai_service.py',
            'services/excel_generator.py',
            'database/supabase_client.py',
            'utils/logger.py'
        ]
        
        missing_files = []
        for file_path in required_files:
            if not os.path.exists(file_path):
                missing_files.append(file_path)
        
        if missing_files:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        else:
            print("   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
        
        print("\nüéâ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_basic_functionality())
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        sys.exit(1)

