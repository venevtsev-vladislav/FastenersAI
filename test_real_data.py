#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_real_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    try:
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Supabase...")
        from database.supabase_client import init_supabase, search_parts
        
        await init_supabase()
        print("   ‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π
        print("2. –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π...")
        
        test_queries = [
            "–±–æ–ª—Ç –ú8",
            "—Å–∞–º–æ—Ä–µ–∑ –∫—Ä–æ–≤–µ–ª—å–Ω—ã–π",
            "–∞–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç",
            "—à–∞–π–±–∞ –ø—Ä—É–∂–∏–Ω–Ω–∞—è"
        ]
        
        for query in test_queries:
            print(f"   üîç –ü–æ–∏—Å–∫: '{query}'")
            results = await search_parts(query, {})
            
            if results:
                print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                for i, result in enumerate(results[:3]):
                    print(f"         {i+1}. {result.get('name', 'N/A')} (SKU: {result.get('sku', 'N/A')})")
            else:
                print(f"      ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("3. –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        
        # –ò—â–µ–º –±–æ–ª—Ç—ã –ú8
        search_results = await search_parts("–±–æ–ª—Ç –ú8", {})
        
        if search_results:
            from services.excel_generator import ExcelGenerator
            
            generator = ExcelGenerator()
            excel_file = await generator.generate_excel(
                search_results=search_results[:10],  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                user_request="–±–æ–ª—Ç –ú8"
            )
            
            if os.path.exists(excel_file):
                file_size = os.path.getsize(excel_file)
                print(f"   ‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_file}")
                print(f"   üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                print(f"   üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_results[:10])}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(excel_file)
                print("   üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            else:
                print("   ‚ùå Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        else:
            print("   ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_real_data())
