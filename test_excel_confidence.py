#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ GPT –≤ Excel —Ñ–∞–π–ª
"""

import asyncio
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from handlers.message_handler_full import FullMessageHandler
from services.excel_generator import ExcelGenerator

async def test_excel_confidence():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ GPT –≤ Excel"""
    
    print("üîç –¢–ï–°–¢ –ü–ï–†–ï–î–ê–ß–ò –£–í–ï–†–ï–ù–ù–û–°–¢–ò GPT –í EXCEL")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç GPT –ø–∞—Ä—Å–∏–Ω–≥–∞
    user_intent = {
        "is_multiple_order": True,
        "items": [
            {
                "type": "–∞–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π",
                "diameter": "M10",
                "length": None,
                "material": "–ª–∞—Ç—É–Ω—å",
                "coating": None,
                "quantity": None,
                "confidence": 0.9  # ‚Üê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç GPT
            },
            {
                "type": "–±–æ–ª—Ç",
                "diameter": "M10",
                "length": "30",
                "material": None,
                "coating": "—Ü–∏–Ω–∫",
                "quantity": None,
                "confidence": 0.95  # ‚Üê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç GPT
            }
        ]
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
    search_results = [
        {
            "sku": "10-0010040",
            "name": "–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú10",
            "diameter": "M10",
            "length": None,
            "material": "–ª–∞—Ç—É–Ω—å",
            "coating": None,
            "smart_probability": 85,
            "pack_size": 300,
            "unit": "—à—Ç",
            "search_query": "–∞–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π M10"
        },
        {
            "sku": "6-0049020",
            "name": "–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú10—Ö30, —Ü–∏–Ω–∫",
            "diameter": "M10",
            "length": "30",
            "material": None,
            "coating": "—Ü–∏–Ω–∫",
            "smart_probability": 90,
            "pack_size": 100,
            "unit": "—à—Ç",
            "search_query": "–±–æ–ª—Ç M10 30"
        }
    ]
    
    original_query = "–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú10\n–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú10—Ö30, —Ü–∏–Ω–∫"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler = FullMessageHandler()
        
        print("‚úÖ MessageHandlerFull —Å–æ–∑–¥–∞–Ω")
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"  - User intent: {json.dumps(user_intent, ensure_ascii=False, indent=2)}")
        print(f"  - Search results: {len(search_results)} –ø–æ–∑–∏—Ü–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        converted_results = handler._convert_search_results_to_new_format(search_results, user_intent)
        
        print(f"\n‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for i, result in enumerate(converted_results, 1):
            print(f"  –ü–æ–∑–∏—Ü–∏—è {i}:")
            print(f"    - confidence (GPT): {result.get('confidence', 'N/A')}")
            print(f"    - smart_probability: {result.get('smart_probability', 'N/A')}")
            print(f"    - sku: {result.get('sku', 'N/A')}")
            print(f"    - name: {result.get('name', 'N/A')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel
        print(f"\nüîç –ì–ï–ù–ï–†–ê–¶–ò–Ø EXCEL:")
        excel_file = await handler._generate_excel_file(search_results, user_intent, original_query)
        
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_file}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(excel_file)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞
        from openpyxl import load_workbook
        wb = load_workbook(excel_file)
        ws = wb.active
        
        print(f"\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï EXCEL –§–ê–ô–õ–ê:")
        print(f"  - –õ–∏—Å—Ç: {ws.title}")
        print(f"  - –°—Ç—Ä–æ–∫: {ws.max_row}")
        print(f"  - –ö–æ–ª–æ–Ω–æ–∫: {ws.max_column}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        print(f"\nüìù –ó–ê–ì–û–õ–û–í–ö–ò:")
        for col in range(1, ws.max_column + 1):
            header = ws.cell(row=1, column=col).value
            print(f"  {col:2d}: {header}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        print(f"\nüìä –î–ê–ù–ù–´–ï (—Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å):")
        for row in range(2, ws.max_row + 1):
            print(f"  –°—Ç—Ä–æ–∫–∞ {row}:")
            for col in range(1, ws.max_column + 1):
                value = ws.cell(row=row, column=col).value
                header = ws.cell(row=1, column=col).value
                if "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" in str(header) or "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å" in str(header):
                    print(f"    {col:2d}: {header} = {value} ‚≠ê")
                else:
                    print(f"    {col:2d}: {header} = {value}")
        
        return True
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ GPT –≤ Excel...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    result = asyncio.run(test_excel_confidence())
    
    if result:
        print("\nüéâ –¢–ï–°–¢ –ü–ï–†–ï–î–ê–ß–ò –£–í–ï–†–ï–ù–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù!")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ü–ï–†–ï–î–ê–ß–ò –£–í–ï–†–ï–ù–ù–û–°–¢–ò –ù–ï –ü–†–û–ô–î–ï–ù!")
    
    sys.exit(0 if result else 1)
