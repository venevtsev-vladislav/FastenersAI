"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è - –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ò–ò –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
"""

import logging
from typing import Dict, Any, Optional, List
from services.openai_service import OpenAIService

logger = logging.getLogger(__name__)

class QueryFallbackService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ò–ò"""
    
    def __init__(self):
        self.openai_service = OpenAIService()
    
    async def process_failed_query(
        self, 
        original_query: str, 
        search_results: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò
        
        Args:
            original_query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ)
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∏–ª–∏ –æ—à–∏–±–∫–æ–π
        """
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò: {original_query}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò
            ai_analysis = await self._analyze_query_with_ai(original_query)
            
            if ai_analysis.get('can_normalize'):
                # –ò–ò —Å–º–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                normalized_query = ai_analysis['normalized_query']
                logger.info(f"‚úÖ –ò–ò –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å: {original_query} -> {normalized_query}")
                
                return {
                    'success': True,
                    'can_normalize': True,
                    'original_query': original_query,
                    'normalized_query': normalized_query,
                    'ai_suggestions': ai_analysis.get('suggestions', []),
                    'reason': '–ò–ò —É—Å–ø–µ—à–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å'
                }
            else:
                # –ò–ò –Ω–µ —Å–º–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                logger.warning(f"‚ùå –ò–ò –Ω–µ —Å–º–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å: {original_query}")
                
                return {
                    'success': False,
                    'can_normalize': False,
                    'original_query': original_query,
                    'ai_feedback': ai_analysis.get('feedback', ''),
                    'reason': '–ò–ò –Ω–µ —Å–º–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                'success': False,
                'can_normalize': False,
                'original_query': original_query,
                'error': str(e),
                'reason': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞'
            }
    
    async def _analyze_query_with_ai(self, query: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–µ–ø–µ–∂–Ω—ã–º –¥–µ—Ç–∞–ª—è–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–ò–°–•–û–î–ù–´–ô –ó–ê–ü–†–û–°: {query}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
2. –ü–æ–ø—Ä–æ–±—É–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
3. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å - –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ—è—Å–Ω–æ

–í–û–ó–ú–û–ñ–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:

**–°–¶–ï–ù–ê–†–ò–ô 1: –ú–æ–∂–µ—Ç–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å**
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –¥–µ—Ç–∞–ª–∏, —Ä–∞–∑–º–µ—Ä—ã, –º–∞—Ç–µ—Ä–∏–∞–ª, –ø–æ–∫—Ä—ã—Ç–∏–µ
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
- –î–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞

**–°–¶–ï–ù–ê–†–ò–ô 2: –ù–µ –º–æ–∂–µ—Ç–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å**
- –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ—è—Å–Ω–æ
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω—É–∂–Ω—ã

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
{{
    "can_normalize": true/false,
    "normalized_query": "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ null",
    "suggestions": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"],
    "feedback": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å",
    "confidence": 0.95
}}

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º!
"""
            
            response = await self.openai_service.client.chat.completions.create(
                model=self.openai_service.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–µ–ø–µ–∂–Ω—ã–º –¥–µ—Ç–∞–ª—è–º. –ü–æ–º–æ–≥–∞–µ—à—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=1000
            )
            
            ai_response = response.choices[0].message.content
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                import json
                json_start = ai_response.find('{')
                json_end = ai_response.rfind('}') + 1
                
                if json_start != -1 and json_end != -1:
                    json_str = ai_response[json_start:json_end]
                    result = json.loads(json_str)
                    return result
                else:
                    # Fallback: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    return self._parse_text_response(ai_response)
                    
            except json.JSONDecodeError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {e}")
                return self._parse_text_response(ai_response)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ò–ò: {e}")
            return {
                'can_normalize': False,
                'feedback': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}',
                'confidence': 0.0
            }
    
    def _parse_text_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ò–ò"""
        response_lower = response.lower()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å, —Å–º–æ–≥ –ª–∏ –ò–ò –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
        if any(word in response_lower for word in ['–≤–∏–Ω—Ç', '–±–æ–ª—Ç', '–≥–∞–π–∫–∞', '—à–∞–π–±–∞', '—Å–∞–º–æ—Ä–µ–∑']):
            can_normalize = True
            normalized_query = response
        else:
            can_normalize = False
            normalized_query = None
        
        return {
            'can_normalize': can_normalize,
            'normalized_query': normalized_query,
            'feedback': response,
            'confidence': 0.7 if can_normalize else 0.3
        }
    
    def get_user_friendly_message(self, fallback_result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if fallback_result.get('can_normalize'):
            return (
                f"ü§î –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–µ–Ω, –Ω–æ —è –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –µ–≥–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å:\n\n"
                f"üìù **–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å:** {fallback_result['original_query']}\n"
                f"‚úÖ **–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:** {fallback_result['normalized_query']}\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
            )
        else:
            return (
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n\n"
                f"üìù **–ó–∞–ø—Ä–æ—Å:** {fallback_result['original_query']}\n\n"
                f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                f"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–µ—Ç–∞–ª–∏ (–≤–∏–Ω—Ç, –±–æ–ª—Ç, –≥–∞–π–∫–∞, —à–∞–π–±–∞)\n"
                f"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã (M6, 6 –º–º, –¥–ª–∏–Ω–∞)\n"
                f"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª/–ø–æ–∫—Ä—ã—Ç–∏–µ (—Å—Ç–∞–ª—å, —Ü–∏–Ω–∫, –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è)\n"
                f"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç (DIN, ISO, –ì–û–°–¢)\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ!"
            )
