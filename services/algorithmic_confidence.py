"""
–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
–ó–∞–º–µ–Ω—è–µ—Ç GPT –∞–Ω–∞–ª–∏–∑ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
"""

import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class AlgorithmicConfidenceAnalyzer:
    """–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ GPT"""
    
    def __init__(self):
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        self.weights = {
            'type_match': 0.4,        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏
            'diameter_match': 0.3,    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–∞
            'length_match': 0.2,      # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
            'standard_match': 0.1,    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
            'material_match': 0.1,    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            'coating_match': 0.1,     # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
            'grade_match': 0.1,       # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏
        }
    
    def analyze_confidence(self, user_query: str, search_results: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏
        
        Args:
            user_query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –±–∞–∑—ã
            
        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ confidence_score –∏ match_reason
        """
        logger.info(f"üîç AlgorithmicConfidence: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if not search_results:
            return search_results
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
        is_multiple_order = any(result.get('order_position') for result in search_results)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for result in search_results:
            confidence_score = self.calculate_confidence(result, user_query)
            match_reason = self.get_match_reason(result, user_query)
            
            result['confidence_score'] = confidence_score
            result['match_reason'] = match_reason
        
        # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ù–ï –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not is_multiple_order:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            search_results.sort(key=lambda x: x.get('confidence_score', 0), reverse=True)
            logger.info(f"üîç AlgorithmicConfidence: –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Å–æ—Ä—Ç–∏—Ä—É—é –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        else:
            logger.info(f"üîç AlgorithmicConfidence: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ - —Å–æ—Ö—Ä–∞–Ω—è—é –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∑–∏—Ü–∏–π")
        
        logger.info(f"üîç AlgorithmicConfidence: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–æ–ø-3 –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
        for i, result in enumerate(search_results[:3]):
            logger.info(f"   {i+1}. SKU: {result.get('sku')}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_score', 0):.2f}, –ü—Ä–∏—á–∏–Ω–∞: {result.get('match_reason')}")
        
        return search_results
    
    def calculate_confidence(self, search_result: Dict[str, Any], user_query: str) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∏—Å–∫–∞
        
        Args:
            search_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∏–∑ –±–∞–∑—ã
            user_query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            float: –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç 0.0 –¥–æ 1.0
        """
        score = 0.0
        
        # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –∑–∞ —Ç–æ, —á—Ç–æ —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–∏
        score += 0.1
        
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏
        if self._match_type(search_result, user_query):
            score += self.weights['type_match']
        
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–∞
        if self._match_diameter(search_result, user_query):
            score += self.weights['diameter_match']
        
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        if self._match_length(search_result, user_query):
            score += self.weights['length_match']
        
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
        if self._match_standard(search_result, user_query):
            score += self.weights['standard_match']
        
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if self._match_material(search_result, user_query):
            score += self.weights['material_match']
        
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
        if self._match_coating(search_result, user_query):
            score += self.weights['coating_match']
        
        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏
        if self._match_grade(search_result, user_query):
            score += self.weights['grade_match']
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 1.0
        return min(score, 1.0)
    
    def _match_type(self, search_result: Dict[str, Any], user_query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏"""
        result_type = search_result.get('type', '').lower()
        query_lower = user_query.lower()
        
        type_keywords = ['–≤–∏–Ω—Ç', '–≥–∞–π–∫–∞', '—à–∞–π–±–∞', '–±–æ–ª—Ç', '—Å–∞–º–æ—Ä–µ–∑', '—à—É—Ä—É–ø', '–∞–Ω–∫–µ—Ä', '–¥—é–±–µ–ª—å']
        
        for keyword in type_keywords:
            if keyword in query_lower and keyword in result_type:
                return True
        
        return False
    
    def _match_diameter(self, search_result: Dict[str, Any], user_query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–∞"""
        result_diameter = search_result.get('diameter', '').lower()
        query_lower = user_query.lower()
        
        # –ò—â–µ–º M6, M8, 6 –º–º, 8 –º–º –≤ –∑–∞–ø—Ä–æ—Å–µ
        diameter_patterns = [
            r'[–ºm]\d+',           # M6, M8
            r'\d+\s*–º–º',          # 6 –º–º, 8 –º–º
            r'\d+\s*—Å–º',          # 6 —Å–º, 8 —Å–º
        ]
        
        import re
        for pattern in diameter_patterns:
            query_match = re.search(pattern, query_lower)
            if query_match:
                query_diameter = query_match.group(0)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if query_diameter in result_diameter or result_diameter in query_diameter:
                    return True
        
        return False
    
    def _match_length(self, search_result: Dict[str, Any], user_query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω—ã"""
        result_length = search_result.get('length', '').lower()
        query_lower = user_query.lower()
        
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
        length_patterns = [
            r'\d+\s*–º–º',          # 20 –º–º, 30 –º–º
            r'\d+\s*—Å–º',          # 2 —Å–º, 3 —Å–º
            r'\d+\s*–¥—é–π–º',        # 1 –¥—é–π–º
        ]
        
        import re
        for pattern in length_patterns:
            query_match = re.search(pattern, query_lower)
            if query_match:
                query_length = query_match.group(0)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if query_length in result_length or result_length in query_length:
                    return True
        
        return False
    
    def _match_standard(self, search_result: Dict[str, Any], user_query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞"""
        result_name = search_result.get('name', '').lower()
        query_lower = user_query.lower()
        
        # –ò—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
        standard_patterns = [
            r'din\s+\d+',         # DIN 965, DIN 985
            r'iso\s+\d+',         # ISO 7380
            r'–≥–æ—Å—Ç\s+\d+',        # –ì–û–°–¢ 7798
        ]
        
        import re
        for pattern in standard_patterns:
            query_match = re.search(pattern, query_lower)
            if query_match:
                query_standard = query_match.group(0)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                if query_standard in result_name:
                    return True
        
        return False
    
    def _match_material(self, search_result: Dict[str, Any], user_query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        result_name = search_result.get('name', '').lower()
        query_lower = user_query.lower()
        
        materials = ['—Å—Ç–∞–ª—å', '–Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è', '–ª–∞—Ç—É–Ω—å', '–∞–ª—é–º–∏–Ω–∏–π', '–ø–ª–∞—Å—Ç–∏–∫', '–º–µ—Ç–∞–ª–ª']
        
        for material in materials:
            if material in query_lower and material in result_name:
                return True
        
        return False
    
    def _match_coating(self, search_result: Dict[str, Any], user_query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        result_name = search_result.get('name', '').lower()
        query_lower = user_query.lower()
        
        coatings = ['—Ü–∏–Ω–∫', '–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π', '—Ö—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', '–∫—Ä–∞—à–µ–Ω—ã–π', '–∂–µ–ª–µ–∑–æ']
        
        for coating in coatings:
            if coating in query_lower and coating in result_name:
                return True
        
        return False
    
    def _match_grade(self, search_result: Dict[str, Any], user_query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        result_name = search_result.get('name', '').lower()
        query_lower = user_query.lower()
        
        # –ò—â–µ–º –∫–ª–∞—Å—Å—ã –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
        grade_patterns = [
            r'[a–∞]\d+',           # A2, A4
            r'\d+\.\d+',          # 8.8, 10.9
        ]
        
        import re
        for pattern in grade_patterns:
            query_match = re.search(pattern, query_lower)
            if query_match:
                query_grade = query_match.group(0)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                if query_grade in result_name:
                    return True
        
        return False
    
    def get_match_reason(self, search_result: Dict[str, Any], user_query: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        
        Args:
            search_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            user_query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            str: –ü—Ä–∏—á–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if self._match_type(search_result, user_query) and self._match_diameter(search_result, user_query):
            return '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏ –¥–∏–∞–º–µ—Ç—Ä–∞'
        elif self._match_type(search_result, user_query):
            return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏'
        elif self._match_diameter(search_result, user_query):
            return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–∞'
        elif self._match_standard(search_result, user_query):
            return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞'
        elif self._match_material(search_result, user_query):
            return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'
        else:
            return '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'
