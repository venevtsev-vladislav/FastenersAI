"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
–î–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
"""

import logging
import json
from typing import List, Dict, Any, Tuple
from services.openai_service import OpenAIService
from database.supabase_client import search_parts

logger = logging.getLogger(__name__)

class EnhancedValidationService:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
    
    def __init__(self):
        self.openai_service = OpenAIService()
        from services.validation_prompts import ENHANCED_VALIDATION_PROMPT
        self.validation_prompt = ENHANCED_VALIDATION_PROMPT
    
    async def enhanced_validate_and_refine(
        self, 
        original_request: str, 
        search_results: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        
        Args:
            original_request: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º")
            
            # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            validation_data = self._prepare_validation_data(original_request, search_results)
            initial_validation = await self._analyze_with_ai(validation_data)
            
            logger.info(f"üìä –ü–µ—Ä–≤–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {initial_validation.get('status')}")
            
            # 2. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            if initial_validation.get('status') in ['NEEDS_REFINEMENT', 'NEEDS_CLARIFICATION']:
                logger.info("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
                
                improved_queries = await self._generate_improved_queries(
                    original_request, search_results, initial_validation
                )
                
                # 3. –î–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if improved_queries:
                    logger.info("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏...")
                    refined_results = await self._refined_search(improved_queries, search_results)
                    
                    # 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    final_results = self._merge_results(search_results, refined_results)
                    final_validation = await self._analyze_with_ai(
                        self._prepare_validation_data(original_request, final_results)
                    )
                    
                    return {
                        **final_validation,
                        'improved_queries': improved_queries,
                        'refined_results': refined_results,
                        'final_results': final_results,
                        'has_improvements': True
                    }
            
            # –ï—Å–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                **initial_validation,
                'has_improvements': False
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {
                "status": "ERROR",
                "message": f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}",
                "issues": [],
                "confidence": 0.0,
                "has_improvements": False
            }
    
    async def _generate_improved_queries(
        self, 
        original_request: str, 
        search_results: List[Dict[str, Any]], 
        validation: Dict[str, Any]
    ) -> Dict[int, List[str]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò
            improvement_prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è Supabase.

–ò–°–•–û–î–ù–´–ô –ó–ê–ü–†–û–°: {original_request}

–ü–†–û–ë–õ–ï–ú–´ –í–ê–õ–ò–î–ê–¶–ò–ò: {validation.get('message', '')}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è
2. –ü—Ä–µ–¥–ª–æ–∂–∏ 2-3 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
3. –£—á–∏—Ç—ã–≤–∞–π —Å–∏–Ω–æ–Ω–∏–º—ã, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
{{
    "improvements": [
        {{
            "position": 1,
            "original_query": "–≤–∏–Ω—Ç DIN 603 6 –º–º 40 –º–º",
            "improved_queries": [
                "–±–æ–ª—Ç DIN603 6x40 —Ü–∏–Ω–∫",
                "–≤–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 6–º–º 40–º–º",
                "DIN603 M6 40 —Ü–∏–Ω–∫"
            ],
            "reason": "–í–æ–∑–º–æ–∂–Ω–æ, –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç"
        }}
    ]
}}

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã!
"""
            
            response = await self.openai_service.client.chat.completions.create(
                model=self.openai_service.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–∏—Å–∫—É –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π. –ü–æ–º–æ–≥–∞–µ—à—å —É–ª—É—á—à–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã."},
                    {"role": "user", "content": improvement_prompt}
                ],
                temperature=0.3,
                max_tokens=1500
            )
            
            ai_response = response.choices[0].message.content
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                json_start = ai_response.find('{')
                json_end = ai_response.rfind('}') + 1
                
                if json_start != -1 and json_end != -1:
                    json_str = ai_response[json_start:json_end]
                    result = json.loads(json_str)
                    return {item['position']: item['improved_queries'] for item in result.get('improvements', [])}
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò")
                    return {}
                    
            except json.JSONDecodeError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {e}")
                return {}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return {}
    
    async def _refined_search(
        self, 
        improved_queries: Dict[int, List[str]], 
        original_results: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        refined_results = []
        
        for position, queries in improved_queries.items():
            logger.info(f"üîç –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position}: {queries}")
            
            for query in queries:
                try:
                    # –ò—â–µ–º –¥–µ—Ç–∞–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                    results = await search_parts(query=query, user_intent={})
                    
                    if results:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                        for result in results:
                            result['order_position'] = position
                            result['improved_query'] = query
                            result['is_refined_search'] = True
                            result['search_query'] = query
                            result['full_query'] = f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {query}"
                        
                        refined_results.extend(results)
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'")
                        break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{query}': {e}")
                    continue
        
        return refined_results
    
    def _merge_results(
        self, 
        original_results: List[Dict[str, Any]], 
        refined_results: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        position_results = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in original_results:
            position = result.get('order_position', 0)
            if position not in position_results:
                position_results[position] = []
            position_results[position].append(result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in refined_results:
            position = result.get('order_position', 0)
            if position not in position_results:
                position_results[position] = []
            position_results[position].append(result)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        merged_results = []
        for position in sorted(position_results.keys()):
            merged_results.extend(position_results[position])
        
        return merged_results
    
    def _prepare_validation_data(
        self, 
        original_request: str, 
        search_results: List[Dict[str, Any]]
    ) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        positions_data = {}
        for result in search_results:
            position = result.get('order_position', 0)
            if position not in positions_data:
                positions_data[position] = {
                    'search_query': result.get('full_query', ''),
                    'found_items': []
                }
            
            if result.get('sku') != '–ù–ï –ù–ê–ô–î–ï–ù–û':
                item_info = {
                    'sku': result.get('sku', ''),
                    'name': result.get('name', ''),
                    'type': result.get('type', ''),
                    'confidence': result.get('confidence_score', 0)
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ
                if result.get('is_refined_search'):
                    item_info['improved_query'] = result.get('improved_query', '')
                    item_info['is_refined'] = True
                
                positions_data[position]['found_items'].append(item_info)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_text = f"""
–ò–°–•–û–î–ù–´–ô –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{original_request}

–ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô:
"""
        
        for position in sorted(positions_data.keys()):
            pos_data = positions_data[position]
            analysis_text += f"""
–ü–û–ó–ò–¶–ò–Ø {position}:
–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {pos_data['search_query']}
–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(pos_data['found_items'])}
"""
            
            if pos_data['found_items']:
                for item in pos_data['found_items']:
                    if item.get('is_refined'):
                        analysis_text += f"  - {item['name']} (SKU: {item['sku']}, —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {item.get('improved_query', '')})\n"
                    else:
                        analysis_text += f"  - {item['name']} (SKU: {item['sku']}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item['confidence']:.2f})\n"
            else:
                analysis_text += "  - –¢–û–í–ê–† –ù–ï –ù–ê–ô–î–ï–ù\n"
        
        return analysis_text
    
    async def _analyze_with_ai(self, validation_data: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        try:
            response = await self.openai_service.client.chat.completions.create(
                model=self.openai_service.model,
                messages=[
                    {"role": "system", "content": self.validation_prompt},
                    {"role": "user", "content": f"–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{validation_data}"}
                ],
                temperature=0.1,
                max_tokens=1000
            )
            
            ai_response = response.choices[0].message.content
            
            try:
                json_start = ai_response.find('{')
                json_end = ai_response.rfind('}') + 1
                
                if json_start != -1 and json_end != -1:
                    json_str = ai_response[json_start:json_end]
                    result = json.loads(json_str)
                else:
                    result = self._parse_text_response(ai_response)
                
                return result
                
            except json.JSONDecodeError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {e}")
                return self._parse_text_response(ai_response)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å –ò–ò: {e}")
            return {
                "status": "ERROR",
                "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò: {str(e)}",
                "issues": [],
                "confidence": 0.0
            }
    
    def _parse_text_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ò–ò"""
        response_lower = response.lower()
        
        if "approved" in response_lower or "–æ–¥–æ–±—Ä–µ–Ω–æ" in response_lower:
            status = "APPROVED"
        elif "refinement" in response_lower or "–¥–æ—Ä–∞–±–æ—Ç–∫–∞" in response_lower:
            status = "NEEDS_REFINEMENT"
        else:
            status = "NEEDS_CLARIFICATION"
        
        return {
            "status": status,
            "message": response,
            "issues": [],
            "confidence": 0.7 if status == "APPROVED" else 0.5
        }
    
    def generate_clarification_questions(self, validation_result: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        questions = []
        
        if validation_result.get('status') == 'NEEDS_CLARIFICATION':
            questions.append("–ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–∞–ª–µ–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã –¥–ª—è –≤–∞—Å?")
            questions.append("–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã (DIN, ISO) –µ—Å–ª–∏ –æ–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã?")
            questions.append("–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É –∏–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏—é?")
        
        elif validation_result.get('status') == 'NEEDS_REFINEMENT':
            if validation_result.get('has_improvements'):
                questions.append("–ú—ã –Ω–∞—à–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü–æ–¥—Ö–æ–¥—è—Ç –ª–∏ –æ–Ω–∏?")
                questions.append("–ù—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?")
            else:
                questions.append("–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤?")
                questions.append("–ï—Å—Ç—å –ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –¥–µ—Ç–∞–ª–µ–π?")
        
        return questions
    
    def get_validation_summary(self, validation_result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        status = validation_result.get('status', 'UNKNOWN')
        message = validation_result.get('message', '')
        
        if status == "APPROVED":
            return f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n{message}"
        
        elif status == "NEEDS_REFINEMENT":
            if validation_result.get('has_improvements'):
                return f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ (—Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏)\n\n{message}"
            else:
                return f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞\n\n{message}"
        
        elif status == "NEEDS_CLARIFICATION":
            return f"‚ùì –ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è\n\n{message}"
        
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n\n{message}"
