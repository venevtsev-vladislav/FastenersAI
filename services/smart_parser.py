"""
–£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω GPT, –∞ –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –ø—Ä–∞–≤–∏–ª–∞–º–∏
"""

import re
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class SmartParser:
    """–£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPT"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–ù–ï –Ω—É–∂–µ–Ω GPT)
        self.simple_patterns = [
            # DIN —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
            r'DIN\s+\d+\s+[M]\d+[x√ó]\d+',        # DIN 965 M6x20, DIN 603 M6√ó40
            r'DIN\s+\d+\s+[M]\d+',               # DIN 965 M6
            
            # –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
            r'[–ú]\d+\s+\d+\s*–º–º',                # M6 20 –º–º
            r'[–ú]\d+\s+\d+\s*—Å–º',                # M6 2 —Å–º
            r'[–ú]\d+\s+\d+\s*–¥—é–π–º',              # M6 1 –¥—é–π–º
            
            # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
            r'–≤–∏–Ω—Ç\s+[–ú]\d+',                    # –≤–∏–Ω—Ç M6
            r'–≥–∞–π–∫–∞\s+[–ú]\d+',                   # –≥–∞–π–∫–∞ M6
            r'—à–∞–π–±–∞\s+[–ú]\d+',                   # —à–∞–π–±–∞ M6
            r'–±–æ–ª—Ç\s+[–ú]\d+',                    # –±–æ–ª—Ç M8
            r'—Å–∞–º–æ—Ä–µ–∑\s+[–ú]\d+',                 # —Å–∞–º–æ—Ä–µ–∑ M4
            
            # –° —Ä–∞–∑–º–µ—Ä–∞–º–∏
            r'–≤–∏–Ω—Ç\s+[–ú]\d+\s+\d+\s*–º–º',         # –≤–∏–Ω—Ç M6 20 –º–º
            r'–±–æ–ª—Ç\s+[–ú]\d+\s+\d+\s*–º–º',         # –±–æ–ª—Ç M8 30 –º–º
            r'—Å–∞–º–æ—Ä–µ–∑\s+[–ú]\d+\s+\d+\s*–º–º',      # —Å–∞–º–æ—Ä–µ–∑ M4 16 –º–º
            r'–≥–∞–π–∫–∞\s+[–ú]\d+\s+\d+\s*–º–º',        # –≥–∞–π–∫–∞ M6 20 –º–º
            r'—à–∞–π–±–∞\s+[–ú]\d+\s+\d+\s*–º–º',        # —à–∞–π–±–∞ M6 20 –º–º
            
            # –° –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
            r'–≤–∏–Ω—Ç\s+[–ú]\d+\s+\d+\s*–º–º\s+—Å—Ç–∞–ª—å', # –≤–∏–Ω—Ç M6 20 –º–º —Å—Ç–∞–ª—å
            r'–≥–∞–π–∫–∞\s+[–ú]\d+\s+–Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è',     # –≥–∞–π–∫–∞ M6 –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è
            
            # –° –ø–æ–∫—Ä—ã—Ç–∏—è–º–∏
            r'–≤–∏–Ω—Ç\s+[–ú]\d+\s+\d+\s*–º–º\s+—Ü–∏–Ω–∫',  # –≤–∏–Ω—Ç M6 20 –º–º —Ü–∏–Ω–∫
            r'–±–æ–ª—Ç\s+[–ú]\d+\s+\d+\s*–º–º\s+–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π', # –±–æ–ª—Ç M8 30 –º–º –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–æ–ª—Ç–æ–≤
            r'–±–æ–ª—Ç\s+[–ú]\d+[x√ó]\d+\s+—Ü–∏–Ω–∫',      # –±–æ–ª—Ç –ú6x40 —Ü–∏–Ω–∫
            r'–±–æ–ª—Ç\s+DIN\s+\d+\s+[–ú]\d+[x√ó]\d+', # –±–æ–ª—Ç DIN 603 –ú6√ó40
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è
            r'[–ú]\d+\s+—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π',              # –ú6 —Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π
            r'[–ú]\d+\s+–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π',             # –ú6 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π
        ]
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–ù–£–ñ–ï–ù GPT)
        self.multiple_order_indicators = [
            '–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–∑–∞–∫–∞–∑–∞—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å',
            '—Ä–∞–∑–Ω—ã—Ö', '—Ä–∞–∑–ª–∏—á–Ω—ã—Ö', '–Ω–µ—Å–∫–æ–ª—å–∫–æ', '–º–Ω–æ–≥–æ',
            '–∫–æ–º–ø–ª–µ–∫—Ç', '–Ω–∞–±–æ—Ä', '–ø–∞—Ä—Ç–∏—è', '—É–ø–∞–∫–æ–≤–∫–∞'
        ]
        
        # –ù–µ—á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (–ù–£–ñ–ï–ù GPT)
        self.vague_words = [
            '—á—Ç–æ-—Ç–æ', '–∫–∞–∫–æ–π-—Ç–æ', '–ø–æ–¥—Ö–æ–¥—è—â–∏–π', '–ø–æ–¥—Ö–æ–¥—è—â–∞—è',
            '–¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è', '–¥–ª—è —Å–±–æ—Ä–∫–∏', '–º–µ–±–µ–ª—å–Ω—ã–π', '–º–µ–±–µ–ª—å–Ω–∞—è',
            '—Å –≥–æ–ª–æ–≤–∫–æ–π', '—Å —Ä–µ–∑—å–±–æ–π', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è',
            '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω—ã–π',
            '–≥—Ä–∏–±–∫–æ–º', '–≥—Ä–∏–±–∫–æ–≤–∞—è', '–≥—Ä–∏–±–∫–æ–≤—ã–π', '—Ç–∞—Ä–µ–ª—å—á–∞—Ç—ã–π',
            '–ø–æ—Ç–∞–π', '–ø–æ–ª—É–ø–æ—Ç–∞–π', '—à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–π', '–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π',
            '—Å —Ñ—Ä–µ–∑–æ–π', '—Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∞—è—Å—è', '—Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π—Å—è'
        ]
        
        # –°–ª–æ–≤–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ù–£–ñ–ï–ù GPT)
        self.voice_indicators = [
            '—à—Ç—É–∫–∞', '—à—Ç—É–∫–∏', '—à—Ç—É–∫', '–∫—É—Å–æ–∫', '–∫—É—Å–∫–∏'
        ]
    
    def should_use_gpt(self, text: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–µ–Ω GPT, False –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        """
        text_lower = text.lower().strip()
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã - –ù–ï –Ω—É–∂–µ–Ω GPT (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if self.is_simple_format(text_lower):
            logger.info(f"üîç SmartParser: –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç, GPT –ù–ï –Ω—É–∂–µ–Ω: {text}")
            return False
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã - –Ω—É–∂–µ–Ω GPT
        if self.is_multiple_order(text_lower):
            logger.info(f"üîç SmartParser: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑, GPT –Ω—É–∂–µ–Ω: {text}")
            return True
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ù–µ—á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è - –Ω—É–∂–µ–Ω GPT
        if self.is_vague_description(text_lower):
            logger.info(f"üîç SmartParser: –ù–µ—á–µ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, GPT –Ω—É–∂–µ–Ω: {text}")
            return True
        
        # –ü—Ä–∞–≤–∏–ª–æ 4: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –Ω—É–∂–µ–Ω GPT
        if self.has_nonstandard_construction(text_lower):
            logger.info(f"üîç SmartParser: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, GPT –Ω—É–∂–µ–Ω: {text}")
            return True
        
        # –ü—Ä–∞–≤–∏–ª–æ 5: –î–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –Ω—É–∂–µ–Ω GPT
        if len(text_lower.split()) > 8:
            logger.info(f"üîç SmartParser: –î–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, GPT –Ω—É–∂–µ–Ω: {text}")
            return True
        
        # –ü—Ä–∞–≤–∏–ª–æ 6: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã - –Ω—É–∂–µ–Ω GPT
        if self.has_special_formatting(text_lower):
            logger.info(f"üîç SmartParser: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, GPT –Ω—É–∂–µ–Ω: {text}")
            return True
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ù–ï –Ω—É–∂–µ–Ω GPT
        logger.info(f"üîç SmartParser: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, GPT –ù–ï –Ω—É–∂–µ–Ω: {text}")
        return False
    
    def is_simple_format(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
        for pattern in self.simple_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False
    
    def is_multiple_order(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if self.is_simple_format(text):
            return False
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        return any(indicator in text for indicator in self.multiple_order_indicators)
    
    def is_vague_description(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—á–µ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        return any(word in text for word in self.vague_words)
    
    def has_special_formatting(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        special_chars = ['/', '\\', '(', ')', '[', ']', '{', '}', '|', '&', '+']
        return any(char in text for char in special_chars)
    
    def has_nonstandard_construction(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ"""
        # –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        nonstandard_patterns = [
            r'—Å\s+\w+',           # "—Å –≥—Ä–∏–±–∫–æ–º", "—Å —Ñ—Ä–µ–∑–æ–π"
            r'–Ω–∞\s+\d+',          # "–Ω–∞ 40", "–Ω–∞ 20"
            r'–¥–ª—è\s+\w+',         # "–¥–ª—è –¥–µ—Ä–µ–≤–∞", "–¥–ª—è –º–µ—Ç–∞–ª–ª–∞"
        ]
        
        for pattern in nonstandard_patterns:
            if re.search(pattern, text):
                logger.info(f"üîç SmartParser: –ù–∞–π–¥–µ–Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è '{pattern}' –≤ '{text}'")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        specific_words = ['–≥—Ä–∏–±–∫–æ–º', '–≥—Ä–∏–±–∫–æ–≤–∞—è', '–≥—Ä–∏–±–∫–æ–≤—ã–π', '—Ç–∞—Ä–µ–ª—å—á–∞—Ç—ã–π', '–ø–æ—Ç–∞–π']
        if any(word in text for word in specific_words):
            logger.info(f"üîç SmartParser: –ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ '{text}'")
            return True
        
        return False
    
    def parse_simple_query(self, text: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º (–±–µ–∑ GPT)
        
        Args:
            text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        text = self._preprocess_text(text)
        text_lower = text.lower().strip()
        parts = text_lower.split()
        
        result = {
            'type': None,
            'diameter': None,
            'length': None,
            'material': None,
            'coating': None,
            'standard': None,
            'grade': None,
            'quantity': 1,
            'confidence': 0.95,
            'is_simple_parsed': True
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ—Ç–∞–ª–∏
        type_keywords = ['–≤–∏–Ω—Ç', '–≥–∞–π–∫–∞', '—à–∞–π–±–∞', '–±–æ–ª—Ç', '—Å–∞–º–æ—Ä–µ–∑', '—à—É—Ä—É–ø', '–∞–Ω–∫–µ—Ä', '–¥—é–±–µ–ª—å']
        for i, part in enumerate(parts):
            if part in type_keywords:
                result['type'] = part
                break
        
        # –ò—â–µ–º –¥–∏–∞–º–µ—Ç—Ä (M6, M8, 6 –º–º, 8 –º–º)
        for i, part in enumerate(parts):
            if part.startswith('m') or part.startswith('–º'):
                result['diameter'] = part.upper()
                break
            elif '–º–º' in part or '—Å–º' in part:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ
                number = re.search(r'(\d+(?:[,.]\d+)?)', part)
                if number:
                    result['diameter'] = number.group(1) + ' –º–º'
                break
        
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ M6x40, M6√ó40
        for i, part in enumerate(parts):
            if re.search(r'[–úM]\d+[x√ó]\d+', part, re.IGNORECASE):
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä –∏ –¥–ª–∏–Ω—É
                match = re.search(r'([–úM]\d+)[x√ó](\d+)', part, re.IGNORECASE)
                if match:
                    result['diameter'] = match.group(1).upper()
                    result['length'] = f"{match.group(2)} –º–º"
                break
        
        # –ò—â–µ–º –¥–ª–∏–Ω—É
        for i, part in enumerate(parts):
            if '–º–º' in part or '—Å–º' in part or '–¥—é–π–º' in part:
                if i > 0 and parts[i-1].isdigit():
                    result['length'] = f"{parts[i-1]} {part}"
                elif re.search(r'(\d+(?:[,.]\d+)?)', part):
                    number = re.search(r'(\d+(?:[,.]\d+)?)', part).group(1)
                    unit = re.search(r'(–º–º|—Å–º|–¥—é–π–º)', part).group(1)
                    result['length'] = f"{number} {unit}"
                break
        
        # –ò—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        materials = ['—Å—Ç–∞–ª—å', '–Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è', '–ª–∞—Ç—É–Ω—å', '–∞–ª—é–º–∏–Ω–∏–π', '–ø–ª–∞—Å—Ç–∏–∫', '–º–µ—Ç–∞–ª–ª']
        for part in parts:
            if part in materials:
                result['material'] = part
                break
        
        # –ò—â–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
        coatings = ['—Ü–∏–Ω–∫', '–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π', '—Ö—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', '–∫—Ä–∞—à–µ–Ω—ã–π', '–∂–µ–ª–µ–∑–æ', '—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π']
        for part in parts:
            if part in coatings:
                result['coating'] = part
                break
        
        # –ò—â–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å–ª–æ–≤–∞ (—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π, –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π)
        for part in parts:
            if part.endswith('–Ω—ã–π') and ('—Ü–∏–Ω–∫' in part or '–æ—Ü–∏–Ω–∫' in part):
                result['coating'] = part
                break
        
        # –ò—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç (DIN, ISO, –ì–û–°–¢)
        for i, part in enumerate(parts):
            if part.upper() in ['DIN', 'ISO', '–ì–û–°–¢', 'EN']:
                if i + 1 < len(parts) and parts[i + 1].isdigit():
                    result['standard'] = f"{part.upper()} {parts[i + 1]}"
                break
        
        # –ò—â–µ–º –∫–ª–∞—Å—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ (A2, A4, 8.8, 10.9)
        for part in parts:
            if re.match(r'[A]\d+', part.upper()) or re.match(r'\d+\.\d+', part):
                result['grade'] = part.upper()
                break
        
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        for part in parts:
            if part.isdigit():
                result['quantity'] = int(part)
                break
        
        logger.info(f"üîç SmartParser: –†–∞–∑–æ–±—Ä–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {result}")
        return result
    
    def _preprocess_text(self, text: str) -> str:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        text = text.replace('√ó', 'x')  # –ó–∞–º–µ–Ω—è–µ–º √ó –Ω–∞ x
        text = text.replace('–•', 'x')  # –ó–∞–º–µ–Ω—è–µ–º –• –Ω–∞ x
        text = text.replace('—Ö', 'x')  # –ó–∞–º–µ–Ω—è–µ–º —Ö –Ω–∞ x
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        
        return text
    
    def parse_query(self, text: str) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ - —Ä–µ—à–∞–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ GPT
        
        Args:
            text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ñ–ª–∞–≥–æ–º need_gpt
        """
        if self.should_use_gpt(text):
            return {
                'need_gpt': True,
                'processed_text': text,
                'reason': '–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç GPT –∞–Ω–∞–ª–∏–∑–∞'
            }
        else:
            parsed = self.parse_simple_query(text)
            return {
                'need_gpt': False,
                'user_intent': parsed,
                'processed_text': text,
                'reason': '–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑–æ–±—Ä–∞–Ω –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º'
            }
