"""
–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import logging
import json
from typing import List, Dict, Any, Tuple
from services.openai_service import OpenAIService

logger = logging.getLogger(__name__)

class ValidationService:
    """–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self):
        self.openai_service = OpenAIService()
        from services.validation_prompts import VALIDATION_PROMPT
        self.validation_prompt = VALIDATION_PROMPT

    async def validate_search_results(
        self, 
        original_request: str, 
        search_results: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
        
        Args:
            original_request: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            validation_data = self._prepare_validation_data(original_request, search_results)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ò–ò
            validation_result = await self._analyze_with_ai(validation_data)
            
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {validation_result.get('status')}")
            return validation_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {
                "status": "ERROR",
                "message": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}",
                "issues": [],
                "confidence": 0.0
            }
    
    def _prepare_validation_data(
        self, 
        original_request: str, 
        search_results: List[Dict[str, Any]]
    ) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        positions_data = {}
        for result in search_results:
            position = result.get('order_position', 0)
            if position not in positions_data:
                positions_data[position] = {
                    'search_query': result.get('full_query', ''),
                    'found_items': []
                }
            
            if result.get('sku') != '–ù–ï –ù–ê–ô–î–ï–ù–û':
                positions_data[position]['found_items'].append({
                    'sku': result.get('sku', ''),
                    'name': result.get('name', ''),
                    'type': result.get('type', ''),
                    'confidence': result.get('confidence_score', 0)
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_text = f"""
–ò–°–•–û–î–ù–´–ô –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{original_request}

–ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô:
"""
        
        for position in sorted(positions_data.keys()):
            pos_data = positions_data[position]
            analysis_text += f"""
–ü–û–ó–ò–¶–ò–Ø {position}:
–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {pos_data['search_query']}
–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(pos_data['found_items'])}
"""
            
            if pos_data['found_items']:
                for item in pos_data['found_items']:
                    analysis_text += f"  - {item['name']} (SKU: {item['sku']}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item['confidence']:.2f})\n"
            else:
                analysis_text += "  - –¢–û–í–ê–† –ù–ï –ù–ê–ô–î–ï–ù\n"
        
        return analysis_text
    
    async def _analyze_with_ai(self, validation_data: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            full_prompt = f"{self.validation_prompt}\n\n–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{validation_data}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI API –Ω–∞–ø—Ä—è–º—É—é
            response = await self.openai_service.client.chat.completions.create(
                model=self.openai_service.model,
                messages=[
                    {"role": "system", "content": self.validation_prompt},
                    {"role": "user", "content": f"–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{validation_data}"}
                ],
                temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                max_tokens=1000
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            ai_response = response.choices[0].message.content
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                json_start = ai_response.find('{')
                json_end = ai_response.rfind('}') + 1
                
                if json_start != -1 and json_end != -1:
                    json_str = ai_response[json_start:json_end]
                    result = json.loads(json_str)
                else:
                    # Fallback: –µ—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    result = self._parse_text_response(ai_response)
                
                return result
                
            except json.JSONDecodeError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {e}")
                return self._parse_text_response(ai_response)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å –ò–ò: {e}")
            return {
                "status": "ERROR",
                "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò: {str(e)}",
                "issues": [],
                "confidence": 0.0
            }
    
    def _parse_text_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ò–ò, –µ—Å–ª–∏ JSON –Ω–µ –ø–æ–ª—É—á–µ–Ω"""
        response_lower = response.lower()
        
        if "approved" in response_lower or "–æ–¥–æ–±—Ä–µ–Ω–æ" in response_lower or "–≤—Å–µ –æ–∫" in response_lower:
            status = "APPROVED"
        elif "refinement" in response_lower or "–¥–æ—Ä–∞–±–æ—Ç–∫–∞" in response_lower or "—É—Ç–æ—á–Ω–µ–Ω–∏–µ" in response_lower:
            status = "NEEDS_REFINEMENT"
        elif "clarification" in response_lower or "—É—Ç–æ—á–Ω–µ–Ω–∏–µ" in response_lower or "–≤–æ–ø—Ä–æ—Å" in response_lower:
            status = "NEEDS_CLARIFICATION"
        else:
            status = "NEEDS_CLARIFICATION"
        
        return {
            "status": status,
            "message": response,
            "issues": [],
            "confidence": 0.7 if status == "APPROVED" else 0.5
        }
    
    def get_validation_summary(self, validation_result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        status = validation_result.get('status', 'UNKNOWN')
        message = validation_result.get('message', '')
        
        if status == "APPROVED":
            return f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n{message}"
        
        elif status == "NEEDS_REFINEMENT":
            return f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞\n\n{message}"
        
        elif status == "NEEDS_CLARIFICATION":
            return f"‚ùì –ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è\n\n{message}"
        
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n\n{message}"
