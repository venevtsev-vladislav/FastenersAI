"""
–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å —Ñ–∞–π–ª, —É–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –º–∞–∫—Å–∏–º—É–º 3 —Ü–∏–∫–ª–∞
"""

import logging
import json
from typing import List, Dict, Any, Tuple
from services.openai_service import OpenAIService
from database.supabase_client import search_parts
from services.excel_generator import ExcelGenerator
import tempfile
import os

logger = logging.getLogger(__name__)

class CyclicValidationService:
    """–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.openai_service = OpenAIService()
        from services.validation_prompts import CYCLIC_VALIDATION_PROMPT
        self.validation_prompt = CYCLIC_VALIDATION_PROMPT
        self.max_cycles = 3
    
    async def cyclic_validate_and_improve(
        self, 
        original_request: str, 
        search_results: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ª–∏–º–∏—Ç–∞ —Ü–∏–∫–ª–æ–≤
        
        Args:
            original_request: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            Dict: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —É–ª—É—á—à–µ–Ω–∏–µ")
            
            current_results = search_results.copy()
            cycle_count = 0
            improvement_history = []
            
            while cycle_count < self.max_cycles:
                cycle_count += 1
                logger.info(f"üîÑ –¶–∏–∫–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {cycle_count}/{self.max_cycles}")
                
                # 1. –°–æ–∑–¥–∞–µ–º Excel –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                excel_file = await self._create_excel_for_validation(current_results, original_request)
                
                # 2. –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å Excel —Ñ–∞–π–ª
                validation_result = await self._validate_excel_file(
                    original_request, current_results, excel_file
                )
                
                logger.info(f"üìä –¶–∏–∫–ª {cycle_count}: {validation_result.get('status')}")
                
                # 3. –ï—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ - –≤—ã—Ö–æ–¥–∏–º
                if validation_result.get('status') == 'APPROVED':
                    logger.info(f"‚úÖ –¶–∏–∫–ª {cycle_count}: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!")
                    break
                
                # 4. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ - —É–ª—É—á—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if validation_result.get('status') in ['NEEDS_REFINEMENT', 'NEEDS_CLARIFICATION']:
                    logger.info(f"üîß –¶–∏–∫–ª {cycle_count}: –£–ª—É—á—à–∞—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
                    
                    improved_results = await self._improve_problematic_positions(
                        original_request, current_results, validation_result
                    )
                    
                    if improved_results:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        current_results = self._update_problematic_positions(
                            current_results, improved_results
                        )
                        
                        improvement_history.append({
                            'cycle': cycle_count,
                            'improvements': improved_results,
                            'validation_status': validation_result.get('status')
                        })
                        
                        logger.info(f"‚úÖ –¶–∏–∫–ª {cycle_count}: –£–ª—É—á—à–µ–Ω–æ {len(improved_results)} –ø–æ–∑–∏—Ü–∏–π")
                    else:
                        logger.warning(f"‚ö†Ô∏è –¶–∏–∫–ª {cycle_count}: –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏")
                        break
                else:
                    logger.warning(f"‚ùå –¶–∏–∫–ª {cycle_count}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                    break
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(excel_file):
                    os.remove(excel_file)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_result = {
                'status': validation_result.get('status', 'UNKNOWN'),
                'message': validation_result.get('message', ''),
                'final_results': search_results,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                'cycles_completed': cycle_count,
                'improvement_history': improvement_history,
                'max_cycles_reached': cycle_count >= self.max_cycles
            }
            
            logger.info(f"üèÅ –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {cycle_count} —Ü–∏–∫–ª–æ–≤, —Å—Ç–∞—Ç—É—Å: {final_result['status']}")
            return final_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {
                "status": "ERROR",
                "message": f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}",
                "final_results": search_results,
                "cycles_completed": 0,
                "improvement_history": [],
                "max_cycles_reached": False
            }
    
    async def _create_excel_for_validation(
        self, 
        search_results: List[Dict[str, Any]], 
        user_request: str
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò"""
        try:
            excel_generator = ExcelGenerator()
            excel_file = await excel_generator.generate_excel(search_results, user_request)
            logger.info(f"üìä Excel —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {excel_file}")
            return excel_file
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            raise
    
    async def _validate_excel_file(
        self, 
        original_request: str, 
        search_results: List[Dict[str, Any]], 
        excel_file_path: str
    ) -> Dict[str, Any]:
        """–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å Excel —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            excel_content = self._read_excel_content(excel_file_path, search_results)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            validation_data = f"""
–ò–°–•–û–î–ù–´–ô –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{original_request}

–ê–ù–ê–õ–ò–ó EXCEL –§–ê–ô–õ–ê:
{excel_content}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–µ—Å—å Excel —Ñ–∞–π–ª –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –≥–æ—Ç–æ–≤ –ª–∏ –æ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É.

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
1. –í—Å–µ –ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã?
2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–ø—Ä–æ—Å—É?
3. –ï—Å—Ç—å –ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤—ã–±–æ—Ä–∞?
4. –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

–û–¢–í–ï–¢–¨:
- "APPROVED" - –µ—Å–ª–∏ —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
- "NEEDS_REFINEMENT" - –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è
- "NEEDS_CLARIFICATION" - –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–£–ö–ê–ñ–ò –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.
"""
            
            response = await self.openai_service.client.chat.completions.create(
                model=self.openai_service.model,
                messages=[
                    {"role": "system", "content": self.validation_prompt},
                    {"role": "user", "content": validation_data}
                ],
                temperature=0.1,
                max_tokens=1500
            )
            
            ai_response = response.choices[0].message.content
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            try:
                json_start = ai_response.find('{')
                json_end = ai_response.rfind('}') + 1
                
                if json_start != -1 and json_end != -1:
                    json_str = ai_response[json_start:json_end]
                    result = json.loads(json_str)
                else:
                    result = self._parse_text_response(ai_response)
                
                return result
                
            except json.JSONDecodeError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {e}")
                return self._parse_text_response(ai_response)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
            return {
                "status": "ERROR",
                "message": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Excel: {str(e)}",
                "issues": [],
                "confidence": 0.0
            }
    
    def _read_excel_content(self, excel_file_path: str, search_results: List[Dict[str, Any]]) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            excel_content = f"Excel —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è {len(self._get_unique_positions(search_results))} –ø–æ–∑–∏—Ü–∏–π"
            return excel_content
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel: {e}")
            return "Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    
    def _get_unique_positions(self, search_results: List[Dict[str, Any]]) -> set:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        return set(result.get('order_position', 0) for result in search_results)
    
    async def _improve_problematic_positions(
        self, 
        original_request: str, 
        current_results: List[Dict[str, Any]], 
        validation_result: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """–£–ª—É—á—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            problematic_positions = self._identify_problematic_positions(validation_result)
            
            if not problematic_positions:
                logger.info("–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
                return []
            
            logger.info(f"üîß –£–ª—É—á—à–∞—é –ø–æ–∑–∏—Ü–∏–∏: {problematic_positions}")
            
            improved_results = []
            for position in problematic_positions:
                improved_queries = await self._generate_improved_queries_for_position(
                    position, original_request, validation_result
                )
                
                if improved_queries:
                    # –ò—â–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    refined_results = await self._search_with_improved_queries(
                        position, improved_queries
                    )
                    
                    if refined_results:
                        improved_results.extend(refined_results)
                        logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {position}: –Ω–∞–π–¥–µ–Ω–æ {len(refined_results)} —É–ª—É—á—à–µ–Ω–∏–π")
            
            return improved_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    def _identify_problematic_positions(self, validation_result: Dict[str, Any]) -> List[int]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        problematic_positions = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        message = validation_result.get('message', '').lower()
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        import re
        position_matches = re.findall(r'–ø–æ–∑–∏—Ü–∏—è\s*(\d+)', message)
        for match in position_matches:
            problematic_positions.append(int(match))
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –±–µ—Ä–µ–º –≤—Å–µ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        if not problematic_positions:
            for result in current_results:
                if result.get('confidence_score', 0) < 0.7:
                    pos = result.get('order_position', 0)
                    if pos not in problematic_positions:
                        problematic_positions.append(pos)
        
        return problematic_positions
    
    async def _generate_improved_queries_for_position(
        self, 
        position: int, 
        original_request: str, 
        validation_result: Dict[str, Any]
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
            original_item = None
            for result in self._current_results:
                if result.get('order_position') == position:
                    original_item = result
                    break
            
            if not original_item:
                return []
            
            improvement_prompt = f"""
–£–ª—É—á—à–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position}.

–ò–°–•–û–î–ù–´–ô –ó–ê–ü–†–û–°: {original_item.get('full_query', '')}
–ü–†–û–ë–õ–ï–ú–ê: {validation_result.get('message', '')}

–ü—Ä–µ–¥–ª–æ–∂–∏ 3 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Supabase.
–£—á–∏—Ç—ã–≤–∞–π —Å–∏–Ω–æ–Ω–∏–º—ã, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏.

–§–û–†–ú–ê–¢: –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
"""
            
            response = await self.openai_service.client.chat.completions.create(
                model=self.openai_service.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–∏—Å–∫—É –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π. –ü–æ–º–æ–≥–∞–µ—à—å —É–ª—É—á—à–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã."},
                    {"role": "user", "content": improvement_prompt}
                ],
                temperature=0.3,
                max_tokens=500
            )
            
            ai_response = response.choices[0].message.content
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç - –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            queries = [q.strip() for q in ai_response.split('\n') if q.strip()]
            return queries[:3]  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position}: {e}")
            return []
    
    async def _search_with_improved_queries(
        self, 
        position: int, 
        improved_queries: List[str]
    ) -> List[Dict[str, Any]]:
        """–ò—â–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        refined_results = []
        
        for query in improved_queries:
            try:
                results = await search_parts(query=query, user_intent={})
                
                if results:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                    for result in results:
                        result['order_position'] = position
                        result['improved_query'] = query
                        result['is_refined_search'] = True
                        result['search_query'] = query
                        result['full_query'] = f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {query}"
                        result['cycle_number'] = cycle_count
                    
                    refined_results.extend(results)
                    logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {position}: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query}'")
                    break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{query}': {e}")
                continue
        
        return refined_results
    
    def _update_problematic_positions(
        self, 
        current_results: List[Dict[str, Any]], 
        improved_results: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        position_results = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in current_results:
            position = result.get('order_position', 0)
            if position not in position_results:
                position_results[position] = []
            position_results[position].append(result)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        for result in improved_results:
            position = result.get('order_position', 0)
            if position in position_results:
                # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                position_results[position] = [result]
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                position_results[position] = [result]
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        updated_results = []
        for position in sorted(position_results.keys()):
            updated_results.extend(position_results[position])
        
        return updated_results
    
    def _parse_text_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ò–ò"""
        response_lower = response.lower()
        
        if "approved" in response_lower or "–æ–¥–æ–±—Ä–µ–Ω–æ" in response_lower or "–≥–æ—Ç–æ–≤–æ" in response_lower:
            status = "APPROVED"
        elif "refinement" in response_lower or "–¥–æ—Ä–∞–±–æ—Ç–∫–∞" in response_lower:
            status = "NEEDS_REFINEMENT"
        else:
            status = "NEEDS_CLARIFICATION"
        
        return {
            "status": status,
            "message": response,
            "issues": [],
            "confidence": 0.7 if status == "APPROVED" else 0.5
        }
    
    def get_validation_summary(self, validation_result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        status = validation_result.get('status', 'UNKNOWN')
        cycles = validation_result.get('cycles_completed', 0)
        max_reached = validation_result.get('max_cycles_reached', False)
        
        if status == "APPROVED":
            return f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {cycles} —Ü–∏–∫–ª–æ–≤!\n\n–§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É."
        
        elif max_reached:
            return f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ü–∏–∫–ª–æ–≤ ({cycles}). –§–∞–π–ª —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏."
        
        else:
            return f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ (—Ü–∏–∫–ª {cycles})\n\n{validation_result.get('message', '')}"
    
    def generate_clarification_questions(self, validation_result: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        questions = []
        cycles = validation_result.get('cycles_completed', 0)
        
        if cycles >= self.max_cycles:
            questions.append("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π. –ù—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
            questions.append("–ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤?")
        else:
            questions.append("–ú—ã —É–ª—É—á—à–∏–ª–∏ –ø–æ–∏—Å–∫. –ü–æ–¥—Ö–æ–¥—è—Ç –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã?")
            questions.append("–ù—É–∂–Ω–æ –ª–∏ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?")
        
        return questions
