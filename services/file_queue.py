"""
–°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import logging
import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from telegram import Message
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

@dataclass
class FileQueueItem:
    """–≠–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏ —Ñ–∞–π–ª–æ–≤"""
    user_id: int
    chat_id: int
    messages: List[Message]
    created_at: datetime
    last_updated: datetime
    status: str = 'pending'  # pending, processing, completed, failed
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None

class FileQueue:
    """–û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.queue: Dict[int, FileQueueItem] = {}  # user_id -> FileQueueItem
        self.processing_timeout = timedelta(minutes=5)  # –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.cleanup_interval = timedelta(minutes=10)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏
        self.file_grouping_timeout = timedelta(seconds=10)  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._cleanup_task = None
    
    async def add_files(self, user_id: int, chat_id: int, messages: List[Message]) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.queue:
                existing_item = self.queue[user_id]
                
                # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
                if existing_item.status == 'processing':
                    return "–í–∞—à–∏ —Ñ–∞–π–ª—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
                
                # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                if existing_item.status in ['completed', 'failed']:
                    del self.queue[user_id]
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if current_time - existing_item.last_updated <= self.file_grouping_timeout:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—á–µ—Ä–µ–¥–∏
                        existing_item.messages.extend(messages)
                        existing_item.last_updated = current_time
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(messages)} —Ñ–∞–π–ª–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –í—Å–µ–≥–æ: {len(existing_item.messages)}")
                        return f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(messages)} —Ñ–∞–π–ª–æ–≤ –∫ –æ—á–µ—Ä–µ–¥–∏. –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(existing_item.messages)} —Ñ–∞–π–ª–æ–≤"
                    else:
                        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
                        del self.queue[user_id]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
            queue_item = FileQueueItem(
                user_id=user_id,
                chat_id=chat_id,
                messages=messages,
                created_at=current_time,
                last_updated=current_time
            )
            
            self.queue[user_id] = queue_item
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å {len(messages)} —Ñ–∞–π–ª–∞–º–∏")
            
            return f"–°–æ–∑–¥–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å –∏–∑ {len(messages)} —Ñ–∞–π–ª–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {str(e)}"
    
    async def _auto_process_queue(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            # –ñ–¥–µ–º –≤—Ä–µ–º—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
            await asyncio.sleep(self.file_grouping_timeout.total_seconds())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            if user_id in self.queue:
                queue_item = self.queue[user_id]
                if queue_item.status == 'pending':
                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await self.process_queue(user_id, context)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
    
    async def _send_result_to_user(self, user_id: int, context: ContextTypes.DEFAULT_TYPE, result: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if not result:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã."
                )
                return
            
            total_files = result.get('total_files', 0)
            processed_files = result.get('processed_files', 0)
            failed_files = result.get('failed_files', 0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {total_files} —Ñ–∞–π–ª–æ–≤, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    async def _send_excel_result(self, user_id: int, context: ContextTypes.DEFAULT_TYPE, file_result: dict, file_number: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Excel —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            file_name = file_result.get('file_name', f'–§–∞–π–ª {file_number}')
            parsed_content = file_result.get('parsed_content')
            
            if not parsed_content:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üìä –§–∞–π–ª {file_number}: {file_name} - Excel —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ Excel —Ñ–∞–π–ª—É
            sheets_info = []
            for sheet_name, sheet_data in parsed_content.get('sheets', {}).items():
                rows, cols = sheet_data.get('shape', (0, 0))
                sheets_info.append(f"‚Ä¢ **{sheet_name}:** {rows} —Å—Ç—Ä–æ–∫, {cols} —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            excel_summary = f"""üìä **–§–∞–π–ª {file_number}:** {file_name}

üìã **–õ–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ:**
{chr(10).join(sheets_info)}

üìà **–í—Å–µ–≥–æ –ª–∏—Å—Ç–æ–≤:** {parsed_content.get('total_sheets', 0)}"""
            
            await context.bot.send_message(
                chat_id=user_id,
                text=excel_summary
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    async def _process_files_with_search(self, user_id: int, context: ContextTypes.DEFAULT_TYPE, result: Dict[str, Any]):
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å –ø–æ–∏—Å–∫–æ–º –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π"""
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Excel –∏ PDF)
            processable_files = []
            for file_result in result.get('results', []):
                if (file_result.get('type') == 'document' and 
                    file_result.get('file_extension') in ['.xlsx', '.xls', '.pdf']):
                    processable_files.append(file_result)
            
            if not processable_files:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Excel –∏ PDF)"
                )
                return
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            await self._process_all_files_together(user_id, context, processable_files)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º: {e}")
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}"
            )
    
    async def _process_all_files_together(self, user_id: int, context: ContextTypes.DEFAULT_TYPE, files: list):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ GPT"""
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            all_data = []
            file_names = []
            
            for file in files:
                file_name = file.get('file_name', '–§–∞–π–ª')
                file_extension = file.get('file_extension', '')
                file_names.append(file_name)
                
                if file_extension in ['.xlsx', '.xls']:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª—ã
                    parsed_content = file.get('parsed_content', {})
                    if parsed_content:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
                        for sheet_name, sheet_data in parsed_content.get('sheets', {}).items():
                            data = sheet_data.get('data', [])
                            for row in data:
                                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è
                                row_text = ' '.join([str(v) for v in row.values() if v])
                                if any(keyword in row_text.lower() for keyword in ['–±–æ–ª—Ç', '–≤–∏–Ω—Ç', '—Å–∞–º–æ—Ä–µ–∑', '–∞–Ω–∫–µ—Ä', '–≥–∞–π–∫–∞', '—à–∞–π–±–∞', '—à–ø–∏–ª—å–∫–∞', '—Ö–æ–º—É—Ç', '–∑–∞–∂–∏–º', '–∫—Ä–µ–ø', '–º–µ—Ç–∏–∑', '–∏–∑–¥–µ–ª']):
                                    all_data.append({
                                        'file': file_name,
                                        'sheet': sheet_name,
                                        'data': row,
                                        'text': row_text
                                    })
                
                elif file_extension == '.pdf':
                    # –î–ª—è PDF —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –Ω–∞ –∞–Ω–∞–ª–∏–∑
                    all_data.append({
                        'file': file_name,
                        'sheet': 'PDF',
                        'data': {},
                        'text': f"PDF —Ñ–∞–π–ª {file_name} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
                    })
            
            if not all_data:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üìä –í —Ñ–∞–π–ª–∞—Ö {', '.join(file_names)} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            await self._send_all_data_to_gpt(user_id, context, file_names, all_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}"
            )
    
    async def _send_all_data_to_gpt(self, user_id: int, context: ContextTypes.DEFAULT_TYPE, file_names: list, all_data: list):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–∏—Å–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_text = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ {', '.join(file_names)} –∏ –Ω–∞–π–¥–∏ –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è (–±–æ–ª—Ç—ã, –≤–∏–Ω—Ç—ã, —Å–∞–º–æ—Ä–µ–∑—ã, –∞–Ω–∫–µ—Ä—ã, –≥–∞–π–∫–∏, —à–∞–π–±—ã, —à–ø–∏–ª—å–∫–∏, —Ö–æ–º—É—Ç—ã, –∑–∞–∂–∏–º—ã –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∏–∑—ã):\n\n"
            
            for i, item in enumerate(all_data[:20], 1):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
                analysis_text += f"{i}. –§–∞–π–ª '{item['file']}', –õ–∏—Å—Ç '{item['sheet']}': {item['text']}\n"
            
            if len(all_data) > 20:
                analysis_text += f"\n... –∏ –µ—â–µ {len(all_data) - 20} —Å—Ç—Ä–æ–∫ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤\n"
            
            analysis_text += f"\n–í–∞–∂–Ω–æ: –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ —Ç–∏–ø—ã –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π, –≤–∫–ª—é—á–∞—è —Ö–æ–º—É—Ç—ã, –∑–∞–∂–∏–º—ã –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∏–∑—ã. –ò–∑–≤–ª–µ–∫–∏ —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∂–¥–æ–≥–æ –∏–∑–¥–µ–ª–∏—è."
            
            # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(all_data)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–æ–≤ {file_names}")
            logger.info(f"–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_text[:200]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT —á–µ—Ä–µ–∑ MessagePipeline
            from pipeline.message_processor import MessagePipeline
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è pipeline
            class FakeMessage:
                def __init__(self, text, user_id):
                    self.text = text
                    self.voice = None
                    self.photo = None
                    self.document = None
                    self.from_user = type('User', (), {'id': user_id})()
                    self.chat = type('Chat', (), {'id': user_id})()
            
            fake_message = FakeMessage(analysis_text, user_id)
            
            # –°–æ–∑–¥–∞–µ–º pipeline –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            pipeline = MessagePipeline(bot=context.bot)
            result = await pipeline.process_message(fake_message, context)
            
            if result and result.get('excel_file'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîç –ù–∞–π–¥–µ–Ω—ã –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –≤ —Ñ–∞–π–ª–∞—Ö {', '.join(file_names)}! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ GPT..."
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                with open(result['excel_file'], 'rb') as f:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=f,
                        filename=f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_–≤—Å–µ_—Ñ–∞–π–ª—ã_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
                        caption=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
                    )
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –≤ —Ñ–∞–π–ª–∞—Ö {', '.join(file_names)}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ GPT: {e}")
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–æ–≤: {str(e)}"
            )
    
    async def process_queue(self, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id not in self.queue:
                logger.warning(f"–û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            queue_item = self.queue[user_id]
            
            if queue_item.status != 'pending':
                logger.warning(f"–û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return None
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            queue_item.status = 'processing'
            
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FileProcessor
                from services.file_processor import FileProcessor
                file_processor = FileProcessor()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
                results = await file_processor.process_multiple_files(queue_item.messages, context)
                
                # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                queue_item.result = {
                    'type': 'multiple_files',
                    'total_files': len(queue_item.messages),
                    'processed_files': len([r for r in results if r.get('type') != 'error']),
                    'failed_files': len([r for r in results if r.get('type') == 'error']),
                    'results': results,
                    'processed_at': datetime.now().isoformat()
                }
                
                queue_item.status = 'completed'
                logger.info(f"–û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._send_result_to_user(user_id, context, queue_item.result)
                
                # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å –ø–æ–∏—Å–∫–æ–º –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
                await self._process_files_with_search(user_id, context, queue_item.result)
                
                return queue_item.result
                
            except Exception as e:
                queue_item.status = 'failed'
                queue_item.error = str(e)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                return None
                
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    file_processor.cleanup_temp_files()
                except:
                    pass
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return None
    
    async def get_queue_status(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id not in self.queue:
                return None
            
            queue_item = self.queue[user_id]
            
            return {
                'user_id': user_id,
                'status': queue_item.status,
                'total_files': len(queue_item.messages),
                'created_at': queue_item.created_at.isoformat(),
                'error': queue_item.error
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return None
    
    async def clear_queue(self, user_id: int) -> bool:
        """–û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id in self.queue:
                del self.queue[user_id]
                logger.info(f"–û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return False
    
    async def cleanup_expired_queues(self):
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            current_time = datetime.now()
            expired_users = []
            
            for user_id, queue_item in self.queue.items():
                if current_time - queue_item.created_at > self.processing_timeout:
                    expired_users.append(user_id)
            
            for user_id in expired_users:
                del self.queue[user_id]
                logger.info(f"–û—á–∏—â–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if expired_users:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {len(expired_users)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π: {e}")
    
    async def start_cleanup_task(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏"""
        if self._cleanup_task is None or self._cleanup_task.done():
            self._cleanup_task = asyncio.create_task(self._cleanup_loop())
    
    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏"""
        while True:
            try:
                await asyncio.sleep(self.cleanup_interval.total_seconds())
                await self.cleanup_expired_queues()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def stop_cleanup_task(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏"""
        if self._cleanup_task and not self._cleanup_task.done():
            self._cleanup_task.cancel()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏
file_queue = FileQueue()
