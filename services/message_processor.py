"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import logging
import asyncio
from telegram import Message
from services.openai_service import OpenAIService
from services.media_processor import MediaProcessor
from config import MAX_FILE_SIZE

logger = logging.getLogger(__name__)

class MessageProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot=None):
        self.openai_service = OpenAIService()
        self.media_processor = MediaProcessor()
        self.bot = bot
    
    async def process_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.text:
                return await self._process_text_message(message)
            elif message.voice:
                return await self._process_voice_message(message)
            elif message.audio:
                return await self._process_audio_message(message)
            elif message.photo:
                return await self._process_photo_message(message)
            elif message.document:
                return await self._process_document_message(message)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _process_text_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        text = message.text.strip()
        
        # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from services.smart_parser import SmartParser
            smart_parser = SmartParser()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ GPT
            parse_result = smart_parser.parse_query(text)
            
            if parse_result['need_gpt']:
                logger.info(f"üîç SmartParser: GPT –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è: {parse_result['reason']}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                user_intent = await self.openai_service.analyze_user_intent(text)
                logger.info(f"GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            else:
                logger.info(f"üîç SmartParser: GPT –ù–ï –Ω—É–∂–µ–Ω: {parse_result['reason']}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
                user_intent = parse_result['user_intent']
            
            return {
                'type': 'text',
                'original_content': text,
                'processed_text': text,
                'user_intent': user_intent
            }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ SmartParser: {e}")
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT
            try:
                user_intent = await self.openai_service.analyze_user_intent(text)
                logger.info(f"Fallback GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as gpt_error:
                logger.error(f"Fallback GPT —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {gpt_error}")
                user_intent = None
            
            return {
                'type': 'text',
                'original_content': text,
                'processed_text': text,
                'user_intent': user_intent
            }
    
    async def _process_voice_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            if not self.bot:
                raise ValueError("Bot –æ–±—ä–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            voice_file = await self.bot.get_file(message.voice.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if voice_file.file_size > MAX_FILE_SIZE:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            text = await self.media_processor.voice_to_text(voice_file.file_path)
            
            # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            try:
                from services.smart_parser import SmartParser
                smart_parser = SmartParser()
                
                # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (–æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ)
                user_intent = await self.openai_service.analyze_user_intent(text)
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–π GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                user_intent = None
            
            return {
                'type': 'voice',
                'original_content': f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({message.voice.duration}—Å)",
                'processed_text': text,
                'user_intent': user_intent
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _process_audio_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            if not self.bot:
                raise ValueError("Bot –æ–±—ä–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            audio_file = await self.bot.get_file(message.audio.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if audio_file.file_size > MAX_FILE_SIZE:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            text = await self.media_processor.audio_to_text(audio_file.file_path)
            
            # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            try:
                from services.smart_parser import SmartParser
                smart_parser = SmartParser()
                
                # –î–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (–æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ)
                user_intent = await self.openai_service.analyze_user_intent(text)
                logger.info(f"–ê—É–¥–∏–æ GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
                user_intent = None
            
            return {
                'type': 'audio',
                'original_content': f"–ê—É–¥–∏–æ —Ñ–∞–π–ª: {message.audio.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}",
                'processed_text': text,
                'user_intent': user_intent
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    async def _process_photo_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ)
            if not self.bot:
                raise ValueError("Bot –æ–±—ä–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")
            
            photo = message.photo[-1]
            photo_file = await self.bot.get_file(photo.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if photo_file.file_size > MAX_FILE_SIZE:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            text = await self.media_processor.image_to_text(photo_file.file_path)
            
            # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            try:
                from services.smart_parser import SmartParser
                smart_parser = SmartParser()
                
                # –î–ª—è —Ñ–æ—Ç–æ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (–æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ)
                user_intent = await self.openai_service.analyze_user_intent(text)
                logger.info(f"–§–æ—Ç–æ GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ: {e}")
                user_intent = None
            
            return {
                'type': 'photo',
                'original_content': f"–§–æ—Ç–æ ({photo.width}x{photo.height})",
                'processed_text': text,
                'user_intent': user_intent
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            return None
    
    async def _process_document_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            document = message.document
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if document.file_size > MAX_FILE_SIZE:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            if not self.bot:
                raise ValueError("Bot –æ–±—ä–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            doc_file = await self.bot.get_file(document.file_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if document.mime_type and 'audio' in document.mime_type:
                text = await self.media_processor.audio_to_text(doc_file.file_path)
            elif document.mime_type and 'image' in document.mime_type:
                text = await self.media_processor.image_to_text(doc_file.file_path)
            elif document.mime_type and 'pdf' in document.mime_type:
                text = await self.media_processor.pdf_to_text(doc_file.file_path)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                text = f"–§–∞–π–ª: {document.file_name}"
            
            # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            try:
                from services.smart_parser import SmartParser
                smart_parser = SmartParser()
                
                # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (–æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ)
                user_intent = await self.openai_service.analyze_user_intent(text)
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                user_intent = None
            
            return {
                'type': 'document',
                'original_content': f"–î–æ–∫—É–º–µ–Ω—Ç: {document.file_name}",
                'processed_text': text,
                'user_intent': user_intent
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None

