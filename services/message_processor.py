"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import logging
import asyncio
import re
from telegram import Message
from services.openai_service import OpenAIService
from services.media_processor import MediaProcessor
from config import MAX_FILE_SIZE

logger = logging.getLogger(__name__)

class MessageProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot=None):
        self.openai_service = OpenAIService()
        self.media_processor = MediaProcessor()
        self.bot = bot
    
    async def process_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.text:
                return await self._process_text_message(message)
            elif message.voice:
                return await self._process_voice_message(message)
            elif message.audio:
                return await self._process_audio_message(message)
            elif message.photo:
                return await self._process_photo_message(message)
            elif message.document:
                return await self._process_document_message(message)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _process_text_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        text = message.text.strip()
        
        # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SmartParser)
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ GPT
            need_gpt, reason, basic_intent = self._analyze_query_complexity(text)
            
            if need_gpt:
                logger.info(f"üîç –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SmartParser: –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è: {reason}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                assistant_result = await self.openai_service.analyze_with_assistant(text)
                logger.info(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {assistant_result}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                if isinstance(assistant_result, dict) and 'items' in assistant_result:
                    # –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ items, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
                    if assistant_result['items'] and len(assistant_result['items']) > 0:
                        user_intent = {
                            'is_multiple_order': True,
                            'items': assistant_result['items']
                        }
                    else:
                        user_intent = {}
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
                    user_intent = assistant_result
            else:
                logger.info(f"üîç –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SmartParser: GPT –ù–ï –Ω—É–∂–µ–Ω: {reason}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π user_intent
                user_intent = basic_intent
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π user_intent
            if not user_intent or user_intent.get('type') == '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                logger.info("üîç –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π user_intent")
                user_intent = self._create_basic_user_intent(text)
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç: –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            if isinstance(user_intent, list):
                user_intent = { 'is_multiple_order': True, 'items': user_intent }
            
            return {
                'type': 'text',
                'original_content': text,
                'processed_text': text,
                'user_intent': user_intent
            }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ SmartParser: {e}")
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∑–∞—Ç–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
            try:
                assistant_result = await self.openai_service.analyze_with_assistant(text)
                logger.info(f"Fallback –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {assistant_result}")
                if not assistant_result or (isinstance(assistant_result, dict) and assistant_result.get('type') == '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'):
                    user_intent = self._create_basic_user_intent(text)
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤ items –∏–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç)
                    if isinstance(assistant_result, dict) and 'items' in assistant_result:
                        # –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ items, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
                        if assistant_result['items'] and len(assistant_result['items']) > 0:
                            user_intent = {
                                'is_multiple_order': True,
                                'items': assistant_result['items']
                            }
                        else:
                            user_intent = {}
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
                        user_intent = assistant_result
            except Exception as gpt_error:
                logger.error(f"Fallback GPT —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {gpt_error}")
                user_intent = self._create_basic_user_intent(text)
            
            return {
                'type': 'text',
                'original_content': text,
                'processed_text': text,
                'user_intent': user_intent
            }
    
    async def _process_voice_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            if not self.bot:
                raise ValueError("Bot –æ–±—ä–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            voice_file = await self.bot.get_file(message.voice.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if voice_file.file_size > MAX_FILE_SIZE:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            text = await self.media_processor.voice_to_text(voice_file.file_path)
            
            # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            try:
                from services.smart_parser import SmartParser
                smart_parser = SmartParser()
                
                # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (–æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ)
                user_intent = await self.openai_service.analyze_with_assistant(text)
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–π GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                user_intent = None
            
            return {
                'type': 'voice',
                'original_content': f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({message.voice.duration}—Å)",
                'processed_text': text,
                'user_intent': user_intent,
                'is_voice': True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _process_audio_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            if not self.bot:
                raise ValueError("Bot –æ–±—ä–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            audio_file = await self.bot.get_file(message.audio.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if audio_file.file_size > MAX_FILE_SIZE:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            text = await self.media_processor.audio_to_text(audio_file.file_path)
            
            # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            try:
                from services.smart_parser import SmartParser
                smart_parser = SmartParser()
                
                # –î–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (–æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ)
                user_intent = await self.openai_service.analyze_with_assistant(text)
                logger.info(f"–ê—É–¥–∏–æ GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
                user_intent = None
            
            return {
                'type': 'audio',
                'original_content': f"–ê—É–¥–∏–æ —Ñ–∞–π–ª: {message.audio.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}",
                'processed_text': text,
                'user_intent': user_intent
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    async def _process_photo_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ)
            if not self.bot:
                raise ValueError("Bot –æ–±—ä–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")
            
            photo = message.photo[-1]
            photo_file = await self.bot.get_file(photo.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if photo_file.file_size > MAX_FILE_SIZE:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            text = await self.media_processor.image_to_text(photo_file.file_path)
            
            # –î–ª—è —Ñ–æ—Ç–æ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (–æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ)
            try:
                user_intent = await self.openai_service.analyze_with_assistant(text)
                logger.info(f"–§–æ—Ç–æ GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ: {e}")
                user_intent = None
            
            return {
                'type': 'photo',
                'original_content': f"–§–æ—Ç–æ ({photo.width}x{photo.height})",
                'processed_text': text,
                'user_intent': user_intent
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            return None
    
    async def _process_document_message(self, message: Message) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            document = message.document
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if document.file_size > MAX_FILE_SIZE:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            if not self.bot:
                raise ValueError("Bot –æ–±—ä–µ–∫—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            doc_file = await self.bot.get_file(document.file_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if document.mime_type and 'audio' in document.mime_type:
                text = await self.media_processor.audio_to_text(doc_file.file_path)
            elif document.mime_type and 'image' in document.mime_type:
                text = await self.media_processor.image_to_text(doc_file.file_path)
            elif document.mime_type and 'pdf' in document.mime_type:
                text = await self.media_processor.pdf_to_text(doc_file.file_path)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                text = f"–§–∞–π–ª: {document.file_name}"
            
            # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (–æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ)
            try:
                user_intent = await self.openai_service.analyze_with_assistant(text)
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç GPT –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {user_intent}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                user_intent = None
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if isinstance(user_intent, list):
                user_intent = { 'is_multiple_order': True, 'items': user_intent }
            
            return {
                'type': 'document',
                'original_content': f"–î–æ–∫—É–º–µ–Ω—Ç: {document.file_name}",
                'processed_text': text,
                'user_intent': user_intent,
                'is_document': True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def _analyze_query_complexity(self, text: str) -> tuple[bool, str, dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–µ–Ω –ª–∏ GPT"""
        text_lower = text.lower().strip()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ù–ï –Ω—É–∂–µ–Ω GPT)
        simple_patterns = [
            r'DIN\s+\d+\s+[M–ú]\d+[x√ó]\d+',        # DIN 965 M6x20
            r'[M–ú]\d+\s+\d+\s*–º–º',                # M6 20 –º–º
            r'–≤–∏–Ω—Ç\s+[M–ú]\d+',                    # –≤–∏–Ω—Ç M6
            r'–≥–∞–π–∫–∞\s+[M–ú]\d+',                   # –≥–∞–π–∫–∞ M6
            r'–±–æ–ª—Ç\s+[M–ú]\d+[x√ó]\d+',            # –±–æ–ª—Ç –ú6x40
            r'–±–æ–ª—Ç\s+[M–ú]\d+\s+\d+\s*—à—Ç',      # –±–æ–ª—Ç M6 10 —à—Ç
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in simple_patterns:
            if re.search(pattern, text_lower):
                basic_intent = self._create_basic_user_intent(text)
                return False, "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç", basic_intent
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–ù–£–ñ–ï–ù GPT)
        complex_indicators = [
            '–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ä–∞–∑–Ω—ã—Ö', '–Ω–µ—Å–∫–æ–ª—å–∫–æ',
            '—á—Ç–æ-—Ç–æ', '–ø–æ–¥—Ö–æ–¥—è—â–∏–π', '–¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è', '–º–µ–±–µ–ª—å–Ω—ã–π',
            '–≥—Ä–∏–±–∫–æ–º', '—à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–π', '—Å —Ñ—Ä–µ–∑–æ–π'
        ]
        
        for indicator in complex_indicators:
            if indicator in text_lower:
                return True, f"–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {indicator}", {}
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        return True, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å", {}
    
    def _create_basic_user_intent(self, text: str) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π user_intent –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
        detected_type = '—Å–∞–º–æ—Ä–µ–∑'
        if '–±–æ–ª—Ç' in text_lower:
            detected_type = '–±–æ–ª—Ç'
        elif '–≤–∏–Ω—Ç' in text_lower:
            detected_type = '–≤–∏–Ω—Ç'
        elif '–≥–∞–π–∫–∞' in text_lower:
            detected_type = '–≥–∞–π–∫–∞'
        elif '—à–∞–π–±–∞' in text_lower:
            detected_type = '—à–∞–π–±–∞'
        elif '–∞–Ω–∫–µ—Ä' in text_lower:
            detected_type = '–∞–Ω–∫–µ—Ä'
        
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã M6x40
        diameter = None
        length = None
        match = re.search(r'[M–ú](\d+)(?:[x√ó—Ö]\s*(\d+))?', text_lower)
        if match:
            diameter = f"M{match.group(1)}"
            if match.group(2):
                length = f"{match.group(2)} –º–º"
        
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        quantity = None
        qty_match = re.search(r'(\d+)\s*—à—Ç', text_lower)
        if qty_match:
            quantity = int(qty_match.group(1))
        
        return {
            'type': detected_type,
            'diameter': diameter,
            'length': length,
            'quantity': quantity,
            'confidence': 0.7
        }

