#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π Telegram Bot –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
"""

import logging
import os
import asyncio
from datetime import datetime
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import TELEGRAM_TOKEN
from utils.logger import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)

logger = logging.getLogger(__name__)
logger.addHandler(console_handler)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π.\n\n'
        '–ß—Ç–æ —è —É–º–µ—é:\n'
        '‚Ä¢ –ò—Å–∫–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n'
        '‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n'
        '‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Excel –æ—Ç—á–µ—Ç—ã\n\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
    await update.message.reply_text(
        'üìã **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n'
        'üîç **–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É:**\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n'
        '‚Ä¢ "–±–æ–ª—Ç –ú8—Ö20"\n'
        '‚Ä¢ "–≥–∞–π–∫–∞ —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∞—è –ú10"\n'
        '‚Ä¢ "—à–∞–π–±–∞ –ø—Ä—É–∂–∏–Ω–Ω–∞—è"\n\n'
        'üìÅ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:**\n'
        '‚Ä¢ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)\n'
        '‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n'
        '‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n\n'
        'üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n'
        '–ë–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel –æ—Ç—á–µ—Ç.'
    )

async def generate_excel_report(query: str, results: list, user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        import pandas as pd
        from openpyxl import Workbook
        from openpyxl.styles import Font, Alignment, PatternFill
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        reports_dir = Path("reports")
        reports_dir.mkdir(exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        excel_data = []
        for i, part in enumerate(results, 1):
            excel_data.append({
                '‚Ññ': i,
                '–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': query,
                '–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π': part.get('quantity', 1),
                '–ê—Ä—Ç–∏–∫—É–ª (SKU)': part.get('sku', 'N/A'),
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ': part.get('name', 'N/A')
            })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(excel_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"report_{user_id}_{timestamp}.xlsx"
        filepath = reports_dir / filename
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            header_font = Font(bold=True, color="FFFFFF")
            header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            header_alignment = Alignment(horizontal="center", vertical="center")
            
            for col in range(1, len(df.columns) + 1):
                cell = worksheet.cell(row=1, column=col)
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = header_alignment
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        logger.info(f"Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filepath}")
        return str(filepath)
        
    except ImportError:
        logger.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ pandas –∏–ª–∏ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞: {e}")
        return None

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document = update.message.document
    file_name = document.file_name
    file_size = document.file_size
    user_id = update.effective_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç: {file_name} ({file_size} –±–∞–π—Ç)")
    
    await update.message.reply_text(
        f'üìÅ **–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç:**\n'
        f'–ù–∞–∑–≤–∞–Ω–∏–µ: {file_name}\n'
        f'–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç\n\n'
        f'‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...'
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await asyncio.sleep(3)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if file_name.lower().endswith(('.xlsx', '.xls')):
        await update.message.reply_text(
            f'‚úÖ **Excel —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n'
            f'–§–∞–π–ª: {file_name}\n'
            f'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...\n\n'
            f'üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–µ—Ç–∞–ª–∏...'
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await asyncio.sleep(2)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        mock_results = [
            {'sku': '5-0011450', 'name': '–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç 8—Ö100', 'quantity': 15},
            {'sku': '5-0011480', 'name': '–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç 8—Ö80', 'quantity': 12},
            {'sku': '5-0011490', 'name': '–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç 8—Ö90', 'quantity': 8}
        ]
        
        await update.message.reply_text(
            f'üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n\n'
            f'–ù–∞–π–¥–µ–Ω–æ: **{len(mock_results)} –¥–µ—Ç–∞–ª–µ–π**\n'
            f'üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç...'
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
        excel_file = await generate_excel_report(f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_name}", mock_results, user_id)
        
        if excel_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(excel_file, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"report_{file_name.replace('.xlsx', '').replace('.xls', '')}.xlsx",
                    caption=f'üìä **–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**\n\n'
                            f'–§–∞–π–ª: `report_{file_name}`\n'
                            f'–°—Ç—Ä–æ–∫: {len(mock_results)}\n'
                            f'–ö–æ–ª–æ–Ω–æ–∫: 5\n\n'
                            f'‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –§—É–Ω–∫—Ü–∏—è Excel –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n'
                            f'–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase.'
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(excel_file)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {excel_file}")
            except:
                pass
        else:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞')
        
    elif file_name.lower().endswith('.txt'):
        await update.message.reply_text(
            f'üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω!**\n\n'
            f'–§–∞–π–ª: {file_name}\n'
            f'üìñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...\n\n'
            f'üîç –ò—â—É —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π...'
        )
        
        await asyncio.sleep(2)
        
        await update.message.reply_text(
            f'üìã **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:**\n\n'
            f'–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–µ—Ç–∞–ª–µ–π: **7**\n'
            f'–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n'
            f'‚Ä¢ –ë–æ–ª—Ç—ã –∏ –≤–∏–Ω—Ç—ã\n'
            f'‚Ä¢ –ì–∞–π–∫–∏ –∏ —à–∞–π–±—ã\n'
            f'‚Ä¢ –ê–Ω–∫–µ—Ä—ã –∏ –¥—é–±–µ–ª–∏\n\n'
            f'‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'
        )
        
    else:
        await update.message.reply_text(
            f'‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:**\n\n'
            f'–§–∞–π–ª: {file_name}\n'
            f'–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n'
            f'‚Ä¢ Excel: .xlsx, .xls\n'
            f'‚Ä¢ –¢–µ–∫—Å—Ç: .txt\n'
            f'‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: .jpg, .png\n\n'
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.'
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    photo = update.message.photo[-1]
    file_size = photo.file_size
    user_id = update.effective_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ: {file_size} –±–∞–π—Ç")
    
    await update.message.reply_text(
        f'üì∏ **–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!**\n\n'
        f'–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç\n'
        f'‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...'
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await asyncio.sleep(3)
    
    await update.message.reply_text(
        f'üîç **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n'
        f'‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n'
        f'üìã –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø –¥–µ—Ç–∞–ª–∏...\n\n'
        f'üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n'
        f'–¢–∏–ø: –ö—Ä–µ–ø–µ–∂–Ω–∞—è –¥–µ—Ç–∞–ª—å\n'
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ë–æ–ª—Ç/–í–∏–Ω—Ç\n'
        f'–†–∞–∑–º–µ—Ä: –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –ú8-–ú12\n\n'
        f'‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n'
        f'–†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI.'
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.text:
        text = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å: {text}")
        
        await update.message.reply_text(
            f'üîç **–ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π:**\n\n'
            f'–ó–∞–ø—Ä–æ—Å: "{text}"\n'
            f'‚è≥ –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–µ—Ç–∞–ª–∏...'
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await asyncio.sleep(2)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        mock_results = [
            {'sku': '5-0011450', 'name': '–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç 8—Ö100', 'quantity': 12},
            {'sku': '5-0011480', 'name': '–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç 8—Ö80', 'quantity': 8},
            {'sku': '5-0011490', 'name': '–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç 8—Ö90', 'quantity': 15}
        ]
        
        await update.message.reply_text(
            f'üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n\n'
            f'–ó–∞–ø—Ä–æ—Å: "{text}"\n'
            f'–ù–∞–π–¥–µ–Ω–æ: **{len(mock_results)} –¥–µ—Ç–∞–ª–µ–π**\n\n'
            f'üìã **–¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n'
            f'1. {mock_results[0]["name"]} (SKU: {mock_results[0]["sku"]})\n'
            f'2. {mock_results[1]["name"]} (SKU: {mock_results[1]["sku"]})\n'
            f'3. {mock_results[2]["name"]} (SKU: {mock_results[2]["sku"]})\n\n'
            f'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç...'
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
        excel_file = await generate_excel_report(text, mock_results, user_id)
        
        if excel_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(excel_file, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"search_results_{text.replace(' ', '_')}.xlsx",
                    caption=f'üìä **–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**\n\n'
                            f'–§–∞–π–ª: `search_results_{text.replace(" ", "_")}.xlsx`\n'
                            f'–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(mock_results)}\n'
                            f'–ö–æ–ª–æ–Ω–æ–∫: 5\n\n'
                            f'‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –§—É–Ω–∫—Ü–∏—è Excel –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n'
                            f'–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase.'
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(excel_file)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {excel_file}")
            except:
                pass
        else:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–º)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    app.run_polling()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
