#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å GPT
–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–º—É–ª—è—Ü–∏—è)
2. –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT –ò–ò
3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

import asyncio
import json
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.openai_service import OpenAIService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

async def test_gpt_step_by_step():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å GPT –ø–æ—à–∞–≥–æ–≤–æ"""
    
    print("üîç –¢–ï–°–¢ –ü–û–®–ê–ì–û–í–û–ô –†–ê–ë–û–¢–´ –° GPT")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–º—É–ª—è—Ü–∏—è)
    print("\nüìù –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user_request = """–ê–Ω–∫–µ—Ä —Å –∫–æ–ª—å—Ü–æ–º –º8 10—Ö100 (30—à—Ç)              
–ê–Ω–∫–µ—Ä —Å –∫–æ–ª—å—Ü–æ–º –º12 16—Ö130 (10—à—Ç)              
–ê–Ω–∫–µ—Ä –∫–æ—Å—Ç—ã–ª—å  8—Ö 40 (100—à—Ç)              
–î—é–±–µ–ª—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –ú–û–õ–õ–ò —Å –∫–æ–ª—å—Ü–æ–º 5—Ö52 (50—à—Ç)              
–î—é–±–µ–ª—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –ú–û–õ–õ–ò 6—Ö52 (50—à—Ç)              
–î—é–±–µ–ª—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –ú–û–õ–õ–ò 6—Ö80 (50—à—Ç)              
–®–∞–π–±–∞ –¥–ª—è –ø–æ–ª–∏–∫–∞—Ä–±–æ–Ω–∞—Ç–∞, —Å –∑–æ–Ω—Ç–∏—á–Ω—ã–º EPDM, –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è 7—Ö25  (1800—à—Ç)              
–®–∞–π–±–∞ –∫—Ä–æ–≤–µ–ª—å–Ω–∞—è, EPDM –ß–µ—Ä–Ω—ã–π 2.5–º–º, 4,8—Ö14 K (12000—à—Ç) –ê–ö–¶–ò–Ø              
–®–∞–π–±–∞ –∫—Ä–æ–≤–µ–ª—å–Ω–∞—è, EPDM –ß–µ—Ä–Ω—ã–π 2.5–º–º, 6,3—Ö19 K (7000—à—Ç)              
–®—É—Ä—É–ø —Å –ø–æ–ª—É–∫–æ–ª—å—Ü–æ–º 4—Ö65 (300—à—Ç)"""
    
    print(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    print(f"'{user_request}'")
    print(f"–î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: {len(user_request)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –®–∞–≥ 2: –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT –ò–ò
    print("\nü§ñ –®–ê–ì 2: –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT –ò–ò")
    
    try:
        openai_service = OpenAIService()
        print("‚úÖ OpenAI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ analyze_with_assistant –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        gpt_result = await openai_service.analyze_with_assistant(user_request)
        
        print("‚úÖ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPT: {e}")
        return
    
    # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    print("\nüìä –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
    
    print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(gpt_result)}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {gpt_result}")
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\nüìã –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(gpt_result, dict):
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (dict)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            print(f"–ö–ª—é—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {list(gpt_result.keys())}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑)
            if 'items' in gpt_result and isinstance(gpt_result['items'], list):
                print(f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {len(gpt_result['items'])} –ø–æ–∑–∏—Ü–∏–π")
                for i, item in enumerate(gpt_result['items'], 1):
                    print(f"  –ü–æ–∑–∏—Ü–∏—è {i}: {item}")
            else:
                print("‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑")
                print(f"  –¢–∏–ø: {gpt_result.get('type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"  –î–∏–∞–º–µ—Ç—Ä: {gpt_result.get('diameter', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"  –î–ª–∏–Ω–∞: {gpt_result.get('length', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {gpt_result.get('quantity', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {gpt_result.get('confidence', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π JSON
            print("\nüìù –ü–û–õ–ù–´–ô JSON –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print(json.dumps(gpt_result, ensure_ascii=False, indent=2))
            
        else:
            print(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(gpt_result)}")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {gpt_result}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        return
    
    print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(test_gpt_step_by_step())
