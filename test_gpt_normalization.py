#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ GPT –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
"""

import asyncio
import logging
from services.openai_service import OpenAIService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_gpt_normalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ GPT"""
    
    openai_service = OpenAIService()
    
    test_queries = [
        # –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –±–æ–ª—Ç–æ–≤
        {
            "query": "–±–æ–ª—Ç —Å –≥—Ä–∏–±–∫–æ–º –ú6 –Ω–∞ 40, —Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "expected": {
                "type": "–±–æ–ª—Ç",
                "subtype": "–≥—Ä–∏–±–æ–≤–∏–¥–Ω–∞—è –≥–æ–ª–æ–≤–∫–∞",
                "diameter": "M6",
                "length": "40 –º–º",
                "coating": "—Ü–∏–Ω–∫"
            }
        },
        # –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —Å–∞–º–æ—Ä–µ–∑–æ–≤
        {
            "query": "—Å–∞–º–æ—Ä–µ–∑ –∫–ª–æ–ø 3.5—Ö25, –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "expected": {
                "type": "—Å–∞–º–æ—Ä–µ–∑",
                "subtype": "—Å –ø—Ä–µ—Å—Å—à–∞–π–±–æ–π",
                "diameter": "3.5 –º–º",
                "length": "25 –º–º",
                "coating": "—Ü–∏–Ω–∫"
            }
        },
        # –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤
        {
            "query": "–±–æ–ª—Ç –ø–æ–¥ –∫–ª—é—á –ú8—Ö20, –Ω–µ—Ä–∂–∞–≤–µ–π–∫–∞",
            "expected": {
                "type": "–±–æ–ª—Ç",
                "subtype": "—à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∞—è –≥–æ–ª–æ–≤–∫–∞",
                "diameter": "M8",
                "length": "20 –º–º",
                "material": "–Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å"
            }
        },
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        {
            "query": "–∞–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ú12—Ö100, –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "expected": {
                "type": "–∞–Ω–∫–µ—Ä",
                "subtype": "–∑–∞–±–∏–≤–∞–µ–º—ã–π",
                "diameter": "M12",
                "length": "100 –º–º",
                "coating": "—Ü–∏–Ω–∫"
            }
        }
    ]
    
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ GPT\n")
    
    for i, test_case in enumerate(test_queries, 1):
        print(f"üìù –¢–µ—Å—Ç {i}: {test_case['query']}")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_case['expected']}")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT
            result = await openai_service.analyze_user_intent(test_case['query'])
            
            print(f"‚úÖ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
            if isinstance(result, dict):
                if 'items' in result and result['items']:
                    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
                    item = result['items'][0]
                    print(f"üìã –ù–∞–π–¥–µ–Ω –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {item}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
                    checks = []
                    for key, expected_value in test_case['expected'].items():
                        if key in item:
                            actual_value = item[key]
                            if actual_value == expected_value:
                                checks.append(f"‚úÖ {key}: {actual_value}")
                            else:
                                checks.append(f"‚ùå {key}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_value}, –ø–æ–ª—É—á–µ–Ω–æ {actual_value}")
                        else:
                            checks.append(f"‚ùå {key}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
                    for check in checks:
                        print(f"   {check}")
                        
                else:
                    # –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑
                    print(f"üìã –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–∫–∞–∑: {result}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
                    checks = []
                    for key, expected_value in test_case['expected'].items():
                        if key in result:
                            actual_value = result[key]
                            if actual_value == expected_value:
                                checks.append(f"‚úÖ {key}: {actual_value}")
                            else:
                                checks.append(f"‚ùå {key}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_value}, –ø–æ–ª—É—á–µ–Ω–æ {actual_value}")
                        else:
                            checks.append(f"‚ùå {key}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
                    for check in checks:
                        print(f"   {check}")
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(result)}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        
        print("-" * 60)
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    print("‚úÖ –£–ª—É—á—à–µ–Ω –ø—Ä–æ–º–ø—Ç GPT –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ–¥—Ç–∏–ø—É –≤ Edge Function")
    print("\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ GPT –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Edge Function –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

if __name__ == "__main__":
    asyncio.run(test_gpt_normalization())
