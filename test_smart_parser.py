#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SmartParser
"""

import asyncio
import logging
from services.smart_parser import SmartParser

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_smart_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SmartParser –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
    
    parser = SmartParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–ù–ï –Ω—É–∂–µ–Ω GPT)
        "–≤–∏–Ω—Ç M6 20 –º–º",
        "–≥–∞–π–∫–∞ M8",
        "—à–∞–π–±–∞ M6 –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å",
        "–±–æ–ª—Ç M10 30 –º–º –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
        "DIN 965 M6x20",
        "DIN 985 M6 A2",
        
        # –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–ù–£–ñ–ï–ù GPT)
        "–Ω—É–∂–Ω–æ 12 —Ä–∞–∑–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏ –º–µ–±–µ–ª–∏",
        "—á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞",
        "–≤–∏–Ω—Ç —Å —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–æ–π –≥–æ–ª–æ–≤–∫–æ–π, –¥–ª–∏–Ω–æ–π 20 –º–º, –¥–ª—è –Ω–∞—Ä—É–∂–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
        "–∫–æ–º–ø–ª–µ–∫—Ç –∫—Ä–µ–ø–µ–∂–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å—Ç–æ–ª–∞",
        "–∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞–±–æ—Ä –±–æ–ª—Ç–æ–≤ –∏ –≥–∞–µ–∫ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞",
        "—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ —Å–∞–º–æ—Ä–µ–∑–æ–≤ –¥–ª—è –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–∞"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SmartParser\n")
    
    for i, query in enumerate(test_queries, 1):
        print(f"üîç –¢–µ—Å—Ç {i}: {query}")
        
        try:
            result = parser.parse_query(query)
            
            if result['need_gpt']:
                print(f"   ‚ùå GPT –ù–£–ñ–ï–ù: {result['reason']}")
            else:
                print(f"   ‚úÖ GPT –ù–ï –Ω—É–∂–µ–Ω: {result['reason']}")
                print(f"   üìä –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                user_intent = result['user_intent']
                for key, value in user_intent.items():
                    if value is not None:
                        print(f"      {key}: {value}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()

if __name__ == "__main__":
    asyncio.run(test_smart_parser())
