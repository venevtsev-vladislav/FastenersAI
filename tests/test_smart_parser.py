#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ SmartParser –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ FastenersAI
–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.message_processor import MessageProcessor

def test_smart_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SmartParser"""
    
    print("üîç –¢–ï–°–¢ –í–°–¢–†–û–ï–ù–ù–û–ì–û SMART PARSER")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º MessageProcessor
    processor = MessageProcessor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_cases = [
        {
            "query": "DIN 965 M6x20",
            "expected": "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç",
            "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π DIN —Ñ–æ—Ä–º–∞—Ç"
        },
        {
            "query": "M6 20 –º–º",
            "expected": "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç", 
            "description": "–ü—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–º–µ—Ä"
        },
        {
            "query": "–≤–∏–Ω—Ç M6",
            "expected": "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç",
            "description": "–¢–∏–ø + —Ä–∞–∑–º–µ—Ä"
        },
        {
            "query": "–Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è",
            "expected": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
            "description": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é"
        },
        {
            "query": "–∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –±–æ–ª—Ç–æ–≤",
            "expected": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
            "description": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑"
        }
    ]
    
    passed = 0
    total = len(test_cases)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}: {test_case['description']}")
        print(f"üìù –ó–∞–ø—Ä–æ—Å: {test_case['query']}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            need_gpt, reason, basic_intent = processor._analyze_query_complexity(test_case['query'])
            
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç: need_gpt={need_gpt}, reason='{reason}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç" in test_case['expected']:
                expected_need_gpt = False
            else:
                expected_need_gpt = True
            
            if need_gpt == expected_need_gpt:
                print(f"‚úÖ –ü–†–û–ô–î–ï–ù: {reason}")
                passed += 1
            else:
                print(f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù: –æ–∂–∏–¥–∞–ª–æ—Å—å need_gpt={expected_need_gpt}")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º basic_intent –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if not need_gpt and basic_intent:
                print(f"üìä Basic intent: {basic_intent}")
                
        except Exception as e:
            print(f"üí• –û–®–ò–ë–ö–ê: {e}")
    
    print(f"\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    return passed == total

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ SmartParser...")
    
    result = test_smart_parser()
    
    if result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SmartParser —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•!")
        print("SmartParser —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    
    sys.exit(0 if result else 1)
