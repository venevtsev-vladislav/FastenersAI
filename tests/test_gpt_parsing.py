#!/usr/bin/env python3
"""
–¢–µ—Å—Ç GPT –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ FastenersAI
–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–Ω–∫–µ—Ä–∞–º–∏ –∏ –±–æ–ª—Ç–∞–º–∏
"""

import asyncio
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.openai_service import OpenAIService
from services.message_processor import MessageProcessor

async def test_gpt_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º GPT –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
    test_query = """
    –ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú6
    –ö–ª–∏–Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ä 8—Ö50
    –ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç —Å –∫–æ–ª—å—Ü–æ–º –ú16x130
    –ë–æ–ª—Ç—ã DIN603 –ú10—Ö120, —Ü–∏–Ω–∫ (–∫–≥)
    –ë–æ–ª—Ç—ã DIN603 –ú6—Ö60, —Ü–∏–Ω–∫ (–∫–≥)
    –ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú14—Ö80, —Ü–∏–Ω–∫ (–∫–≥)
    –ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú16—Ö60, —Ü–∏–Ω–∫ (–∫–≥)
    –ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú16—Ö70, —Ü–∏–Ω–∫ (–∫–≥)
    –ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú18—Ö40, —Ü–∏–Ω–∫ (–∫–≥)
    –ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú5—Ö16, —Ü–∏–Ω–∫ (–∫–≥)
    """
    
    print("üîç –¢–ï–°–¢ GPT –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 50)
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n{test_query.strip()}")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        openai_service = OpenAIService()
        message_processor = MessageProcessor()
        
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º GPT –∞–Ω–∞–ª–∏–∑...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GPT –∞–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä—è–º—É—é
        gpt_result = await openai_service.analyze_with_assistant(test_query)
        
        print("‚úÖ GPT –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç GPT:\n{json.dumps(gpt_result, indent=2, ensure_ascii=False)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ MessageProcessor
        print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ MessageProcessor...")
        
        # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ
        class MockMessage:
            def __init__(self, text):
                self.text = text
        
        mock_message = MockMessage(test_query)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ MessageProcessor
        processor_result = await message_processor.process_message(mock_message)
        
        print("‚úÖ MessageProcessor –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç MessageProcessor:\n{json.dumps(processor_result, indent=2, ensure_ascii=False)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç items
        if processor_result and processor_result.get('user_intent'):
            user_intent = processor_result['user_intent']
            
            if isinstance(user_intent, dict) and 'items' in user_intent:
                items = user_intent['items']
                print(f"\nüéØ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(items)} –ø–æ–∑–∏—Ü–∏–π:")
                
                for i, item in enumerate(items, 1):
                    print(f"  {i}. {item.get('type', 'N/A')} - M{item.get('diameter', 'N/A')}x{item.get('length', 'N/A')}")
                
                return True
            else:
                print(f"\n‚ùå –û–®–ò–ë–ö–ê: user_intent –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç items")
                print(f"user_intent: {user_intent}")
                return False
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: MessageProcessor –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ GPT –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    result = asyncio.run(test_gpt_parsing())
    
    if result:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("GPT –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å –∏ –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞")
    
    sys.exit(0 if result else 1)
