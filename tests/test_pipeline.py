#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Pipeline –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ FastenersAI
–¢–µ—Å—Ç–∏—Ä—É–µ–º 5-—ç—Ç–∞–ø–Ω—ã–π pipeline
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from pipeline.message_processor import MessagePipeline

async def test_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π pipeline"""
    
    print("üîç –¢–ï–°–¢ –£–ü–†–û–©–ï–ù–ù–û–ì–û PIPELINE")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º pipeline (–±–µ–∑ bot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        pipeline = MessagePipeline(bot=None)
        
        print("‚úÖ Pipeline —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        required_methods = [
            '_parse_and_normalize',
            '_search_database', 
            '_rank_results',
            '_generate_excel',
            '_finalize_results'
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ pipeline:")
        for method_name in required_methods:
            if hasattr(pipeline, method_name):
                print(f"  ‚úÖ {method_name}")
            else:
                print(f"  ‚ùå {method_name} - –ù–ï –ù–ê–ô–î–ï–ù!")
                return False
        
        print("\n‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã pipeline –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–±—Ä–∞–Ω—ã —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
        old_methods = [
            '_validate_and_parse',
            '_normalize_with_ai',
            '_prepare_data_container',
            '_validate_relevance'
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã —É–±—Ä–∞–Ω—ã:")
        for method_name in old_methods:
            if hasattr(pipeline, method_name):
                print(f"  ‚ùå {method_name} - –í–°–ï –ï–©–ï –ï–°–¢–¨!")
                return False
            else:
                print(f"  ‚úÖ {method_name} - —É–±—Ä–∞–Ω")
        
        print("\n‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É pipeline
        print("\nüìä –°–¢–†–£–ö–¢–£–†–ê PIPELINE:")
        print("  1. –ü–∞—Ä—Å–∏–Ω–≥ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ)")
        print("  2. –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("  3. –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤") 
        print("  4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel")
        print("  5. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        
        return True
        
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ pipeline: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Pipeline...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    result = asyncio.run(test_pipeline())
    
    if result:
        print("\nüéâ –¢–ï–°–¢ PIPELINE –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("Pipeline —É–ø—Ä–æ—â–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("\n‚ùå –¢–ï–°–¢ PIPELINE –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å pipeline")
    
    sys.exit(0 if result else 1)
