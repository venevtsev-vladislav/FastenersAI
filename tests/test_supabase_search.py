#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ Supabase –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ FastenersAI
–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º GPT –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import asyncio
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.supabase_client import SupabaseClient

async def test_supabase_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ Supabase –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º GPT"""
    
    print("üîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê –í SUPABASE")
    print("=" * 50)
    
    # –î–∞–Ω–Ω—ã–µ –æ—Ç GPT (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞)
    gpt_items = [
        {
            "type": "–∞–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π",
            "diameter": "6",
            "length": None,
            "material": "–ª–∞—Ç—É–Ω—å",
            "coating": None,
            "quantity": None,
            "confidence": 0.9
        },
        {
            "type": "–∞–Ω–∫–µ—Ä –∫–ª–∏–Ω–æ–≤–æ–π",
            "diameter": "8",
            "length": "50",
            "material": None,
            "coating": None,
            "quantity": None,
            "confidence": 0.9
        },
        {
            "type": "–∞–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç —Å –∫–æ–ª—å—Ü–æ–º",
            "diameter": "16",
            "length": "130",
            "material": None,
            "coating": None,
            "quantity": None,
            "confidence": 0.9
        },
        {
            "type": "–±–æ–ª—Ç DIN 603",
            "diameter": "10",
            "length": "120",
            "material": None,
            "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "quantity": "1 –∫–≥",
            "confidence": 0.9
        },
        {
            "type": "–±–æ–ª—Ç DIN 603",
            "diameter": "6",
            "length": "60",
            "material": None,
            "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "quantity": "1 –∫–≥",
            "confidence": 0.9
        },
        {
            "type": "–±–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8",
            "diameter": "14",
            "length": "80",
            "material": None,
            "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "quantity": "1 –∫–≥",
            "confidence": 0.9
        },
        {
            "type": "–±–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8",
            "diameter": "16",
            "length": "60",
            "material": None,
            "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "quantity": "1 –∫–≥",
            "confidence": 0.9
        },
        {
            "type": "–±–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8",
            "diameter": "16",
            "length": "70",
            "material": None,
            "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "quantity": "1 –∫–≥",
            "confidence": 0.9
        },
        {
            "type": "–±–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8",
            "diameter": "18",
            "length": "40",
            "material": None,
            "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "quantity": "1 –∫–≥",
            "confidence": 0.9
        },
        {
            "type": "–±–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8",
            "diameter": "5",
            "length": "16",
            "material": None,
            "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "quantity": "1 –∫–≥",
            "confidence": 0.9
        }
    ]
    
    print(f"üìù –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è {len(gpt_items)} –ø–æ–∑–∏—Ü–∏–π –æ—Ç GPT")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        supabase_client = SupabaseClient()
        
        print("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ SKU (–∏–∑ —Å–∫—Ä–∏–Ω–∞)
        expected_skus = {
            "–∞–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ª–∞—Ç—É–Ω–Ω—ã–π –ú6": "5-0010170",
            "–ö–ª–∏–Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ä 8—Ö50": "5-0012030", 
            "–ê–Ω–∫–µ—Ä–Ω—ã–π –±–æ–ª—Ç —Å –∫–æ–ª—å—Ü–æ–º –ú16x130": "9990121573",
            "–ë–æ–ª—Ç—ã DIN603 –ú10—Ö120, —Ü–∏–Ω–∫ (–∫–≥)": "12-0013800",
            "–ë–æ–ª—Ç—ã DIN603 M6—Ö60, —Ü–∏–Ω–∫ (–∫–≥)": "12-0014130",
            "–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú14—Ö80, —Ü–∏–Ω–∫ (–∫–≥)": "6-0049020",
            "–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú16—Ö60, —Ü–∏–Ω–∫ (–∫–≥)": "6-0049210",
            "–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú16—Ö70, —Ü–∏–Ω–∫ (–∫–≥)": "6-0049230",
            "–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú18—Ö40, —Ü–∏–Ω–∫ (–∫–≥)": "9990085037",
            "–ë–æ–ª—Ç DIN 933 –∫–ª.–ø—Ä.8.8 –ú5—Ö16, —Ü–∏–Ω–∫ (–∫–≥)": "6-0049680"
        }
        
        print("\nüéØ –û–∂–∏–¥–∞–µ–º—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è SKU:")
        for desc, sku in expected_skus.items():
            print(f"  {sku} -> {desc}")
        
        print("\n" + "=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        found_matches = 0
        total_items = len(gpt_items)
        
        for i, item in enumerate(gpt_items, 1):
            print(f"\nüß™ –¢–µ—Å—Ç {i}: {item['type']} M{item['diameter']}x{item['length'] or 'N/A'}")
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                search_query = f"{item['type']}"
                if item['diameter']:
                    search_query += f" M{item['diameter']}"
                if item['length']:
                    search_query += f"x{item['length']}"
                if item['coating']:
                    search_query += f" {item['coating']}"
                if item['material']:
                    search_query += f" {item['material']}"
                
                print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {search_query}")
                
                # –í—ã–∑—ã–≤–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ Edge Function —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                edge_function_url = f"{supabase_url}/functions/v1/fastener-search"
                headers = {
                    'Authorization': f'Bearer {supabase_key}',
                    'Content-Type': 'application/json'
                }
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Edge Function
                payload = {
                    "search_query": search_query,
                    "user_intent": {
                        "type": item['type'],
                        "diameter": item['diameter'],
                        "length": item['length'],
                        "coating": item['coating'],
                        "material": item['material'],
                        "is_simple_parsed": False
                    }
                }
                
                print(f"üåê –í—ã–∑—ã–≤–∞–µ–º Edge Function: {edge_function_url}")
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload: {json.dumps(payload, ensure_ascii=False, indent=2)}")
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(edge_function_url, json=payload, headers=headers) as response:
                        if response.status == 200:
                            search_results = await response.json()
                            print(f"‚úÖ Edge Function –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response.status}")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ Edge Function: {response.status}")
                            error_text = await response.text()
                            print(f"üí• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                            search_results = []
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞
                print(f"üîç –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(search_results)}")
                print(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {json.dumps(search_results, ensure_ascii=False, indent=2)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ Edge Function
                if isinstance(search_results, dict) and 'results' in search_results:
                    results_list = search_results['results']
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –ø–æ–ª—è 'results': {len(results_list)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    results_list = []
                    print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                
                if results_list and len(results_list) > 0:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results_list)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for j, result in enumerate(results_list[:3], 1):
                        if isinstance(result, dict):
                            sku = result.get('sku', 'N/A')
                            name = result.get('name', 'N/A')
                            print(f"  {j}. SKU: {sku} | {name}")
                        else:
                            print(f"  {j}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π SKU
                    found_expected = False
                    for result in results_list:
                        if isinstance(result, dict):
                            sku = result.get('sku', '')
                            if sku in expected_skus.values():
                                print(f"üéØ –ù–ê–ô–î–ï–ù –û–ñ–ò–î–ê–ï–ú–´–ô SKU: {sku}")
                                found_expected = True
                                found_matches += 1
                                break
                    
                    if not found_expected:
                        print("‚ùå –û–∂–∏–¥–∞–µ–º—ã–π SKU –ù–ï –Ω–∞–π–¥–µ–Ω")
                        
                else:
                    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"üí• –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        
        print("\n" + "=" * 50)
        print(f"üìä –ò–¢–û–ì–ò –ü–û–ò–°–ö–ê:")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {found_matches}/{total_items}")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {total_items - found_matches}/{total_items}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö
        success_rate = found_matches / total_items
        if success_rate >= 0.7:  # 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
            return True
        else:
            print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
            return False
            
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ Supabase...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    result = asyncio.run(test_supabase_search())
    
    if result:
        print("\nüéâ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("Supabase –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    sys.exit(0 if result else 1)
