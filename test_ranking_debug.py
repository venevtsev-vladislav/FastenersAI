#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_ranking_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from database.supabase_client import search_parts
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            {
                "query": "–ë–æ–ª—Ç DIN 965 M8x20 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
                "expected_min_probability": 80,
                "description": "–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç + —Ä–∞–∑–º–µ—Ä—ã + —Ç–∏–ø + –ø–æ–∫—Ä—ã—Ç–∏–µ)"
            },
            {
                "query": "–í–∏–Ω—Ç M6x30",
                "expected_min_probability": 50,
                "description": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤"
            },
            {
                "query": "–ì–∞–π–∫–∞",
                "expected_max_probability": 40,
                "description": "–¢–æ–ª—å–∫–æ —Ç–∏–ø –¥–µ—Ç–∞–ª–∏"
            }
        ]
        
        for i, test_case in enumerate(test_queries, 1):
            print(f"\n--- –¢–µ—Å—Ç {i}: {test_case['description']} ---")
            print(f"–ó–∞–ø—Ä–æ—Å: {test_case['query']}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = await search_parts(
                query=test_case['query'],
                user_intent={}
            )
            
            if not results:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            first_result = results[0]
            print(f"üìä –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {first_result.get('name', 'N/A')}")
            print(f"   SKU: {first_result.get('sku', 'N/A')}")
            print(f"   probability_percent: {first_result.get('probability_percent', 'N/A')}")
            print(f"   relevance_score: {first_result.get('relevance_score', 'N/A')}")
            print(f"   match_reason: {first_result.get('match_reason', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º explanation
            explanation = first_result.get('explanation', '')
            if explanation:
                print(f"   explanation: {explanation[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º matched_tokens
            matched_tokens = first_result.get('matched_tokens', [])
            if matched_tokens:
                print(f"   matched_tokens: {matched_tokens}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
            probability = first_result.get('probability_percent', 0)
            if 'expected_min_probability' in test_case:
                if probability >= test_case['expected_min_probability']:
                    print(f"‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {probability}% >= –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ {test_case['expected_min_probability']}%")
                else:
                    print(f"‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {probability}% < –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ {test_case['expected_min_probability']}%")
            
            if 'expected_max_probability' in test_case:
                if probability <= test_case['expected_max_probability']:
                    print(f"‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {probability}% <= –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ {test_case['expected_max_probability']}%")
                else:
                    print(f"‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {probability}% > –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ {test_case['expected_max_probability']}%")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            print(f"üìà –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            for j, result in enumerate(results[:3], 1):
                print(f"   {j}. {result.get('name', 'N/A')} - {result.get('probability_percent', 'N/A')}%")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_ranking_system())
