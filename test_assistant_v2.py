#!/usr/bin/env python3
"""
–¢–µ—Å—Ç OpenAI Assistant API v2
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_assistant_v2():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OpenAI Assistant API v2"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é OpenAI Assistant API v2...")
    
    try:
        from services.openai_assistant_service import OpenAIAssistantService
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        assistant_service = OpenAIAssistantService()
        
        print("‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
        print(f"üìã Assistant ID: {assistant_service.assistant_id}")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ thread
        print("\n1. –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ thread...")
        thread_id = await assistant_service.create_thread()
        print(f"   ‚úÖ Thread —Å–æ–∑–¥–∞–Ω: {thread_id}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        print("\n2. –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")
        test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        
        try:
            response = await assistant_service.process_user_request(test_message, thread_id)
            print(f"   ‚úÖ Assistant –æ—Ç–≤–µ—Ç–∏–ª: {response}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            print("\n3. –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
            await test_alternative_approach(assistant_service, thread_id, test_message)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

async def test_alternative_approach(assistant_service, thread_id, message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥"""
    try:
        from openai import AsyncOpenAI
        from config import OPENAI_API_KEY
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
        client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            default_headers={"OpenAI-Beta": "assistants=v2"}
        )
        
        print("   üîß –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message
        )
        print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Assistant
        run = await client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=assistant_service.assistant_id
        )
        print(f"   ‚úÖ Run —Å–æ–∑–¥–∞–Ω: {run.id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            run_status = await client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run.id
            )
            
            if run_status.status in ["completed", "failed", "cancelled"]:
                print(f"   üìä Run –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run_status.status}")
                break
                
            await asyncio.sleep(1)
        
        if run_status.status == "completed":
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            messages = await client.beta.threads.messages.list(thread_id=thread_id)
            for msg in messages.data:
                if msg.role == "assistant":
                    print(f"   üí¨ –û—Ç–≤–µ—Ç Assistant: {msg.content[0].text.value}")
                    break
        
    except Exception as e:
        print(f"   ‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")

async def check_openai_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    try:
        import openai
        print(f"üì¶ –í–µ—Ä—Å–∏—è OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {openai.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        print("\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã beta:")
        if hasattr(openai, 'beta'):
            beta_methods = dir(openai.beta)
            print(f"   {beta_methods}")
        else:
            print("   ‚ùå beta –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç OpenAI Assistant API v2")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
    asyncio.run(check_openai_version())
    
    print("\n" + "=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Assistant
    asyncio.run(test_assistant_v2())
