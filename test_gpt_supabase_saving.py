#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Supabase
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.supabase_client_legacy import get_supabase_client_legacy
from railway_logging import setup_railway_logging

async def test_gpt_supabase_saving():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Supabase"""
    
    print("üîç –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø GPT –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í SUPABASE")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_railway_logging()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        supabase_client = await get_supabase_client_legacy()
        
        if not supabase_client or not supabase_client.client:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_text = "–ê–Ω–∫–µ—Ä —Å –∫–æ–ª—å—Ü–æ–º –º8 10—Ö100 (30—à—Ç)\n–ê–Ω–∫–µ—Ä —Å –∫–æ–ª—å—Ü–æ–º –º12 16—Ö130 (10—à—Ç)"
        test_gpt_result = {
            "items": [
                {
                    "type": "–∞–Ω–∫–µ—Ä",
                    "diameter": "M8",
                    "length": "10—Ö100 –º–º",
                    "material": None,
                    "coating": None,
                    "quantity": "30—à—Ç",
                    "confidence": 0.95
                },
                {
                    "type": "–∞–Ω–∫–µ—Ä",
                    "diameter": "M12",
                    "length": "16—Ö130 –º–º",
                    "material": None,
                    "coating": None,
                    "quantity": "10—à—Ç",
                    "confidence": 0.95
                }
            ]
        }
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {test_text}")
        print(f"ü§ñ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(test_gpt_result, ensure_ascii=False, indent=2)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        print("\nüíæ –¢–ï–°–¢–ò–†–£–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –í SUPABASE")
        print("-" * 40)
        
        request_id = await supabase_client.create_request_with_gpt_result(
            chat_id="123456789",
            user_id="987654321",
            source="test",
            original_content=test_text,
            gpt_result=test_gpt_result
        )
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {request_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        print("\nüîç –ü–†–û–í–ï–†–Ø–ï–ú –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï")
        print("-" * 40)
        
        response = supabase_client.client.table('user_requests').select('*').eq('id', request_id).execute()
        
        if response.data:
            record = response.data[0]
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print(f"  ID: {record.get('id')}")
            print(f"  User ID: {record.get('user_id')}")
            print(f"  Chat ID: {record.get('chat_id')}")
            print(f"  –¢–∏–ø: {record.get('request_type')}")
            print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {record.get('original_content')}")
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {record.get('processed_text')[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_intent
            user_intent = record.get('user_intent')
            if user_intent:
                try:
                    if isinstance(user_intent, str):
                        user_intent = json.loads(user_intent)
                    
                    print(f"  User Intent:")
                    print(f"    –ò—Å—Ç–æ—á–Ω–∏–∫: {user_intent.get('source')}")
                    print(f"    –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {user_intent.get('original_content')}")
                    print(f"    –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {user_intent.get('processed_at')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    gpt_result_saved = user_intent.get('gpt_result')
                    if gpt_result_saved:
                        print(f"    üéØ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
                        print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(gpt_result_saved.get('items', []))}")
                        for i, item in enumerate(gpt_result_saved.get('items', []), 1):
                            print(f"      –ü–æ–∑–∏—Ü–∏—è {i}: {item.get('type')} {item.get('diameter')} {item.get('length')} {item.get('quantity')}")
                    else:
                        print(f"    ‚ùå GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ user_intent")
                    
                except Exception as json_error:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user_intent: {json_error}")
                    print(f"    Raw user_intent: {user_intent}")
            
            print(f"  –°–æ–∑–¥–∞–Ω–æ: {record.get('created_at')}")
            
        else:
            print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        print("\nüîç –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–ò–°–ö –ü–û GPT –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú")
        print("-" * 40)
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        response = supabase_client.client.table('user_requests').select('*').contains('user_intent', {'gpt_result': {'items': []}}).execute()
        
        if response.data:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∑–∞–ø–∏—Å–µ–π —Å GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
            
            for i, record in enumerate(response.data, 1):
                print(f"\nüìä –ó–∞–ø–∏—Å—å {i}:")
                print(f"  ID: {record.get('id')}")
                print(f"  User ID: {record.get('user_id')}")
                print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {record.get('original_content', '')[:100]}...")
                
                # –ü–∞—Ä—Å–∏–º user_intent
                user_intent = record.get('user_intent')
                if user_intent:
                    try:
                        if isinstance(user_intent, str):
                            user_intent = json.loads(user_intent)
                        
                        gpt_result = user_intent.get('gpt_result')
                        if gpt_result and 'items' in gpt_result:
                            print(f"  üéØ GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(gpt_result['items'])} –ø–æ–∑–∏—Ü–∏–π")
                            for j, item in enumerate(gpt_result['items'], 1):
                                print(f"    –ü–æ–∑–∏—Ü–∏—è {j}: {item.get('type')} {item.get('diameter')} {item.get('length')} {item.get('quantity')}")
                        else:
                            print(f"  ‚ùå GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        else:
            print("‚ùå –ó–∞–ø–∏—Å–∏ —Å GPT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(test_gpt_supabase_saving())
