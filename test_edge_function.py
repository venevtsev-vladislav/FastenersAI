#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Edge Function –Ω–∞–ø—Ä—è–º—É—é
"""

import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_edge_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Edge Function –Ω–∞–ø—Ä—è–º—É—é"""
    
    # URL Edge Function (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
    edge_function_url = "https://your-project.supabase.co/functions/v1/fastener-search"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {
            "name": "–¢–µ—Å—Ç 1: –ë–æ–ª—Ç —Å user_intent",
            "data": {
                "search_query": "–±–æ–ª—Ç —Å –≥—Ä–∏–±–∫–æ–º –ú6 –Ω–∞ 40, —Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
                "user_intent": {
                    "type": "–±–æ–ª—Ç",
                    "diameter": "M6",
                    "length": "40 –º–º",
                    "coating": "—Ü–∏–Ω–∫"
                }
            }
        },
        {
            "name": "–¢–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ search_query",
            "data": {
                "search_query": "–±–æ–ª—Ç –ú6 40 —Ü–∏–Ω–∫",
                "user_intent": {}
            }
        },
        {
            "name": "–¢–µ—Å—Ç 3: –ü—É—Å—Ç–æ–π user_intent",
            "data": {
                "search_query": "–±–æ–ª—Ç –ú6 40 —Ü–∏–Ω–∫",
                "user_intent": None
            }
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Edge Function...")
    print("=" * 50)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç {test_case['name']}")
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {json.dumps(test_case['data'], ensure_ascii=False, indent=2)}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                edge_function_url,
                json=test_case['data'],
                headers={
                    'Content-Type': 'application/json',
                    'Authorization': f'Bearer {os.getenv("SUPABASE_ANON_KEY")}'
                },
                timeout=30
            )
            
            print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result.get('results', []))} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                
                if result.get('results'):
                    print("üìã –ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    for j, item in enumerate(result['results'][:3], 1):
                        print(f"  {j}. {item.get('name', 'N/A')} (SKU: {item.get('sku', 'N/A')})")
                else:
                    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        print("-" * 30)

def test_supabase_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase –Ω–∞–ø—Ä—è–º—É—é"""
    
    from supabase import create_client, Client
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase –Ω–∞–ø—Ä—è–º—É—é...")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        supabase: Client = create_client(
            os.getenv("SUPABASE_URL"),
            os.getenv("SUPABASE_ANON_KEY")
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "SELECT * FROM parts_catalog WHERE name ILIKE '%–±–æ–ª—Ç%' LIMIT 5",
            "SELECT * FROM parts_catalog WHERE name ILIKE '%M6%' LIMIT 5",
            "SELECT * FROM parts_catalog WHERE name ILIKE '%—Ü–∏–Ω–∫%' LIMIT 5"
        ]
        
        for query in test_queries:
            print(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
            
            try:
                result = supabase.rpc('exec_sql', {'sql_query': query}).execute()
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result.data)} —Å—Ç—Ä–æ–∫")
                
                if result.data:
                    for row in result.data[:3]:
                        print(f"  - {row.get('name', 'N/A')}")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Edge Function –∏ Supabase")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Edge Function
    test_edge_function()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase –Ω–∞–ø—Ä—è–º—É—é
    test_supabase_direct()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
