#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ POST –∑–∞–ø—Ä–æ—Å–∞ –∫ Edge Function
"""

import asyncio
import aiohttp
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_edge_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Edge Function –Ω–∞–ø—Ä—è–º—É—é"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Edge Function –Ω–∞–ø—Ä—è–º—É—é...")
    
    # URL Edge Function
    supabase_url = os.getenv('SUPABASE_URL')
    edge_function_url = f"{supabase_url}/functions/v1/fastener-search"
    
    # API –∫–ª—é—á
    api_key = os.getenv('SUPABASE_KEY')
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_cases = [
        {
            "name": "DIN 603 –í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 6 √ó 40 Zn ‚Äî 200 —à—Ç",
            "search_query": "DIN 603 –í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 6 √ó 40 Zn ‚Äî 200 —à—Ç",
            "user_intent": {
                "type": "–≤–∏–Ω—Ç",
                "standard": "DIN 603",
                "diameter": "6",
                "length": "40",
                "coating": "—Ü–∏–Ω–∫"
            }
        },
        {
            "name": "–í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 640 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "search_query": "–≤–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 640 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "user_intent": {
                "type": "–≤–∏–Ω—Ç",
                "diameter": "6",
                "length": "40",
                "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π"
            }
        },
        {
            "name": "–ë–æ–ª—Ç DIN 965 M8x20 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "search_query": "–ë–æ–ª—Ç DIN 965 M8x20 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "user_intent": {
                "type": "–±–æ–ª—Ç",
                "standard": "DIN 965",
                "diameter": "M8",
                "length": "20",
                "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π"
            }
        }
    ]
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    async with aiohttp.ClientSession() as session:
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n{'='*60}")
            print(f"üß™ –¢–ï–°–¢ {i}: {test_case['name']}")
            print(f"{'='*60}")
            
            payload = {
                "search_query": test_case["search_query"],
                "user_intent": test_case["user_intent"]
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å:")
            print(f"   URL: {edge_function_url}")
            print(f"   Payload: {json.dumps(payload, ensure_ascii=False, indent=2)}")
            
            try:
                async with session.post(edge_function_url, json=payload, headers=headers) as response:
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status}")
                    
                    if response.status == 200:
                        data = await response.json()
                        
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(data.get('results', []))}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        results = data.get('results', [])
                        for j, result in enumerate(results[:3], 1):
                            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç {j}:")
                            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('name', 'N/A')}")
                            print(f"   SKU: {result.get('sku', 'N/A')}")
                            print(f"   probability_percent: {result.get('probability_percent', 'N/A')}%")
                            print(f"   relevance_score: {result.get('relevance_score', 'N/A')}")
                            print(f"   match_reason: {result.get('match_reason', 'N/A')}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º explanation
                            explanation = result.get('explanation', '')
                            if explanation:
                                print(f"   explanation:")
                                for line in explanation.split('\n'):
                                    if line.strip():
                                        print(f"     {line}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º matched_tokens
                            matched_tokens = result.get('matched_tokens', [])
                            if matched_tokens:
                                print(f"   matched_tokens: {matched_tokens}")
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º
                        probabilities = [r.get('probability_percent', 0) for r in results]
                        if probabilities:
                            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
                            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(probabilities)}%")
                            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(probabilities)}%")
                            print(f"   –°—Ä–µ–¥–Ω—è—è: {sum(probabilities) / len(probabilities):.1f}%")
                        
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {error_text}")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
    
    print(f"\n{'='*60}")
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"{'='*60}")

if __name__ == "__main__":
    asyncio.run(test_edge_function())
