"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è FastenersAI Bot
–í–∫–ª—é—á–∞–µ—Ç AI –∞–Ω–∞–ª–∏–∑, –ø–æ–∏—Å–∫ –≤ Supabase, –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel —Ñ–∞–π–ª–æ–≤
"""

import logging
import asyncio
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.message_processor import MessageProcessor
from services.openai_service import OpenAIService
from services.media_processor import MediaProcessor
from services.excel_generator import ExcelGenerator
from database.supabase_client import SupabaseClient
from config import MAX_FILE_SIZE, MIN_PROBABILITY_THRESHOLD

logger = logging.getLogger(__name__)

class FullMessageHandler:
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.message_processor = MessageProcessor()
        self.openai_service = OpenAIService()
        self.media_processor = MediaProcessor()
        self.excel_generator = ExcelGenerator()
        self.supabase_client = SupabaseClient()
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user = update.effective_user
            chat_id = update.effective_chat.id
            message = update.message
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.text:
                await self._handle_text_message(update, context)
            elif message.photo:
                await self._handle_photo_message(update, context)
            elif message.voice:
                await self._handle_voice_message(update, context)
            elif message.document:
                await self._handle_document_message(update, context)
            else:
                await message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            except:
                pass

    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
        try:
            message = update.message
            user_message = message.text
            user = update.effective_user
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id}: {user_message[:100]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageProcessor
            result = await self.message_processor.process_message(message)
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
            
            if not result or not result.get('user_intent'):
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_intent –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
                return
            
            user_intent = result['user_intent']
            logger.info(f"User intent: {user_intent}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await processing_msg.edit_text("üîç –ò—â—É –¥–µ—Ç–∞–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ Supabase
            search_results = await self._search_in_database(user_intent)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {len(search_results) if search_results else 0} –ø–æ–∑–∏—Ü–∏–π")
            
            if not search_results:
                logger.warning(f"–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è user_intent: {user_intent}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º fallback –ø–æ–∏—Å–∫
                fallback_results = await self._fallback_search(user_intent)
                if fallback_results:
                    search_results = fallback_results
                    logger.info(f"Fallback –ø–æ–∏—Å–∫ –¥–∞–ª {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    await processing_msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await processing_msg.edit_text("üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
            excel_file = await self._generate_excel_file(search_results, user_intent, user_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.edit_text("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
            with open(excel_file, 'rb') as f:
                await message.reply_document(
                    document=f,
                    filename=f"fasteners_search_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    caption=f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π**\n\nüìù **–í–∞—à –∑–∞–ø—Ä–æ—Å:** {user_message}\nüìä **–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π:** {len(search_results)}\nüìÖ **–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            await self._send_rating_buttons(message, user.id)
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

    async def _handle_photo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å OCR"""
        try:
            message = update.message
            user = update.effective_user
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user.id}")
            
            processing_msg = await message.reply_text("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ MessageProcessor
            result = await self.message_processor.process_message(message)
            
            if not result or not result.get('processed_text'):
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return
            
            extracted_text = result['processed_text']
            user_intent = result.get('user_intent')
            
            if not user_intent:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            await processing_msg.edit_text("üîç –ò—â—É –¥–µ—Ç–∞–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            search_results = await self._search_in_database(user_intent)
            
            if not search_results:
                await processing_msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π.")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
            await processing_msg.edit_text("üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª...")
            excel_file = await self._generate_excel_file(search_results, user_intent, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {extracted_text[:100]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(excel_file, 'rb') as f:
                await message.reply_document(
                    document=f,
                    filename=f"fasteners_photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    caption=f"üì∏ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é**\n\nüìù **–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:** {extracted_text[:200]}...\nüìä **–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π:** {len(search_results)}"
                )
            
            await self._send_rating_buttons(message, user.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
            except:
                pass

    async def _handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å Speech-to-Text"""
        try:
            message = update.message
            user = update.effective_user
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}")
            
            processing_msg = await message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ MessageProcessor
            result = await self.message_processor.process_message(message)
            
            if not result or not result.get('processed_text'):
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
                return
            
            extracted_text = result['processed_text']
            user_intent = result.get('user_intent')
            
            if not user_intent:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            await processing_msg.edit_text("üîç –ò—â—É –¥–µ—Ç–∞–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            search_results = await self._search_in_database(user_intent)
            
            if not search_results:
                await processing_msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π.")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
            await processing_msg.edit_text("üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª...")
            excel_file = await self._generate_excel_file(search_results, user_intent, f"–ì–æ–ª–æ—Å: {extracted_text[:100]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(excel_file, 'rb') as f:
                await message.reply_document(
                    document=f,
                    filename=f"fasteners_voice_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    caption=f"üé§ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é**\n\nüìù **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:** {extracted_text[:200]}...\nüìä **–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π:** {len(search_results)}"
                )
            
            await self._send_rating_buttons(message, user.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except:
                pass

    async def _handle_document_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Excel, PDF)"""
        try:
            message = update.message
            user = update.effective_user
            document = message.document
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user.id}: {document.file_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if document.file_size > MAX_FILE_SIZE:
                await message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)} MB")
                return
            
            processing_msg = await message.reply_text("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ MessageProcessor
            result = await self.message_processor.process_message(message)
            
            if not result or not result.get('processed_text'):
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
                return
            
            extracted_text = result['processed_text']
            user_intent = result.get('user_intent')
            
            if not user_intent:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            await processing_msg.edit_text("üîç –ò—â—É –¥–µ—Ç–∞–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            search_results = await self._search_in_database(user_intent)
            
            if not search_results:
                await processing_msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π.")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
            await processing_msg.edit_text("üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª...")
            excel_file = await self._generate_excel_file(search_results, user_intent, f"–î–æ–∫—É–º–µ–Ω—Ç: {document.file_name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(excel_file, 'rb') as f:
                await message.reply_document(
                    document=f,
                    filename=f"fasteners_doc_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    caption=f"üìÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É**\n\nüìÅ **–§–∞–π–ª:** {document.file_name}\nüìù **–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:** {extracted_text[:200]}...\nüìä **–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π:** {len(search_results)}"
                )
            
            await self._send_rating_buttons(message, user.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            except:
                pass

    async def _search_in_database(self, user_intent: dict) -> list:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å user_intent: {user_intent}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞, —á—Ç–æ –∏ –≤ pipeline
            from pipeline.message_processor import search_parts_direct
            
            # –ï—Å–ª–∏ —ç—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            if user_intent.get('is_multiple_order') and user_intent.get('items'):
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑")
                all_results = []
                for item in user_intent['items']:
                    logger.info(f"–ü–æ–∏—Å–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏: {item}")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                    search_query = f"{item.get('type', '')} {item.get('diameter', '')}x{item.get('length', '')}".strip()
                    
                    results = await search_parts_direct(search_query, item)
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏")
                    all_results.extend(results)
                logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return all_results
            else:
                # –û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
                logger.info("–û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–∏—Å–∫")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                search_query = f"{user_intent.get('type', '')} {user_intent.get('diameter', '')}x{user_intent.get('length', '')}".strip()
                
                results = await search_parts_direct(search_query, user_intent)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return results
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    async def _fallback_search(self, user_intent: dict) -> list:
        """Fallback –ø–æ–∏—Å–∫, –µ—Å–ª–∏ Supabase –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        try:
            logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º fallback –ø–æ–∏—Å–∫")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            fallback_results = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            if user_intent.get('is_multiple_order') and user_intent.get('items'):
                logger.info("Fallback –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
                for item in user_intent['items']:
                    if item.get('type') == '—Å–∞–º–æ—Ä–µ–∑' and item.get('diameter') == '4,2':
                        fallback_results.extend([
                            {
                                'sku': 'TEST-001',
                                'name': '–°–∞–º–æ—Ä–µ–∑ –ø–æ –º–µ—Ç–∞–ª–ª—É 4,2x25',
                                'type': '—Å–∞–º–æ—Ä–µ–∑',
                                'pack_size': 100,
                                'unit': '—à—Ç',
                                'relevance_score': 0.95,
                                'match_reason': 'Fallback –ø–æ–∏—Å–∫ - —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
                                'packages_needed': 0,
                                'total_quantity': 0,
                                'excess_quantity': 0,
                                'confidence_score': 95
                            },
                            {
                                'sku': 'TEST-002', 
                                'name': '–°–∞–º–æ—Ä–µ–∑ –ø–æ –¥–µ—Ä–µ–≤—É 4,2x25',
                                'type': '—Å–∞–º–æ—Ä–µ–∑',
                                'pack_size': 100,
                                'unit': '—à—Ç',
                                'relevance_score': 0.90,
                                'match_reason': 'Fallback –ø–æ–∏—Å–∫ - —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
                                'packages_needed': 0,
                                'total_quantity': 0,
                                'excess_quantity': 0,
                                'confidence_score': 90
                            }
                        ])
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
            elif user_intent.get('type') == '—Å–∞–º–æ—Ä–µ–∑' and user_intent.get('diameter') == '4,2':
                logger.info("Fallback –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
                fallback_results = [
                    {
                        'sku': 'TEST-001',
                        'name': '–°–∞–º–æ—Ä–µ–∑ –ø–æ –º–µ—Ç–∞–ª–ª—É 4,2x25',
                        'type': '—Å–∞–º–æ—Ä–µ–∑',
                        'pack_size': 100,
                        'unit': '—à—Ç',
                        'relevance_score': 0.95,
                        'match_reason': 'Fallback –ø–æ–∏—Å–∫ - —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
                        'packages_needed': 0,
                        'total_quantity': 0,
                        'excess_quantity': 0,
                        'confidence_score': 95
                    },
                    {
                        'sku': 'TEST-002', 
                        'name': '–°–∞–º–æ—Ä–µ–∑ –ø–æ –¥–µ—Ä–µ–≤—É 4,2x25',
                        'type': '—Å–∞–º–æ—Ä–µ–∑',
                        'pack_size': 100,
                        'unit': '—à—Ç',
                        'relevance_score': 0.90,
                        'match_reason': 'Fallback –ø–æ–∏—Å–∫ - —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
                        'packages_needed': 0,
                        'total_quantity': 0,
                        'excess_quantity': 0,
                        'confidence_score': 90
                    }
                ]
            
            logger.info(f"Fallback –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª {len(fallback_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return fallback_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback –ø–æ–∏—Å–∫–µ: {e}")
            return []

    async def _generate_excel_file(self, search_results: list, user_intent: dict, original_query: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –º–µ–Ω–µ–µ 0.6)
            filtered_results = self._filter_results_by_probability(search_results)
            logger.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {len(search_results)} -> {len(filtered_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è generate_excel
            converted_results = self._convert_search_results_to_new_format(filtered_results, user_intent)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å 18 –∫–æ–ª–æ–Ω–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ —Å 13
            return await self.excel_generator.generate_excel(
                search_results=converted_results,
                user_request=original_query
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def _convert_search_results_to_new_format(self, search_results: list, user_intent: dict) -> list:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ search_parts_direct –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è generate_excel"""
        converted_results = []
        
        # –ü–æ–ª—É—á–∞–µ–º items –∏–∑ user_intent –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è confidence –æ—Ç GPT
        items = user_intent.get('items', []) if user_intent.get('is_multiple_order') else [user_intent]
        
        for i, result in enumerate(search_results, 1):
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π item –∏–∑ GPT –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è confidence
            gpt_item = items[i-1] if i-1 < len(items) else {}
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            converted_result = {
                'order_position': i,
                'search_query': result.get('search_query', f"{gpt_item.get('type', '')} {gpt_item.get('diameter', '')}x{gpt_item.get('length', '')}".strip()),
                'diameter': result.get('diameter', ''),
                'length': result.get('length', ''),
                'material': result.get('material', ''),
                'coating': result.get('coating', ''),
                'requested_quantity': gpt_item.get('quantity', 1),
                'confidence': gpt_item.get('confidence', 0),  # ‚Üê –ë–µ—Ä–µ–º confidence –æ—Ç GPT
                'sku': result.get('sku', ''),
                'name': result.get('name', ''),
                'smart_probability': result.get('smart_probability', 0),
                'pack_size': result.get('pack_size', 0),
                'unit': result.get('unit', '—à—Ç')
            }
            converted_results.append(converted_result)
        
        return converted_results
    
    def _filter_results_by_probability(self, search_results: list) -> list:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–∏—Å–∫–ª—é—á–∞–µ—Ç –º–µ–Ω–µ–µ 0.3)"""
        if not search_results:
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é >= –ø–æ—Ä–æ–≥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        filtered_results = []
        for result in search_results:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º smart_probability (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç –ø–æ–∏—Å–∫–∞)
            smart_probability = result.get('smart_probability', 0)
            if smart_probability >= MIN_PROBABILITY_THRESHOLD:
                filtered_results.append(result)
                logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∫–ª—é—á–µ–Ω: {result.get('sku', 'N/A')} - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {smart_probability}%")
            else:
                logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω: {result.get('sku', 'N/A')} - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {smart_probability}% < 30%")
        
        logger.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(search_results)} -> {len(filtered_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å >= {MIN_PROBABILITY_THRESHOLD}%)")
        return filtered_results

    async def _send_rating_buttons(self, message, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —Å–ø—Ä–∞–≤–∏–ª—Å—è", callback_data=f"rating_good_{user_id}"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è", callback_data=f"rating_bad_{user_id}")
                ],
                [
                    InlineKeyboardButton("‚ö†Ô∏è –ù–µ —Å–æ–≤—Å–µ–º", callback_data=f"rating_partial_{user_id}"),
                    InlineKeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é", callback_data=f"rating_unknown_{user_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(
                "ü§ñ **–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:**\n\n–°–ø—Ä–∞–≤–∏–ª—Å—è –ª–∏ –±–æ—Ç —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º?",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏: {e}")

    async def handle_rating_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            callback_data = query.data
            if callback_data.startswith("rating_"):
                rating_type = callback_data.split("_")[1]  # good, bad, partial, unknown
                user_id = callback_data.split("_")[2]
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞: {rating_type}")
                
                # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                rating_messages = {
                    "good": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!",
                    "bad": "‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º.",
                    "partial": "‚ö†Ô∏è –ü–æ–Ω—è—Ç–Ω–æ, –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å.",
                    "unknown": "‚ùì –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!"
                }
                
                await query.edit_message_text(
                    rating_messages.get(rating_type, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!"),
                    reply_markup=None
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            try:
                await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏.")
            except:
                pass

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
full_handler = FullMessageHandler()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ webhook_app.py
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await full_handler.handle_message(update, context)

async def handle_rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    await full_handler.handle_rating_callback(update, context)
