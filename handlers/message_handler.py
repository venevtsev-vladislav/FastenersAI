"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å–Ω—ã–π pipeline
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes
from pipeline.message_processor import MessagePipeline
from shared.logging import get_logger, set_correlation_id
from shared.errors import MessageProcessingError, handle_service_error

logger = get_logger(__name__)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º correlation ID –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        correlation_id = set_correlation_id()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å–Ω—ã–π pipeline
            pipeline = MessagePipeline(bot=update.get_bot())
            result = await pipeline.process_message(update.message, context)
            
            if not result:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
            await processing_msg.edit_text("üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞
            import datetime
            current_time = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            if result.get('is_multiple_order'):
                request_type = "üìã –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑"
                request_summary = f"{len(result.get('results', []))} –ø–æ–∑–∏—Ü–∏–π"
            else:
                request_type = "üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                request_summary = result['query'][:50] + "..." if len(result['query']) > 50 else result['query']
            
            caption = f"{request_type}\n{request_summary}\n‚úÖ –ù–∞–π–¥–µ–Ω–æ: {result['total_results']} –ø–æ–∑–∏—Ü–∏–π\nüìÖ {current_time}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(result['excel_file'], 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_{user.id}.xlsx",
                    caption=caption
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if result.get('clarification_questions'):
                questions_text = "‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:\n" + "\n".join([f"‚Ä¢ {q}" for q in result['clarification_questions']])
                await update.message.reply_text(questions_text)
            
            await processing_msg.delete()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
        except Exception as e:
            error = handle_service_error(e, "message_processing")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {error}")
            
            await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except:
            pass


def _filter_results_by_confidence(results):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ï—Å–ª–∏ –µ—Å—Ç—å 100% ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 3)
    - –ï—Å–ª–∏ –Ω–µ—Ç 100%, –Ω–æ –µ—Å—Ç—å 90%+ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 5)
    - –ï—Å–ª–∏ –Ω–µ—Ç 90%, –Ω–æ –µ—Å—Ç—å 70%+ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 10)
    - –ï—Å–ª–∏ –≤—Å–µ –Ω–∏–∂–µ 70% ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
    """
    if not results:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
    sorted_results = sorted(results, key=lambda x: x.get('confidence_score', 0), reverse=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    max_confidence = sorted_results[0].get('confidence_score', 0)
    
    if max_confidence >= 100:
        # –ï—Å—Ç—å 100% - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 3)
        filtered = [r for r in sorted_results if r.get('confidence_score', 0) >= 100]
        return filtered[:3]
    
    elif max_confidence >= 90:
        # –ï—Å—Ç—å 90%+ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 5)
        filtered = [r for r in sorted_results if r.get('confidence_score', 0) >= 90]
        return filtered[:5]
    
    elif max_confidence >= 70:
        # –ï—Å—Ç—å 70%+ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 10)
        filtered = [r for r in sorted_results if r.get('confidence_score', 0) >= 70]
        return filtered[:10]
    
    else:
        # –í—Å–µ –Ω–∏–∂–µ 70% - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
        return sorted_results[:5]

