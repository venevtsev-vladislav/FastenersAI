"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å–Ω—ã–π pipeline
"""

import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from pipeline.message_processor import MessagePipeline
from services.media_processor import MediaProcessor
from services.file_processor import FileProcessor
from services.file_queue import file_queue
from shared.logging import get_logger, set_correlation_id
from shared.errors import MessageProcessingError, handle_service_error

logger = get_logger(__name__)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º correlation ID –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        correlation_id = set_correlation_id()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        message = update.message
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ (–ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏)
        if message.voice:
            await _handle_voice_as_text(update, context)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        if message.photo or message.document:
            await _handle_multiple_files(update, context)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await _handle_text_message(update, context)
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except:
            pass


def _filter_results_by_confidence(results):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ï—Å–ª–∏ –µ—Å—Ç—å 100% ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 3)
    - –ï—Å–ª–∏ –Ω–µ—Ç 100%, –Ω–æ –µ—Å—Ç—å 90%+ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 5)
    - –ï—Å–ª–∏ –Ω–µ—Ç 90%, –Ω–æ –µ—Å—Ç—å 70%+ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 10)
    - –ï—Å–ª–∏ –≤—Å–µ –Ω–∏–∂–µ 70% ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
    """
    if not results:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
    sorted_results = sorted(results, key=lambda x: x.get('confidence_score', 0), reverse=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    max_confidence = sorted_results[0].get('confidence_score', 0)
    
    if max_confidence >= 100:
        # –ï—Å—Ç—å 100% - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 3)
        filtered = [r for r in sorted_results if r.get('confidence_score', 0) >= 100]
        return filtered[:3]
    
    elif max_confidence >= 90:
        # –ï—Å—Ç—å 90%+ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 5)
        filtered = [r for r in sorted_results if r.get('confidence_score', 0) >= 90]
        return filtered[:5]
    
    elif max_confidence >= 70:
        # –ï—Å—Ç—å 70%+ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–º–∞–∫—Å–∏–º—É–º 10)
        filtered = [r for r in sorted_results if r.get('confidence_score', 0) >= 70]
        return filtered[:10]
    
    else:
        # –í—Å–µ –Ω–∏–∂–µ 70% - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
        return sorted_results[:5]


async def _handle_voice_as_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ (–ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏)"""
    try:
        message = update.message
        user = update.effective_user
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.reply_text("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–µ–¥–∏–∞
        media_processor = MediaProcessor()
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            media_result = await media_processor.process_media_message(message, context)
            
            if not media_result or media_result.get('error'):
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç Speech-to-Text
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            transcribed_text = "–ê–Ω–∫–µ—Ä –∑–∞–±–∏–≤–∞–µ–º—ã–π –ú6"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            await processing_msg.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{transcribed_text}'\n\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.text = transcribed_text
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            await _handle_text_message(update, context, processing_msg)
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            media_processor.cleanup_temp_files()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except:
            pass


async def _handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE, processing_msg=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        if not processing_msg:
            processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        await processing_msg.edit_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò
        logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: '{update.message.text[:100]}...'")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å–Ω—ã–π pipeline
        pipeline = MessagePipeline(bot=update.get_bot())
        result = await pipeline.process_message(update.message, context)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò –∞–Ω–∞–ª–∏–∑–∞
        if result:
            logger.info(f"‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: –Ω–∞–π–¥–µ–Ω–æ {result.get('total_results', 0)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            logger.error(f"‚ùå –ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        
        if not result:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await processing_msg.edit_text("üîç –ò—â—É –¥–µ—Ç–∞–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç—Ç–∞–ø–∞
        import asyncio
        await asyncio.sleep(0.5)
        
        # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ Excel
        await processing_msg.edit_text("üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if result.get('is_multiple_order'):
            request_type = "üìã –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑"
            request_summary = f"{len(result.get('results', []))} –ø–æ–∑–∏—Ü–∏–π"
        else:
            request_type = "üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
            request_summary = result['query'][:50] + "..." if len(result['query']) > 50 else result['query']
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        summary = result.get('summary', {})
        user = update.effective_user
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary_text = f"""üìã **–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É**

üìä **–í –∑–∞–ø—Ä–æ—Å–µ:** {summary.get('total_requested', 0)} –ø–æ–∑–∏—Ü–∏–π
‚úÖ **–ù–∞–π–¥–µ–Ω–æ:** {summary.get('total_found', 0)} –ø–æ–∑–∏—Ü–∏–π
‚ùå **–ù–µ –Ω–∞–π–¥–µ–Ω–æ:** {summary.get('total_not_found', 0)} –ø–æ–∑–∏—Ü–∏–π
üìà **–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:** {summary.get('avg_probability', 0)}%

üìÖ **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {current_time}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(result['excel_file'], 'rb') as f:
            await update.message.reply_document(
                document=f,
                filename=f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_{user.id}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
                caption=summary_text,
                parse_mode='Markdown'
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —Å–ø—Ä–∞–≤–∏–ª—Å—è", callback_data=f"rating_good_{user.id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è", callback_data=f"rating_bad_{user.id}")
            ],
            [
                InlineKeyboardButton("‚ö†Ô∏è –ù–µ —Å–æ–≤—Å–µ–º", callback_data=f"rating_partial_{user.id}"),
                InlineKeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é", callback_data=f"rating_unknown_{user.id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:**\n\n–°–ø—Ä–∞–≤–∏–ª—Å—è –ª–∏ –±–æ—Ç —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        await processing_msg.delete()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if processing_msg:
            await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


async def _handle_media_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å, –¥–æ–∫—É–º–µ–Ω—Ç—ã)"""
    try:
        message = update.message
        user = update.effective_user
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–µ–¥–∏–∞ —Ñ–∞–π–ª...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if message.photo:
            await processing_msg.edit_text("üì∏ –°–∫–∞—á–∏–≤–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
        elif message.voice:
            await processing_msg.edit_text("üé§ –°–∫–∞—á–∏–≤–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        elif message.document:
            await processing_msg.edit_text("üìÑ –°–∫–∞—á–∏–≤–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–µ–¥–∏–∞
        media_processor = MediaProcessor()
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            media_result = await media_processor.process_media_message(message, context)
            
            if not media_result:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            if media_result.get('error'):
                await processing_msg.edit_text(f"‚ùå {media_result['error']}")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if media_result['type'] == 'photo':
                await _handle_photo_result(update, context, media_result, processing_msg)
            elif media_result['type'] == 'voice':
                await _handle_voice_result(update, context, media_result, processing_msg)
            elif media_result['type'] == 'document':
                await _handle_document_result(update, context, media_result, processing_msg)
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            media_processor.cleanup_temp_files()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞.")
        except:
            pass


async def _handle_photo_result(update: Update, context: ContextTypes.DEFAULT_TYPE, media_result: dict, processing_msg):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ"""
    try:
        await processing_msg.edit_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–æ—Ç–æ: {e}")

async def handle_rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    callback_data = query.data
    if callback_data.startswith("rating_"):
        rating_type = callback_data.split("_")[1]  # good, bad, partial, unknown
        user_id = callback_data.split("_")[2]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞: {rating_type}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        rating_messages = {
            "good": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!",
            "bad": "‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º.",
            "partial": "‚ö†Ô∏è –ü–æ–Ω—è—Ç–Ω–æ, –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å.",
            "unknown": "‚ùì –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!"
        }
        
        await query.edit_message_text(
            rating_messages.get(rating_type, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!"),
            reply_markup=None
        )

async def _handle_voice_result(update: Update, context: ContextTypes.DEFAULT_TYPE, media_result: dict, processing_msg):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await processing_msg.edit_text("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏.")
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å Speech-to-Text –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def _handle_document_result(update: Update, context: ContextTypes.DEFAULT_TYPE, media_result: dict, processing_msg):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        file_name = media_result.get('file_name', '–¥–æ–∫—É–º–µ–Ω—Ç')
        file_size = media_result.get('file_size', 0)
        file_extension = media_result.get('file_extension', '')
        
        await processing_msg.edit_text(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –ø–æ–ª—É—á–µ–Ω! –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.")
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ Excel/PDF —Ñ–∞–π–ª–æ–≤
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

async def _handle_multiple_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å"""
    try:
        user = update.effective_user
        chat_id = update.effective_chat.id
        message = update.message
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        files = []
        if message.photo:
            files.append(message)
        if message.document:
            files.append(message)
        
        if not files:
            await message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å
        status_msg = await message.reply_text("üîÑ –î–æ–±–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        queue_status = await file_queue.add_files(user.id, chat_id, files)
        await status_msg.edit_text(f"‚úÖ {queue_status}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        asyncio.create_task(_auto_process_files(user.id, context))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_multiple_files: {e}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.")
        except:
            pass

async def _handle_multiple_files_result(update: Update, context: ContextTypes.DEFAULT_TYPE, result: dict, processing_msg):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        total_files = result.get('total_files', 0)
        processed_files = result.get('processed_files', 0)
        failed_files = result.get('failed_files', 0)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        summary_text = f"""üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤**

üìä **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {total_files}
‚úÖ **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {processed_files}
‚ùå **–û—à–∏–±–æ–∫:** {failed_files}

üìÖ **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
        await processing_msg.edit_text(summary_text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, file_result in enumerate(result.get('results', []), 1):
            if file_result.get('type') == 'error':
                await update.message.reply_text(f"‚ùå **–§–∞–π–ª {i}:** {file_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                file_type = file_result.get('type', 'unknown')
                file_name = file_result.get('file_name', f'–§–∞–π–ª {i}')
                
                if file_type == 'document':
                    file_extension = file_result.get('file_extension', '')
                    if file_extension in ['.xlsx', '.xls']:
                        await _handle_excel_result(update, context, file_result, i)
                    elif file_extension == '.pdf':
                        await update.message.reply_text(f"üìÑ **–§–∞–π–ª {i}:** {file_name} - PDF —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω (–ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
                    else:
                        await update.message.reply_text(f"üìÑ **–§–∞–π–ª {i}:** {file_name} - —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω")
                elif file_type == 'photo':
                    await update.message.reply_text(f"üì∏ **–§–∞–π–ª {i}:** –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (OCR –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        await file_queue.clear_queue(update.effective_user.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        try:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        except:
            pass

async def _handle_excel_result(update: Update, context: ContextTypes.DEFAULT_TYPE, file_result: dict, file_number: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Excel —Ñ–∞–π–ª–∞"""
    try:
        file_name = file_result.get('file_name', f'–§–∞–π–ª {file_number}')
        parsed_content = file_result.get('parsed_content')
        
        if not parsed_content:
            await update.message.reply_text(f"üìä **–§–∞–π–ª {file_number}:** {file_name} - Excel —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ Excel —Ñ–∞–π–ª—É
        sheets_info = []
        for sheet_name, sheet_data in parsed_content.get('sheets', {}).items():
            rows, cols = sheet_data.get('shape', (0, 0))
            sheets_info.append(f"‚Ä¢ **{sheet_name}:** {rows} —Å—Ç—Ä–æ–∫, {cols} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        excel_summary = f"""üìä **–§–∞–π–ª {file_number}:** {file_name}

üìã **–õ–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ:**
{chr(10).join(sheets_info)}

üìà **–í—Å–µ–≥–æ –ª–∏—Å—Ç–æ–≤:** {parsed_content.get('total_sheets', 0)}"""
        
        await update.message.reply_text(excel_summary)
        
        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö Excel —á–µ—Ä–µ–∑ pipeline
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –∏ –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–º
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        try:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞ {file_number}")
        except:
            pass

async def _auto_process_files(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    try:
        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
        await asyncio.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        if user_id in file_queue.queue:
            queue_item = file_queue.queue[user_id]
            if queue_item.status == 'pending':
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                result = await file_queue.process_queue(user_id, context)
                
                if result:
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ process_queue
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã."
                    )
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤."
            )
        except:
            pass

