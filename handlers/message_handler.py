"""
–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""

import logging
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from services.message_processor import MessageProcessor
from services.excel_generator import ExcelGenerator
from database.supabase_client import save_user_request
from utils.logger import setup_logging

logger = logging.getLogger(__name__)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        processor = MessageProcessor(bot=update.get_bot())
        result = await processor.process_message(update.message)
        
        if not result:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
        await save_user_request(
            user_id=user.id,
            chat_id=chat_id,
            request_type=result['type'],
            original_content=result['original_content'],
            processed_text=result['processed_text'],
            user_intent=result['user_intent']
        )
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ Supabase + GPT –∞–Ω–∞–ª–∏–∑
        await processing_msg.edit_text("üîç –ò—â—É –¥–µ—Ç–∞–ª–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT –∞–Ω–∞–ª–∏–∑ + Supabase –ø–æ–∏—Å–∫
        from database.supabase_client import search_parts
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ GPT –∞–Ω–∞–ª–∏–∑
        if not result.get('user_intent'):
            # Fallback: –µ—Å–ª–∏ GPT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—â–µ–º –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É
            logger.warning("GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–∏—Å–∫")
            search_results = await search_parts(
                query=result['processed_text'],
                user_intent={}
            )
            
            # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ò–ò
            if not search_results:
                logger.info("üîç –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ–±—Ä–∞—â–∞—é—Å—å –∫ –ò–ò –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è...")
                await processing_msg.edit_text("ü§î –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –û–±—Ä–∞—â–∞—é—Å—å –∫ –ò–ò –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è...")
                
                from services.query_fallback_service import QueryFallbackService
                fallback_service = QueryFallbackService()
                fallback_result = await fallback_service.process_failed_query(
                    original_query=result['processed_text'],
                    search_results=search_results
                )
                
                if fallback_result.get('can_normalize'):
                    # –ò–ò —Å–º–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    normalized_query = fallback_result['normalized_query']
                    logger.info(f"üîÑ –ü—Ä–æ–±—É—é –ø–æ–∏—Å–∫ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º: {normalized_query}")
                    
                    await processing_msg.edit_text(f"üîÑ –ü—Ä–æ–±—É—é –ø–æ–∏—Å–∫ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º...")
                    search_results = await search_parts(
                        query=normalized_query,
                        user_intent={}
                    )
                    
                    if search_results:
                        logger.info(f"‚úÖ –ü–æ–∏—Å–∫ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–ª {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                        for search_result in search_results:
                            search_result['is_normalized'] = True
                            search_result['original_query'] = result['processed_text']
                            search_result['normalized_query'] = normalized_query
                    else:
                        logger.warning("‚ùå –î–∞–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
                        user_message = fallback_service.get_user_friendly_message(fallback_result)
                        await update.message.reply_text(user_message)
                        await processing_msg.delete()
                        return
                else:
                    # –ò–ò –Ω–µ —Å–º–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.warning("‚ùå –ò–ò –Ω–µ —Å–º–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
                    user_message = fallback_service.get_user_friendly_message(fallback_result)
                    await update.message.reply_text(user_message)
                    await processing_msg.delete()
                    return
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            if result['user_intent'].get('is_multiple_order') and result['user_intent'].get('items'):
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ {len(result['user_intent']['items'])} –ø–æ–∑–∏—Ü–∏–π")
                
                # –ò—â–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
                all_results = []
                position_results = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
                
                for i, item in enumerate(result['user_intent']['items']):
                    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
                    search_query_parts = []
                    if item.get('type'):
                        search_query_parts.append(item['type'])
                    if item.get('diameter'):
                        # –£–ø—Ä–æ—â–∞–µ–º –¥–∏–∞–º–µ—Ç—Ä: "6 –º–º" -> "6", "M6" -> "M6"
                        diameter = item['diameter']
                        if '–º–º' in diameter:
                            diameter = diameter.replace(' –º–º', '')
                        search_query_parts.append(diameter)
                    
                    if item.get('standard'):
                        search_query_parts.append(item['standard'])
                    
                    if item.get('grade'):
                        search_query_parts.append(item['grade'])
                    
                    item_query = ' '.join(search_query_parts).strip()
                    if not item_query:
                        item_query = item.get('type', '')  # Fallback –Ω–∞ —Ç–∏–ø –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–±—Ä–∞–ª–∏
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
                    full_item_query = ' '.join([
                        item.get('type', ''),
                        item.get('standard', ''),
                        item.get('diameter', ''),
                        item.get('length', ''),
                        item.get('material', ''),
                        item.get('coating', ''),
                        item.get('grade', '')
                    ]).strip()
                    
                    logger.info(f"üîç –ü–æ–∑–∏—Ü–∏—è {i+1}:")
                    logger.info(f"   üìù –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {full_item_query}")
                    logger.info(f"   üîé –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {item_query}")
                    logger.info(f"   üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ç–∏–ø={item.get('type')}, —Å—Ç–∞–Ω–¥–∞—Ä—Ç={item.get('standard')}, –¥–∏–∞–º–µ—Ç—Ä={item.get('diameter')}, –¥–ª–∏–Ω–∞={item.get('length')}, –º–∞—Ç–µ—Ä–∏–∞–ª={item.get('material')}, –ø–æ–∫—Ä—ã—Ç–∏–µ={item.get('coating')}, –∫–ª–∞—Å—Å={item.get('grade')}")
                    logger.info(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get('quantity', 1)}")
                    
                    # –ò—â–µ–º –¥–µ—Ç–∞–ª—å
                    logger.info(f"   üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –¥–ª—è: {item_query}")
                    item_results = await search_parts(
                        query=item_query,
                        user_intent=item
                    )
                    
                    logger.info(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(item_results)}")
                    if item_results:
                        logger.info(f"   ‚úÖ –ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                        for j, result_item in enumerate(item_results[:3]):
                            logger.info(f"      {j+1}. SKU: {result_item.get('sku')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {result_item.get('name')}")
                    else:
                        logger.warning(f"   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {item_query}")
                        # –°–æ–∑–¥–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
                        fallback_result = {
                            'sku': '–ù–ï –ù–ê–ô–î–ï–ù–û',
                            'name': '–î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
                            'type': '–ù/–î',
                            'pack_size': 0,
                            'unit': '—à—Ç',
                            'requested_quantity': item.get('quantity', 1),
                            'order_position': i + 1,
                            'search_query': item_query,
                            'full_query': full_item_query,
                            'original_position': i + 1,
                            'confidence_score': 0,
                            'match_reason': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                        }
                        position_results[i + 1] = [fallback_result]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
                    if item_results:
                        for item_result in item_results:
                            item_result['requested_quantity'] = item.get('quantity', 1)
                            item_result['order_position'] = i + 1
                            item_result['search_query'] = item_query  # –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
                            item_result['full_query'] = full_item_query  # –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è Excel
                            item_result['original_position'] = i + 1  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –∑–∞–∫–∞–∑–µ
                        
                        position_results[i + 1] = item_results
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ–∑–∏—Ü–∏–π
                for position in sorted(position_results.keys()):
                    all_results.extend(position_results[position])
                
                search_results = all_results
                logger.info(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                search_results = await search_parts(
                    query=result['processed_text'],
                    user_intent=result['user_intent']
                )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (–∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏)
        try:
            from services.algorithmic_confidence import AlgorithmicConfidenceAnalyzer
            confidence_analyzer = AlgorithmicConfidenceAnalyzer()
            search_results = confidence_analyzer.analyze_confidence(
                user_query=result['processed_text'],
                search_results=search_results
            )
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
            
        except Exception as e2:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {e2}")
        
        if not search_results:
            await processing_msg.edit_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏
        await processing_msg.edit_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ Excel –∏ —É–ª—É—á—à–∞—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
        try:
            from services.cyclic_validation_service import CyclicValidationService
            validation_service = CyclicValidationService()
            validation_result = await validation_service.cyclic_validate_and_improve(
                original_request=result['processed_text'],
                search_results=search_results
            )
            
            logger.info(f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ò–ò: {validation_result.get('status')} - {validation_result.get('message', '')[:100]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤–∫–ª—é—á–∞—è —É–ª—É—á—à–µ–Ω–Ω—ã–µ)
            if validation_result.get('final_results'):
                search_results = validation_result['final_results']
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(search_results)} –ø–æ–∑–∏—Ü–∏–π")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞
            validation_status = validation_result.get('status', 'UNKNOWN')
            for search_result in search_results:
                search_result['validation_status'] = validation_status
            
        except Exception as e3:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ò–ò: {e3}")
            validation_result = {
                "status": "ERROR",
                "message": "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                "confidence": 0.0
            }
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            for search_result in search_results:
                search_result['validation_status'] = 'ERROR'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        await processing_msg.edit_text("üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏...")
        
        excel_generator = ExcelGenerator()
        excel_file = await excel_generator.generate_excel(
            search_results=search_results,
            user_request=result['processed_text']
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_status = validation_result.get('status', 'UNKNOWN')
        
        if validation_status == "APPROVED":
            # –í—Å–µ —Ö–æ—Ä–æ—à–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await processing_msg.edit_text("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            with open(excel_file, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_{user.id}.xlsx",
                    caption=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {result['processed_text']}\n\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n–ù–∞–π–¥–µ–Ω–æ: {len(search_results)} –¥–µ—Ç–∞–ª–µ–π"
                )
            
            await processing_msg.delete()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
            
        elif validation_status == "NEEDS_REFINEMENT":
            # –ù—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            await processing_msg.edit_text("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            with open(excel_file, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_{user.id}.xlsx",
                    caption=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {result['processed_text']}\n\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞\n–ù–∞–π–¥–µ–Ω–æ: {len(search_results)} –¥–µ—Ç–∞–ª–µ–π"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            validation_summary = validation_service.get_validation_summary(validation_result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–∏–∫–ª–∞—Ö
            cycles = validation_result.get('cycles_completed', 0)
            if cycles > 0:
                cycles_info = f"\n\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {cycles}"
                if validation_result.get('max_cycles_reached'):
                    cycles_info += " (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç)"
                validation_summary += cycles_info
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
            clarification_questions = validation_service.generate_clarification_questions(validation_result)
            if clarification_questions:
                questions_text = "\n\n‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:\n" + "\n".join([f"‚Ä¢ {q}" for q in clarification_questions])
                validation_summary += questions_text
            
            await update.message.reply_text(validation_summary)
            
            await processing_msg.delete()
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            
        elif validation_status == "NEEDS_CLARIFICATION":
            # –ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
            await processing_msg.edit_text("‚ùì –ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            with open(excel_file, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_{user.id}.xlsx",
                    caption=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {result['processed_text']}\n\n‚ùì –¢—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è\n–ù–∞–π–¥–µ–Ω–æ: {len(search_results)} –¥–µ—Ç–∞–ª–µ–π"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —É—Ç–æ—á–Ω–µ–Ω–∏–π
            validation_summary = validation_service.get_validation_summary(validation_result)
            await update.message.reply_text(
                f"{validation_summary}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."
            )
            
            await processing_msg.delete()
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - —Ç—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è")
            
        else:
            # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            await processing_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            with open(excel_file, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_{user.id}.xlsx",
                    caption=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {result['processed_text']}\n\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π\n–ù–∞–π–¥–µ–Ω–æ: {len(search_results)} –¥–µ—Ç–∞–ª–µ–π"
                )
            
            await processing_msg.delete()
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except:
            pass

