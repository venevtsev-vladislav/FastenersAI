#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: DIN 603 –í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 6 √ó 40 Zn ‚Äî 200 —à—Ç
"""

import asyncio
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_specific_query():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å: DIN 603 –í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 6 √ó 40 Zn ‚Äî 200 —à—Ç")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from database.supabase_client import search_parts
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_query = "DIN 603 –í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 6 √ó 40 Zn ‚Äî 200 —à—Ç"
        
        print(f"üìù –ó–∞–ø—Ä–æ—Å: {test_query}")
        print("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await search_parts(
            query=test_query,
            user_intent={}
        )
        
        if not results:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for i, result in enumerate(results[:5], 1):
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç {i}:")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('name', 'N/A')}")
            print(f"   SKU: {result.get('sku', 'N/A')}")
            print(f"   probability_percent: {result.get('probability_percent', 'N/A')}%")
            print(f"   relevance_score: {result.get('relevance_score', 'N/A')}")
            print(f"   match_reason: {result.get('match_reason', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º explanation
            explanation = result.get('explanation', '')
            if explanation:
                print(f"   explanation:")
                for line in explanation.split('\n'):
                    if line.strip():
                        print(f"     {line}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º matched_tokens
            matched_tokens = result.get('matched_tokens', [])
            if matched_tokens:
                print(f"   matched_tokens: {matched_tokens}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º
        probabilities = [r.get('probability_percent', 0) for r in results]
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(probabilities)}%")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(probabilities)}%")
        print(f"   –°—Ä–µ–¥–Ω—è—è: {sum(probabilities) / len(probabilities):.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        print(f"\nüîç –û–∂–∏–¥–∞–µ–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è 'DIN 603 –í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 6 √ó 40 Zn':")
        print(f"   ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç DIN: DIN 603 (40% –≤–µ—Å–∞)")
        print(f"   ‚úÖ –¢–∏–ø –¥–µ—Ç–∞–ª–∏: –í–∏–Ω—Ç (25% –≤–µ—Å–∞)")
        print(f"   ‚úÖ –†–∞–∑–º–µ—Ä—ã: 6 √ó 40 (30% –≤–µ—Å–∞)")
        print(f"   ‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ: Zn (15% –≤–µ—Å–∞)")
        print(f"   üéØ –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç + —Ä–∞–∑–º–µ—Ä—ã: +15%")
        print(f"   üéØ –ë–æ–Ω—É—Å –∑–∞ —Ç–∏–ø + —Ä–∞–∑–º–µ—Ä—ã: +10%")
        print(f"   üéØ –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: +20%")
        print(f"   üìä –û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ~100% (40+25+30+15+15+10+20 = 155%, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 100%)")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_specific_query())
