#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ–ª–æ—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "–°–∞–º–æ—Ä–µ–∑ 4,2-25"
–ü—Ä–æ—Ö–æ–¥–∏—Ç –≤–µ—Å—å pipeline: GPT –ø–∞—Ä—Å–∏–Ω–≥ ‚Üí Supabase –ø–æ–∏—Å–∫ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
"""

import asyncio
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from pipeline.message_processor import MessagePipeline
from services.excel_generator import ExcelGenerator

async def test_full_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '–°–∞–º–æ—Ä–µ–∑ 4,2-25'"""
    
    print("üîç –ü–û–õ–ù–´–ô –¢–ï–°–¢ –§–õ–û–£: '–°–∞–º–æ—Ä–µ–∑ 4,2-25'")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    test_query = "–°–∞–º–æ—Ä–µ–∑ 4,2-25"
    user_id = 12345
    
    try:
        # –°–æ–∑–¥–∞–µ–º pipeline (–±–µ–∑ bot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        pipeline = MessagePipeline(bot=None)
        
        print("‚úÖ Pipeline —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{test_query}'")
        print(f"üë§ User ID: {user_id}")
        
        # –≠–¢–ê–ü 1: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n" + "="*60)
        print("üîç –≠–¢–ê–ü 1: –ü–ê–†–°–ò–ù–ì –ò –ù–û–†–ú–ê–õ–ò–ó–ê–õ–ò–ó–ê–¶–ò–Ø")
        print("="*60)
        
        # –°–æ–∑–¥–∞–µ–º mock Message –æ–±—ä–µ–∫—Ç
        from unittest.mock import Mock
        mock_message = Mock()
        mock_message.text = test_query
        mock_message.from_user.id = user_id
        mock_message.chat.id = user_id
        
        normalized_result = await pipeline._parse_and_normalize(mock_message)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {normalized_result.get('processed_text', 'N/A')}")
        print(f"  - User intent: {json.dumps(normalized_result.get('user_intent', {}), ensure_ascii=False, indent=2)}")
        print(f"  - Confidence: {normalized_result.get('confidence', 'N/A')}")
        
        # –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("\n" + "="*60)
        print("üîç –≠–¢–ê–ü 2: –ü–û–ò–°–ö –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        print("="*60)
        
        search_results = await pipeline._search_database(normalized_result)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:")
        print(f"  - –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_results)}")
        
        if search_results:
            print(f"  - –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
            first_result = search_results[0]
            for key, value in first_result.items():
                print(f"    {key}: {value}")
        else:
            print("  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return False
        
        # –≠–¢–ê–ü 3: –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*60)
        print("üîç –≠–¢–ê–ü 3: –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("="*60)
        
        ranked_results = await pipeline._rank_results(search_results, normalized_result)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"  - –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(ranked_results)}")
        
        # –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
        print("\n" + "="*60)
        print("üîç –≠–¢–ê–ü 4: –ì–ï–ù–ï–†–ê–¶–ò–Ø EXCEL")
        print("="*60)
        
        excel_file = await pipeline._generate_excel(ranked_results, normalized_result)
        
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_file}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(excel_file)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞
        from openpyxl import load_workbook
        wb = load_workbook(excel_file)
        ws = wb.active
        
        print(f"\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï EXCEL –§–ê–ô–õ–ê:")
        print(f"  - –õ–∏—Å—Ç: {ws.title}")
        print(f"  - –°—Ç—Ä–æ–∫: {ws.max_row}")
        print(f"  - –ö–æ–ª–æ–Ω–æ–∫: {ws.max_column}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        print(f"\nüìù –ó–ê–ì–û–õ–û–í–ö–ò:")
        for col in range(1, ws.max_column + 1):
            header = ws.cell(row=1, column=col).value
            print(f"  {col:2d}: {header}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"\nüìä –î–ê–ù–ù–´–ï:")
        for row in range(2, ws.max_row + 1):
            print(f"  –°—Ç—Ä–æ–∫–∞ {row}:")
            for col in range(1, ws.max_column + 1):
                value = ws.cell(row=row, column=col).value
                print(f"    {col:2d}: {value}")
        
        # –≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        print("\n" + "="*60)
        print("üîç –≠–¢–ê–ü 5: –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê")
        print("="*60)
        
        final_result = await pipeline._finalize_results(ranked_results, excel_file, normalized_result)
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  - Excel —Ñ–∞–π–ª: {final_result.get('excel_file', 'N/A')}")
        print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {final_result.get('results_count', 'N/A')}")
        print(f"  - –°—Ç–∞—Ç—É—Å: {final_result.get('status', 'N/A')}")
        
        print("\n" + "="*60)
        print("üéâ –ü–û–õ–ù–´–ô –§–õ–û–£ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("="*60)
        
        return True
        
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê –í –§–õ–û–£: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_excel_generator_directly():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel –Ω–∞–ø—Ä—è–º—É—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("\n" + "="*60)
    print("üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: –ì–ï–ù–ï–†–ê–¢–û–† EXCEL –ù–ê–ü–†–Ø–ú–£–Æ")
    print("="*60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
    test_search_results = [
        {
            "order_position": 1,
            "search_query": "—Å–∞–º–æ—Ä–µ–∑ 4,2-25",
            "diameter": "4.2",
            "length": "25",
            "material": "—Å—Ç–∞–ª—å",
            "coating": "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "requested_quantity": 100,
            "confidence": 0.95,
            "sku": "10-0010040",
            "name": "–°–∞–º–æ—Ä–µ–∑ –®–°–ú–ú –ê–†–¢ 9999 A2 4,2X25",
            "smart_probability": 0.92,
            "pack_size": 300,
            "unit": "—à—Ç"
        }
    ]
    
    user_request = "–°–∞–º–æ—Ä–µ–∑ 4,2-25"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel
        excel_generator = ExcelGenerator()
        
        print("‚úÖ Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_search_results)} –ø–æ–∑–∏—Ü–∏–π")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        excel_file = await excel_generator.generate_excel(
            search_results=test_search_results,
            user_request=user_request
        )
        
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_file}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(excel_file)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        from openpyxl import load_workbook
        wb = load_workbook(excel_file)
        ws = wb.active
        
        print(f"\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï EXCEL –§–ê–ô–õ–ê:")
        print(f"  - –õ–∏—Å—Ç: {ws.title}")
        print(f"  - –°—Ç—Ä–æ–∫: {ws.max_row}")
        print(f"  - –ö–æ–ª–æ–Ω–æ–∫: {ws.max_column}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        print(f"\nüìù –ó–ê–ì–û–õ–û–í–ö–ò:")
        for col in range(1, ws.max_column + 1):
            header = ws.cell(row=1, column=col).value
            print(f"  {col:2d}: {header}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"\nüìä –î–ê–ù–ù–´–ï:")
        for row in range(2, ws.max_row + 1):
            print(f"  –°—Ç—Ä–æ–∫–∞ {row}:")
            for col in range(1, ws.max_column + 1):
                value = ws.cell(row=row, column=col).value
                print(f"    {col:2d}: {value}")
        
        return True
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ñ–ª–æ—É...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async def run_tests():
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é
        direct_test = await test_excel_generator_directly()
        
        # –ó–∞—Ç–µ–º –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É
        full_test = await test_full_flow()
        
        return direct_test and full_test
    
    result = asyncio.run(run_tests())
    
    if result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•!")
    
    sys.exit(0 if result else 1)
