#!/usr/bin/env python3
"""
FastenersAI Bot - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Railway
–° health check endpoint
"""

import os
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.ext import ContextTypes
from fastapi import FastAPI
import uvicorn
import asyncio
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏ webhook URL
PORT = int(os.getenv('PORT', 8000))
WEBHOOK_BASE = os.getenv('WEBHOOK_BASE', 'https://fastenersai-production.up.railway.app')
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check
app = FastAPI()

@app.get("/")
async def health_check():
    """Health check endpoint –¥–ª—è Railway"""
    return {"status": "FastenersAI Bot is running! üöÄ", "webhook_url": WEBHOOK_URL}

@app.get("/health")
async def health():
    """Health check endpoint"""
    return {"status": "healthy", "bot": "FastenersAI"}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üöÄ **FastenersAI Bot** –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∫—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ –∫—Ä–µ–ø–µ–∂–∞."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
        "üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–ø–µ–∂–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞."
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    await update.message.reply_text(
        "‚úÖ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n"
        "üü¢ –û–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
        "üåê –†–µ–∂–∏–º: Webhook\n"
        "üîß –í–µ—Ä—Å–∏—è: Lightweight (–±–µ–∑ NumPy/Pandas)\n"
        "üì° –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    user_id = update.from_user.id
    username = update.from_user.username or "Unknown"
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({user_id}): {user_message}")
    
    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
    response = (
        f"ü§ñ **–ü–æ–ª—É—á–µ–Ω–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n"
        f"üìù {user_message}\n\n"
        f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–µ–≥–∫–æ–º —Ä–µ–∂–∏–º–µ.\n"
        f"–ü–æ–ª–Ω–∞—è AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.\n\n"
        f"üîß **–°—Ç–∞—Ç—É—Å:** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞."
    )
    
    await update.message.reply_text(response)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
    user_id = update.from_user.id
    username = update.from_user.username or "Unknown"
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {username} ({user_id})")
    
    response = (
        f"üì∏ **–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"
        f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–µ–≥–∫–æ–º —Ä–µ–∂–∏–º–µ.\n"
        f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.\n\n"
        f"üîß **–°—Ç–∞—Ç—É—Å:** –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞."
    )
    
    await update.message.reply_text(response)

def run_fastapi():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    uvicorn.run(app, host="0.0.0.0", port=PORT, log_level="info")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ FastenersAI Bot (Lightweight –≤–µ—Ä—Å–∏—è)")
        logger.info(f"–ü–æ—Ä—Ç: {PORT}")
        logger.info(f"Webhook URL: {WEBHOOK_URL}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # –ó–∞–ø—É—Å–∫ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        fastapi_thread = Thread(target=run_fastapi, daemon=True)
        fastapi_thread.start()
        
        # –ó–∞–ø—É—Å–∫ webhook
        logger.info("–ó–∞–ø—É—Å–∫ webhook...")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT + 1,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –¥–ª—è webhook
            url_path=WEBHOOK_PATH,
            webhook_url=WEBHOOK_URL
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
