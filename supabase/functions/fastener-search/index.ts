import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type"
};

// ---------- utils ----------
function escapeSqlLike(v) {
  return (v || "").replace(/[%_\\]/g, "\\$&");
}

function normalizeStr(s) {
  if (!s) return "";
  return s.toLowerCase().trim()
    .replace(/[√ó—Öx]/g, "x") // √ó/—Ö/x -> x
    .replace(/\s+/g, " ")
    .replace(/din\s*([0-9]+)/g, (_m, p1) => `din${p1}`)
    .replace(/–æ—Ü–∏–Ω–∫[–∞-—è]*/g, "—Ü–∏–Ω–∫");
}

function canonDiameter(d) {
  return d ? d.replace(/\s*–º–º$/i, "").toUpperCase().replace(/^–ú/, "M") : "";
}

function canonLength(l) {
  return l ? l.replace(/\s*–º–º$/i, "") : "";
}

function mxlVariants(d, l) {
  const D = canonDiameter(d), L = canonLength(l);
  if (!D || !L) return [];
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–≥–æ–ª–∫–æ–≤ (—Ñ–æ—Ä–º–∞—Ç 50x50x40)
  if (D.includes('x') && !D.startsWith('M')) {
    // –≠—Ç–æ —É–≥–æ–ª–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    const xs = ["x", "—Ö", "√ó"];
    const out = [];
    for (const X of xs) {
      out.push(D.replace(/x/g, X), D.replace(/—Ö/g, X), D.replace(/√ó/g, X));
    }
    return Array.from(new Set(out));
  }
  
  // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–ª—Ç–æ–≤/–≤–∏–Ω—Ç–æ–≤
  const dLat = D, dCyr = D.replace(/^M/, "–ú");
  const xs = ["x", "—Ö", "√ó", "-"];
  const out = [];
  
  for (const X of xs) {
    out.push(`${dLat}${X}${L}`, `${dLat} ${X} ${L}`, `${dCyr}${X}${L}`, `${dCyr} ${X} ${L}`);
  }
  out.push(`${dLat}${L}`, `${dCyr}${L}`);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ –¥–∏–∞–º–µ—Ç—Ä –¥–µ—Å—è—Ç–∏—á–Ω—ã–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä. 4.2 -> 2x90)
  const decimalMatch = D.match(/^(\d+)[\.,](\d+)$/);
  if (decimalMatch) {
    const fractional = decimalMatch[2];
    const altTokens = [
      `${fractional}x${L}`,
      `${fractional} x ${L}`,
      `${fractional}—Ö${L}`,
      `${fractional} —Ö ${L}`,
      `${fractional}√ó${L}`,
      `${fractional} √ó ${L}`
    ];
    out.push(...altTokens);
  }
  
  return Array.from(new Set(out));
}

// ---------- –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï ----------

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface MatchAnalysis {
  type_match: boolean;
  standard_match: boolean;
  size_match: boolean;
  coating_match: boolean;
  matched_tokens: string[];
  explanation: string[];
}

interface ProbabilityData {
  probability: number;
  explanation: string;
}

interface RankingTokens {
  typeTok: string | null;
  stdToks: string[];
  mxlToks: string[];
  coatToks: string[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
function getMatchReason(name: string, tokens: RankingTokens): string {
  const n = normalizeStr(name);
  
  if (tokens.typeTok && n.includes(tokens.typeTok) && 
      tokens.mxlToks.some(t => n.includes(normalizeStr(t)))) {
    return '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤';
  }
  
  if (tokens.typeTok && n.includes(tokens.typeTok)) {
    return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏';
  }
  
  if (tokens.stdToks.some(t => n.includes(t))) {
    return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞';
  }
  
  if (tokens.mxlToks.some(t => n.includes(normalizeStr(t)))) {
    return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤';
  }
  
  if (tokens.coatToks.some(t => n.includes(normalizeStr(t)))) {
    return '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è';
  }
  
  return '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
function analyzeMatches(name: string, tokens: RankingTokens): MatchAnalysis {
  const n = normalizeStr(name);
  const analysis: MatchAnalysis = {
    type_match: false,
    standard_match: false,
    size_match: false,
    coating_match: false,
    matched_tokens: [],
    explanation: []
  };
  
  console.log(`üîç analyzeMatches: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º "${name}"`);
  console.log(`üîç analyzeMatches: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${n}"`);
  console.log(`üîç analyzeMatches: –¢–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:`, tokens);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
  if (tokens.typeTok && n.includes(tokens.typeTok)) {
    analysis.type_match = true;
    analysis.matched_tokens.push(tokens.typeTok);
    analysis.explanation.push(`‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞: "${tokens.typeTok}"`);
    console.log(`üîç analyzeMatches: ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞: "${tokens.typeTok}"`);
  } else if (tokens.typeTok) {
    console.log(`üîç analyzeMatches: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞: "${tokens.typeTok}"`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
  const matchedStandards = tokens.stdToks.filter(t => n.includes(t));
  if (matchedStandards.length > 0) {
    analysis.standard_match = true;
    analysis.matched_tokens.push(...matchedStandards);
    analysis.explanation.push(`‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: "${matchedStandards.join(', ')}"`);
    console.log(`üîç analyzeMatches: ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: "${matchedStandards.join(', ')}"`);
  } else if (tokens.stdToks.length > 0) {
    console.log(`üîç analyzeMatches: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: "${tokens.stdToks.join(', ')}"`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
  const matchedSizes = tokens.mxlToks.filter(t => n.includes(normalizeStr(t)));
  if (matchedSizes.length > 0) {
    analysis.size_match = true;
    analysis.matched_tokens.push(...matchedSizes);
    analysis.explanation.push(`‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: "${matchedSizes.join(', ')}"`);
    console.log(`üîç analyzeMatches: ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: "${matchedSizes.join(', ')}"`);
  } else if (tokens.mxlToks.length > 0) {
    console.log(`üîç analyzeMatches: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: "${tokens.mxlToks.join(', ')}"`);
    console.log(`üîç analyzeMatches: –ò—Å–∫–∞–ª–∏ —Ç–æ–∫–µ–Ω—ã:`, tokens.mxlToks.map(t => normalizeStr(t)));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è
  const matchedCoatings = tokens.coatToks.filter(t => n.includes(normalizeStr(t)));
  if (matchedCoatings.length > 0) {
    analysis.coating_match = true;
    analysis.matched_tokens.push(...matchedCoatings);
    analysis.explanation.push(`‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è: "${matchedCoatings.join(', ')}"`);
    console.log(`üîç analyzeMatches: ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è: "${matchedCoatings.join(', ')}"`);
  } else if (tokens.coatToks.length > 0) {
    console.log(`üîç analyzeMatches: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è: "${tokens.coatToks.join(', ')}"`);
  }
  
  console.log(`üîç analyzeMatches: –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:`, analysis);
  return analysis;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è probability_percent —Å –≤–µ—Å–∞–º–∏
function calculateProbability(analysis: MatchAnalysis): ProbabilityData {
  let totalScore = 0;
  const weights = {
    type: 25,        // 25% –∑–∞ —Ç–∏–ø –¥–µ—Ç–∞–ª–∏
    standard: 40,    // 40% –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç DIN
    size: 30,        // 30% –∑–∞ —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    coating: 15      // 15% –∑–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ
  };
  
  const explanation = [...analysis.explanation];
  
  // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  if (analysis.type_match) {
    totalScore += weights.type;
    explanation.push(`üìä –í–∫–ª–∞–¥ —Ç–∏–ø–∞: +${weights.type}%`);
  }
  
  if (analysis.standard_match) {
    totalScore += weights.standard;
    explanation.push(`üìä –í–∫–ª–∞–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: +${weights.standard}%`);
  }
  
  if (analysis.size_match) {
    totalScore += weights.size;
    explanation.push(`üìä –í–∫–ª–∞–¥ —Ä–∞–∑–º–µ—Ä–æ–≤: +${weights.size}%`);
  }
  
  if (analysis.coating_match) {
    totalScore += weights.coating;
    explanation.push(`üìä –í–∫–ª–∞–¥ –ø–æ–∫—Ä—ã—Ç–∏—è: +${weights.coating}%`);
  }
  
  // –ë–æ–Ω—É—Å—ã –∑–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  if (analysis.standard_match && analysis.size_match) {
    const bonus = 15;
    totalScore += bonus;
    explanation.push(`üéØ –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç + —Ä–∞–∑–º–µ—Ä—ã: +${bonus}%`);
  }
  
  if (analysis.type_match && analysis.size_match) {
    const bonus = 10;
    totalScore += bonus;
    explanation.push(`üéØ –ë–æ–Ω—É—Å –∑–∞ —Ç–∏–ø + —Ä–∞–∑–º–µ—Ä—ã: +${bonus}%`);
  }
  
  if (analysis.type_match && analysis.standard_match && analysis.size_match) {
    const bonus = 20;
    totalScore += bonus;
    explanation.push(`üéØ –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: +${bonus}%`);
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
  if (analysis.standard_match && analysis.size_match) {
    // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –∏ —Ä–∞–∑–º–µ—Ä—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 80-90%
    totalScore = Math.max(totalScore, 80);
    if (totalScore > 80) {
      explanation.push(`üîí –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç+—Ä–∞–∑–º–µ—Ä—ã: 80%`);
    }
  } else if (analysis.type_match && !analysis.size_match && !analysis.standard_match) {
    // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª —Ç–æ–ª—å–∫–æ —Ç–∏–ø –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ ‚Äî –Ω–µ –±–æ–ª–µ–µ 40%
    totalScore = Math.min(totalScore, 40);
    explanation.push(`üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–ª—å–∫–æ —Ç–∏–ø–∞: 40%`);
  } else if (analysis.coating_match && !analysis.type_match && !analysis.size_match && !analysis.standard_match) {
    // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–æ —Ç–æ–ª—å–∫–æ –ø–æ–∫—Ä—ã—Ç–∏–µ ‚Äî –Ω–µ –±–æ–ª–µ–µ 20%
    totalScore = Math.min(totalScore, 20);
    explanation.push(`üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–ª—å–∫–æ –ø–æ–∫—Ä—ã—Ç–∏—è: 20%`);
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-100%
  const probability = Math.max(0, Math.min(100, Math.round(totalScore)));
  
  explanation.push(`üìà –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${probability}%`);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log("üîç calculateProbability: –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:", {
    totalScore,
    probability,
    type_match: analysis.type_match,
    standard_match: analysis.standard_match,
    size_match: analysis.size_match,
    coating_match: analysis.coating_match
  });
  
  return {
    probability,
    explanation: explanation.join('\n')
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
function rankResults(results: any[], tokens: RankingTokens, search_query: string) {
  return results.map(it => {
    const analysis = analyzeMatches(it.name || "", tokens);
    const probabilityData = calculateProbability(analysis);
    
    return {
      ...it,
      relevance_score: probabilityData.probability,
      probability_percent: probabilityData.probability,
      match_reason: getMatchReason(it.name || "", tokens),
      explanation: probabilityData.explanation,
      matched_tokens: analysis.matched_tokens,
      search_query: search_query,
      full_query: search_query
    };
  }).sort((a, b) => b.probability_percent - a.probability_percent);
}

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const { search_query, user_intent } = await req.json();
    
    console.log('üîç FastenerSearch: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', { 
      search_query, 
      user_intent_type: user_intent?.type,
      is_simple_parsed: user_intent?.is_simple_parsed 
    });

    const supabase = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_ANON_KEY") ?? ""
    );

    // ---- –ü–û–ò–°–ö –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–£ ----
    
    // –¢–∏–ø –¥–µ—Ç–∞–ª–∏
    const typeTok = user_intent?.type ? normalizeStr(user_intent.type) : null;
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã
    const stdToks = [];
    if (user_intent?.standard) {
      const standard = user_intent.standard.toLowerCase();
      stdToks.push(standard);
      if (standard.includes("din")) {
        stdToks.push(standard.replace(/\s+/g, "")); // DIN965
        stdToks.push(standard.replace(/\s+/g, " ")); // DIN 965
      }
    }
    
    // –†–∞–∑–º–µ—Ä—ã
    const mxlToks = mxlVariants(user_intent?.diameter, user_intent?.length);
    
    // –ü–æ–∫—Ä—ã—Ç–∏—è
    const coatToks = [];
    if (user_intent?.coating) {
      const coating = user_intent.coating.toLowerCase();
      coatToks.push(coating);
      if (coating.includes("—Ü–∏–Ω–∫")) {
        coatToks.push("—Ü–∏–Ω–∫", "–æ—Ü–∏–Ω–∫", "–æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π");
      }
    }

    console.log('üîç FastenerSearch: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:', {
      typeTok, stdToks, mxlToks, coatToks
    });
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
    if (mxlToks.length > 0) {
      console.log('üîç FastenerSearch: –¢–æ–∫–µ–Ω—ã —Ä–∞–∑–º–µ—Ä–æ–≤:', mxlToks);
      console.log('üîç FastenerSearch: –ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:', {
        diameter: user_intent?.diameter,
        length: user_intent?.length
      });
    }

    let results = [];

    // ---- –®–ê–ì 1: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É + —Ä–∞–∑–º–µ—Ä—ã ----
    if (typeTok && mxlToks.length > 0) {
      console.log("üîç –®–∞–≥ 1: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É + —Ä–∞–∑–º–µ—Ä—ã");
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (websearch, —Ä—É—Å—Å–∫–∞—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è)
      const searchQuery = [typeTok, ...mxlToks].join(" ");
      console.log("üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å:", searchQuery);
      
      const { data: step1Results, error } = await supabase
        .from("parts_catalog")
        .select("*")
        .textSearch("search_vector", searchQuery, { config: "russian", type: "websearch" })
        .limit(20);
      
      if (error) console.error("–®–∞–≥ 1 –æ—à–∏–±–∫–∞:", error);
      
      results = step1Results || [];
      console.log("üîç –®–∞–≥ 1 –Ω–∞–π–¥–µ–Ω–æ:", results.length);
    }

    // ---- –®–ê–ì 2: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É ----
    if (results.length === 0 && typeTok) {
      console.log("üîç –®–∞–≥ 2: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É");
      
      const searchQuery = typeTok;
      console.log("üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å:", searchQuery);
      
      const { data: step2Results, error } = await supabase
        .from("parts_catalog")
        .select("*")
        .textSearch("search_vector", searchQuery, { config: "russian", type: "websearch" })
        .limit(20);
      
      if (error) console.error("–®–∞–≥ 2 –æ—à–∏–±–∫–∞:", error);
      
      results = step2Results || [];
      console.log("üîç –®–∞–≥ 2 –Ω–∞–π–¥–µ–Ω–æ:", results.length);
    }

    // ---- –®–ê–ì 3: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É ----
    if (results.length === 0 && mxlToks.length > 0) {
      console.log("üîç –®–∞–≥ 3: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É");
      
      const searchQuery = mxlToks.join(" ");
      console.log("üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å:", searchQuery);
      
      const { data: step3Results, error } = await supabase
        .from("parts_catalog")
        .select("*")
        .textSearch("search_vector", searchQuery, { config: "russian", type: "websearch" })
        .limit(20);
      
      if (error) console.error("–®–∞–≥ 3 –æ—à–∏–±–∫–∞:", error);
      
      results = step3Results || [];
      console.log("üîç –®–∞–≥ 3 –Ω–∞–π–¥–µ–Ω–æ:", results.length);
    }

    // ---- –®–ê–ì 4: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É ----
    if (results.length === 0 && stdToks.length > 0) {
      console.log("üîç –®–∞–≥ 4: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É");
      
      const stdConds = stdToks.map(t => `name.ilike.%${escapeSqlLike(t)}%`).join(",");
      
      const { data: step4Results, error } = await supabase
        .from("parts_catalog")
        .select("*")
        .or(stdConds)
        .limit(20);
      
      if (error) console.error("–®–∞–≥ 4 –æ—à–∏–±–∫–∞:", error);
      
      results = step4Results || [];
      console.log("üîç –®–∞–≥ 4 –Ω–∞–π–¥–µ–Ω–æ:", results.length);
    }

    // ---- –®–ê–ì 5: –ü–æ–∏—Å–∫ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é ----
    if (results.length === 0 && coatToks.length > 0) {
      console.log("üîç –®–∞–≥ 5: –ü–æ–∏—Å–∫ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é");
      
      const coatConds = coatToks.map(t => `name.ilike.%${escapeSqlLike(t)}%`).join(",");
      
      const { data: step5Results, error } = await supabase
        .from("parts_catalog")
        .select("*")
        .or(coatConds)
        .limit(20);
      
      if (error) console.error("–®–∞–≥ 5 –æ—à–∏–±–∫–∞:", error);
      
      results = step5Results || [];
      console.log("üîç –®–∞–≥ 5 –Ω–∞–π–¥–µ–Ω–æ:", results.length);
    }

    console.log("üîç FastenerSearch: –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", results.length);

    // ---- –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ----
    const tokens: RankingTokens = { typeTok, stdToks, mxlToks, coatToks };
    const ranked = rankResults(results, tokens, search_query);

    console.log("üîç FastenerSearch: –û—Ç—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", ranked.length);
    if (ranked.length > 0) {
      console.log("üîç FastenerSearch: –¢–æ–ø-3 –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:", 
        ranked.slice(0, 3).map(r => ({ 
          name: r.name, 
          sku: r.sku, 
          score: r.relevance_score,
          probability_percent: r.probability_percent,
          reason: r.match_reason 
        }))
      );
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const firstResult = ranked[0];
      console.log("üîç FastenerSearch: –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", {
        name: firstResult.name,
        sku: firstResult.sku,
        probability_percent: firstResult.probability_percent,
        relevance_score: firstResult.relevance_score,
        match_reason: firstResult.match_reason,
        explanation: firstResult.explanation,
        matched_tokens: firstResult.matched_tokens
      });
    }

    return new Response(JSON.stringify({
      results: ranked,
      search_metadata: {
        query_type: user_intent?.is_simple_parsed ? 'simple' : 'complex',
        total_results: ranked.length,
        search_time_ms: Date.now(),
        used_fallback: false
      }
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      },
      status: 200
    });

  } catch (e) {
    console.error("‚ùå FastenerSearch: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", e);
    return new Response(JSON.stringify({
      error: "Internal error",
      details: e?.message || String(e)
    }), {
      headers: {
        ...corsHeaders,
        "Content-Type": "application/json"
      },
      status: 500
    });
  }
});