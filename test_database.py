#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
        from database.supabase_client import init_supabase
        await init_supabase()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        from database.supabase_client import _supabase_client
        
        if not _supabase_client:
            logger.error("‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        response = _supabase_client.table('parts_catalog').select('*', count='exact').limit(1).execute()
        count = response.count
        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        response = _supabase_client.table('parts_catalog').select('name, sku, type').limit(5).execute()
        examples = response.data
        
        logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
        for i, item in enumerate(examples, 1):
            logger.info(f"  {i}. {item.get('name', 'N/A')} (SKU: {item.get('sku', 'N/A')})")
        
        # –ò—â–µ–º –±–æ–ª—Ç—ã
        response = _supabase_client.table('parts_catalog').select('name, sku').ilike('name', '%–±–æ–ª—Ç%').limit(3).execute()
        bolts = response.data
        
        logger.info(f"üî© –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—Ç–æ–≤: {len(bolts)}")
        for bolt in bolts:
            logger.info(f"  - {bolt.get('name', 'N/A')}")
        
        # –ò—â–µ–º –≤–∏–Ω—Ç—ã
        response = _supabase_client.table('parts_catalog').select('name, sku').ilike('name', '%–≤–∏–Ω—Ç%').limit(3).execute()
        screws = response.data
        
        logger.info(f"üî© –ù–∞–π–¥–µ–Ω–æ –≤–∏–Ω—Ç–æ–≤: {len(screws)}")
        for screw in screws:
            logger.info(f"  - {screw.get('name', 'N/A')}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã: {e}")

if __name__ == "__main__":
    asyncio.run(test_database())
